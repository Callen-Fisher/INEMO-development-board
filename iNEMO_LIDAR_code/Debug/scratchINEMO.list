
C:\Users\rober\Documents\cheetah_inemo\INEMO_code\Debug\scratchINEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08004b90  08004b90  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08004b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000630  20000014  08004bac  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  20000644  08004bac  00020644  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009c48  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ddc  00000000  00000000  00029c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cc0  00000000  00000000  0002ba68  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b58  00000000  00000000  0002c728  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004d3c  00000000  00000000  0002d280  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000036dd  00000000  00000000  00031fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00035699  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003488  00000000  00000000  00035718  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00038ba0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000014 	.word	0x20000014
 8000204:	00000000 	.word	0x00000000
 8000208:	08004b78 	.word	0x08004b78

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000018 	.word	0x20000018
 8000224:	08004b78 	.word	0x08004b78

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f092 0f00 	teq	r2, #0
 8000512:	bf14      	ite	ne
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e720      	b.n	800036c <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aedc 	beq.w	800031a <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6c1      	b.n	800031a <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_frsub>:
 8000a5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	e002      	b.n	8000a68 <__addsf3>
 8000a62:	bf00      	nop

08000a64 <__aeabi_fsub>:
 8000a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a68 <__addsf3>:
 8000a68:	0042      	lsls	r2, r0, #1
 8000a6a:	bf1f      	itttt	ne
 8000a6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a70:	ea92 0f03 	teqne	r2, r3
 8000a74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7c:	d06a      	beq.n	8000b54 <__addsf3+0xec>
 8000a7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a86:	bfc1      	itttt	gt
 8000a88:	18d2      	addgt	r2, r2, r3
 8000a8a:	4041      	eorgt	r1, r0
 8000a8c:	4048      	eorgt	r0, r1
 8000a8e:	4041      	eorgt	r1, r0
 8000a90:	bfb8      	it	lt
 8000a92:	425b      	neglt	r3, r3
 8000a94:	2b19      	cmp	r3, #25
 8000a96:	bf88      	it	hi
 8000a98:	4770      	bxhi	lr
 8000a9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ab2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4249      	negne	r1, r1
 8000aba:	ea92 0f03 	teq	r2, r3
 8000abe:	d03f      	beq.n	8000b40 <__addsf3+0xd8>
 8000ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac8:	eb10 000c 	adds.w	r0, r0, ip
 8000acc:	f1c3 0320 	rsb	r3, r3, #32
 8000ad0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ad4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__addsf3+0x78>
 8000ada:	4249      	negs	r1, r1
 8000adc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ae4:	d313      	bcc.n	8000b0e <__addsf3+0xa6>
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aea:	d306      	bcc.n	8000afa <__addsf3+0x92>
 8000aec:	0840      	lsrs	r0, r0, #1
 8000aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af2:	f102 0201 	add.w	r2, r2, #1
 8000af6:	2afe      	cmp	r2, #254	; 0xfe
 8000af8:	d251      	bcs.n	8000b9e <__addsf3+0x136>
 8000afa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b02:	bf08      	it	eq
 8000b04:	f020 0001 	biceq.w	r0, r0, #1
 8000b08:	ea40 0003 	orr.w	r0, r0, r3
 8000b0c:	4770      	bx	lr
 8000b0e:	0049      	lsls	r1, r1, #1
 8000b10:	eb40 0000 	adc.w	r0, r0, r0
 8000b14:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b18:	f1a2 0201 	sub.w	r2, r2, #1
 8000b1c:	d1ed      	bne.n	8000afa <__addsf3+0x92>
 8000b1e:	fab0 fc80 	clz	ip, r0
 8000b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b26:	ebb2 020c 	subs.w	r2, r2, ip
 8000b2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b2e:	bfaa      	itet	ge
 8000b30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b34:	4252      	neglt	r2, r2
 8000b36:	4318      	orrge	r0, r3
 8000b38:	bfbc      	itt	lt
 8000b3a:	40d0      	lsrlt	r0, r2
 8000b3c:	4318      	orrlt	r0, r3
 8000b3e:	4770      	bx	lr
 8000b40:	f092 0f00 	teq	r2, #0
 8000b44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b48:	bf06      	itte	eq
 8000b4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b4e:	3201      	addeq	r2, #1
 8000b50:	3b01      	subne	r3, #1
 8000b52:	e7b5      	b.n	8000ac0 <__addsf3+0x58>
 8000b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	bf18      	it	ne
 8000b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b62:	d021      	beq.n	8000ba8 <__addsf3+0x140>
 8000b64:	ea92 0f03 	teq	r2, r3
 8000b68:	d004      	beq.n	8000b74 <__addsf3+0x10c>
 8000b6a:	f092 0f00 	teq	r2, #0
 8000b6e:	bf08      	it	eq
 8000b70:	4608      	moveq	r0, r1
 8000b72:	4770      	bx	lr
 8000b74:	ea90 0f01 	teq	r0, r1
 8000b78:	bf1c      	itt	ne
 8000b7a:	2000      	movne	r0, #0
 8000b7c:	4770      	bxne	lr
 8000b7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b82:	d104      	bne.n	8000b8e <__addsf3+0x126>
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	bf28      	it	cs
 8000b88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	4770      	bx	lr
 8000b8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b92:	bf3c      	itt	cc
 8000b94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bxcc	lr
 8000b9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	4770      	bx	lr
 8000ba8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bac:	bf16      	itet	ne
 8000bae:	4608      	movne	r0, r1
 8000bb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bb4:	4601      	movne	r1, r0
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	bf06      	itte	eq
 8000bba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bbe:	ea90 0f01 	teqeq	r0, r1
 8000bc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ui2f>:
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e004      	b.n	8000bd8 <__aeabi_i2f+0x8>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_i2f>:
 8000bd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	bf48      	it	mi
 8000bd6:	4240      	negmi	r0, r0
 8000bd8:	ea5f 0c00 	movs.w	ip, r0
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000be4:	4601      	mov	r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	e01c      	b.n	8000c26 <__aeabi_l2f+0x2a>

08000bec <__aeabi_ul2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <__aeabi_l2f+0x14>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_l2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c08:	d502      	bpl.n	8000c10 <__aeabi_l2f+0x14>
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	ea5f 0c01 	movs.w	ip, r1
 8000c14:	bf02      	ittt	eq
 8000c16:	4684      	moveq	ip, r0
 8000c18:	4601      	moveq	r1, r0
 8000c1a:	2000      	moveq	r0, #0
 8000c1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c20:	bf08      	it	eq
 8000c22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c2a:	fabc f28c 	clz	r2, ip
 8000c2e:	3a08      	subs	r2, #8
 8000c30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c34:	db10      	blt.n	8000c58 <__aeabi_l2f+0x5c>
 8000c36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c48:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f102 0220 	add.w	r2, r2, #32
 8000c5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c68:	fa21 f202 	lsr.w	r2, r1, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c76:	4770      	bx	lr

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	230f      	movs	r3, #15
 8000db6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	78db      	ldrb	r3, [r3, #3]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d03a      	beq.n	8000e36 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <NVIC_Init+0xbc>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000dca:	0a1b      	lsrs	r3, r3, #8
 8000dcc:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f1c3 0304 	rsb	r3, r3, #4
 8000dd4:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa22 f303 	lsr.w	r3, r2, r3
 8000dde:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	785b      	ldrb	r3, [r3, #1]
 8000de4:	461a      	mov	r2, r3
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	789b      	ldrb	r3, [r3, #2]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4013      	ands	r3, r2
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000e04:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <NVIC_Init+0xc0>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	6979      	ldr	r1, [r7, #20]
 8000e0c:	b2c9      	uxtb	r1, r1
 8000e0e:	4413      	add	r3, r2
 8000e10:	460a      	mov	r2, r1
 8000e12:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e16:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <NVIC_Init+0xc0>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	095b      	lsrs	r3, r3, #5
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f003 031f 	and.w	r3, r3, #31
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000e34:	e00f      	b.n	8000e56 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e36:	490b      	ldr	r1, [pc, #44]	; (8000e64 <NVIC_Init+0xc0>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	095b      	lsrs	r3, r3, #5
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	f003 031f 	and.w	r3, r3, #31
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e4e:	f100 0320 	add.w	r3, r0, #32
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000e56:	bf00      	nop
 8000e58:	371c      	adds	r7, #28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000e86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e8a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	4313      	orrs	r3, r2
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <ADC_Init+0xa0>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	795b      	ldrb	r3, [r3, #5]
 8000ec0:	005b      	lsls	r3, r3, #1
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000edc:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	7c1b      	ldrb	r3, [r3, #16]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	7afb      	ldrb	r3, [r7, #11]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8000eec:	7afb      	ldrb	r3, [r7, #11]
 8000eee:	051b      	lsls	r3, r3, #20
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	fff1f7fd 	.word	0xfff1f7fd

08000f0c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f043 0201 	orr.w	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8000f2a:	e005      	b.n	8000f38 <ADC_Cmd+0x2c>
    ADCx->CR2 |= CR2_ADON_Set;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f023 0201 	bic.w	r2, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	609a      	str	r2, [r3, #8]
  }
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <ADC_ITConfig+0x2c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 8000f6e:	e006      	b.n	8000f7e <ADC_ITConfig+0x3a>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	401a      	ands	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	605a      	str	r2, [r3, #4]
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f043 0208 	orr.w	r2, r3, #8
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e001      	b.n	8000fca <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f043 0204 	orr.w	r2, r3, #4
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	609a      	str	r2, [r3, #8]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e001      	b.n	800101a <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 8001046:	e005      	b.n	8001054 <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	609a      	str	r2, [r3, #8]
  }
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4608      	mov	r0, r1
 800106a:	4611      	mov	r1, r2
 800106c:	461a      	mov	r2, r3
 800106e:	4603      	mov	r3, r0
 8001070:	70fb      	strb	r3, [r7, #3]
 8001072:	460b      	mov	r3, r1
 8001074:	70bb      	strb	r3, [r7, #2]
 8001076:	4613      	mov	r3, r2
 8001078:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	2b09      	cmp	r3, #9
 8001086:	d923      	bls.n	80010d0 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	f1a3 020a 	sub.w	r2, r3, #10
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	2207      	movs	r2, #7
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80010ac:	7879      	ldrb	r1, [r7, #1]
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	f1a3 020a 	sub.w	r2, r3, #10
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	e01e      	b.n	800110e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 80010d6:	78fa      	ldrb	r2, [r7, #3]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	2207      	movs	r2, #7
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80010f0:	7879      	ldrb	r1, [r7, #1]
 80010f2:	78fa      	ldrb	r2, [r7, #3]
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	4313      	orrs	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800110e:	78bb      	ldrb	r3, [r7, #2]
 8001110:	2b06      	cmp	r3, #6
 8001112:	d821      	bhi.n	8001158 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001118:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800111a:	78bb      	ldrb	r3, [r7, #2]
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	221f      	movs	r2, #31
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	43db      	mvns	r3, r3
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4013      	ands	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8001136:	78f9      	ldrb	r1, [r7, #3]
 8001138:	78bb      	ldrb	r3, [r7, #2]
 800113a:	1e5a      	subs	r2, r3, #1
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	4313      	orrs	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001156:	e047      	b.n	80011e8 <ADC_RegularChannelConfig+0x188>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8001158:	78bb      	ldrb	r3, [r7, #2]
 800115a:	2b0c      	cmp	r3, #12
 800115c:	d821      	bhi.n	80011a2 <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8001164:	78bb      	ldrb	r3, [r7, #2]
 8001166:	1fda      	subs	r2, r3, #7
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	221f      	movs	r2, #31
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	43db      	mvns	r3, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8001180:	78f9      	ldrb	r1, [r7, #3]
 8001182:	78bb      	ldrb	r3, [r7, #2]
 8001184:	1fda      	subs	r2, r3, #7
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	631a      	str	r2, [r3, #48]	; 0x30
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80011a0:	e022      	b.n	80011e8 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80011a8:	78bb      	ldrb	r3, [r7, #2]
 80011aa:	f1a3 020d 	sub.w	r2, r3, #13
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	221f      	movs	r2, #31
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	43db      	mvns	r3, r3
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	4013      	ands	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80011c6:	78f9      	ldrb	r1, [r7, #3]
 80011c8:	78bb      	ldrb	r3, [r7, #2]
 80011ca:	f1a3 020d 	sub.w	r2, r3, #13
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4313      	orrs	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	b29b      	uxth	r3, r3
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 800121c:	4a08      	ldr	r2, [pc, #32]	; (8001240 <ADC_TempSensorVrefintCmd+0x34>)
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <ADC_TempSensorVrefintCmd+0x34>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001226:	6093      	str	r3, [r2, #8]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
  }
}
 8001228:	e005      	b.n	8001236 <ADC_TempSensorVrefintCmd+0x2a>
    ADC1->CR2 |= CR2_TSVREFE_Set;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <ADC_TempSensorVrefintCmd+0x34>)
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <ADC_TempSensorVrefintCmd+0x34>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001234:	6093      	str	r3, [r2, #8]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40012400 	.word	0x40012400

08001244 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800125e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001262:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001272:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800127e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800128a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001290:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60da      	str	r2, [r3, #12]
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f043 0201 	orr.w	r2, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8001332:	e006      	b.n	8001342 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800133c:	4013      	ands	r3, r2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.                 
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8001358:	887a      	ldrh	r2, [r7, #2]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	605a      	str	r2, [r3, #4]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <DMA_GetITStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <DMA_GetITStatus+0x48>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	e002      	b.n	8001390 <DMA_GetITStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <DMA_GetITStatus+0x4c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <DMA_GetITStatus+0x38>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 800139a:	2301      	movs	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	e001      	b.n	80013a4 <DMA_GetITStatus+0x3c>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020000 	.word	0x40020000

080013b8 <DMA_ClearITPendingBit>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <DMA_ClearITPendingBit+0x2c>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
  }
}
 80013d0:	e002      	b.n	80013d8 <DMA_ClearITPendingBit+0x20>
    DMA2->IFCR = DMAy_IT;
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <DMA_ClearITPendingBit+0x30>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6053      	str	r3, [r2, #4]
  }
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020000 	.word	0x40020000

080013ec <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	78db      	ldrb	r3, [r3, #3]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	789b      	ldrb	r3, [r3, #2]
 8001428:	461a      	mov	r2, r3
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	4313      	orrs	r3, r2
 800142e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d044      	beq.n	80014c4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	e038      	b.n	80014b8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001446:	2201      	movs	r2, #1
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d126      	bne.n	80014b2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800146a:	220f      	movs	r2, #15
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	43db      	mvns	r3, r3
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	4013      	ands	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4313      	orrs	r3, r2
 800148a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	78db      	ldrb	r3, [r3, #3]
 8001490:	2b28      	cmp	r3, #40	; 0x28
 8001492:	d105      	bne.n	80014a0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001494:	2201      	movs	r2, #1
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	409a      	lsls	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	e008      	b.n	80014b2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	78db      	ldrb	r3, [r3, #3]
 80014a4:	2b48      	cmp	r3, #72	; 0x48
 80014a6:	d104      	bne.n	80014b2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80014a8:	2201      	movs	r2, #1
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	409a      	lsls	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b07      	cmp	r3, #7
 80014bc:	d9c3      	bls.n	8001446 <GPIO_Init+0x5a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	2bff      	cmp	r3, #255	; 0xff
 80014ca:	d946      	bls.n	800155a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
 80014d6:	e03a      	b.n	800154e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3308      	adds	r3, #8
 80014dc:	2201      	movs	r2, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d127      	bne.n	8001548 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80014fe:	220f      	movs	r2, #15
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	43db      	mvns	r3, r3
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	4013      	ands	r3, r2
 8001510:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4313      	orrs	r3, r2
 800151e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	78db      	ldrb	r3, [r3, #3]
 8001524:	2b28      	cmp	r3, #40	; 0x28
 8001526:	d105      	bne.n	8001534 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	3308      	adds	r3, #8
 800152c:	2201      	movs	r2, #1
 800152e:	409a      	lsls	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	78db      	ldrb	r3, [r3, #3]
 8001538:	2b48      	cmp	r3, #72	; 0x48
 800153a:	d105      	bne.n	8001548 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	3308      	adds	r3, #8
 8001540:	2201      	movs	r2, #1
 8001542:	409a      	lsls	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	3301      	adds	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b07      	cmp	r3, #7
 8001552:	d9c1      	bls.n	80014d8 <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	605a      	str	r2, [r3, #4]
  }
}
 800155a:	bf00      	nop
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e001      	b.n	800158a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop

08001598 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	611a      	str	r2, [r3, #16]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80015c0:	887a      	ldrh	r2, [r7, #2]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	615a      	str	r2, [r3, #20]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da03      	bge.n	80015fa <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <GPIO_PinRemapConfig+0xdc>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	e002      	b.n	8001600 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <GPIO_PinRemapConfig+0xdc>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	0c1b      	lsrs	r3, r3, #16
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	b29b      	uxth	r3, r3
 800160e:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001616:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800161a:	d10a      	bne.n	8001632 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001622:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001624:	4a21      	ldr	r2, [pc, #132]	; (80016ac <GPIO_PinRemapConfig+0xdc>)
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <GPIO_PinRemapConfig+0xdc>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800162e:	6053      	str	r3, [r2, #4]
 8001630:	e021      	b.n	8001676 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00e      	beq.n	800165a <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800163c:	2203      	movs	r2, #3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4013      	ands	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e00d      	b.n	8001676 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	0d5b      	lsrs	r3, r3, #21
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	4013      	ands	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001674:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	0d5b      	lsrs	r3, r3, #21
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	4313      	orrs	r3, r2
 800168c:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	da03      	bge.n	800169c <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8001694:	4a05      	ldr	r2, [pc, #20]	; (80016ac <GPIO_PinRemapConfig+0xdc>)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 800169a:	e002      	b.n	80016a2 <GPIO_PinRemapConfig+0xd2>
  {
    AFIO->MAPR2 = tmpreg;
  }
  else
  {
    AFIO->MAPR = tmpreg;
 800169c:	4a03      	ldr	r2, [pc, #12]	; (80016ac <GPIO_PinRemapConfig+0xdc>)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	6053      	str	r3, [r2, #4]
  }  
}
 80016a2:	bf00      	nop
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40010000 	.word	0x40010000

080016b0 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <I2C_DeInit+0x44>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d10a      	bne.n	80016d6 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80016c0:	2101      	movs	r1, #1
 80016c2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80016c6:	f000 fb1f 	bl	8001d08 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 80016ca:	2100      	movs	r1, #0
 80016cc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80016d0:	f000 fb1a 	bl	8001d08 <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 80016d4:	e009      	b.n	80016ea <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80016d6:	2101      	movs	r1, #1
 80016d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80016dc:	f000 fb14 	bl	8001d08 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 80016e0:	2100      	movs	r1, #0
 80016e2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80016e6:	f000 fb0f 	bl	8001d08 <RCC_APB1PeriphResetCmd>
  }
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40005400 	.word	0x40005400

080016f8 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001706:	2300      	movs	r3, #0
 8001708:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800170a:	2304      	movs	r3, #4
 800170c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800170e:	4b57      	ldr	r3, [pc, #348]	; (800186c <I2C_Init+0x174>)
 8001710:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	889b      	ldrh	r3, [r3, #4]
 8001716:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8001718:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800171a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800171e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f9c7 	bl	8001ab8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <I2C_Init+0x178>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0c9b      	lsrs	r3, r3, #18
 8001738:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800173a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800173c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800173e:	4313      	orrs	r3, r2
 8001740:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001746:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a44      	ldr	r2, [pc, #272]	; (8001874 <I2C_Init+0x17c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d815      	bhi.n	8001792 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001776:	2b03      	cmp	r3, #3
 8001778:	d801      	bhi.n	800177e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800177a:	2304      	movs	r3, #4
 800177c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800177e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001782:	4313      	orrs	r3, r2
 8001784:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001788:	3301      	adds	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	841a      	strh	r2, [r3, #32]
 8001790:	e040      	b.n	8001814 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	88db      	ldrh	r3, [r3, #6]
 8001796:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800179a:	4293      	cmp	r3, r2
 800179c:	d109      	bne.n	80017b2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80017b0:	e00e      	b.n	80017d0 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	009a      	lsls	r2, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80017c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 80017d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80017da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 80017e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017f2:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80017f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <I2C_Init+0x180>)
 8001800:	fb82 1203 	smull	r1, r2, r2, r3
 8001804:	1192      	asrs	r2, r2, #6
 8001806:	17db      	asrs	r3, r3, #31
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b29b      	uxth	r3, r3
 800180c:	3301      	adds	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001818:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	b29b      	uxth	r3, r3
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001832:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001836:	f023 0302 	bic.w	r3, r3, #2
 800183a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	889a      	ldrh	r2, [r3, #4]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	895b      	ldrh	r3, [r3, #10]
 8001844:	4313      	orrs	r3, r2
 8001846:	b29a      	uxth	r2, r3
 8001848:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800184a:	4313      	orrs	r3, r2
 800184c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001852:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	899a      	ldrh	r2, [r3, #12]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	891b      	ldrh	r3, [r3, #8]
 800185c:	4313      	orrs	r3, r2
 800185e:	b29a      	uxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	811a      	strh	r2, [r3, #8]
}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	007a1200 	.word	0x007a1200
 8001870:	431bde83 	.word	0x431bde83
 8001874:	000186a0 	.word	0x000186a0
 8001878:	10624dd3 	.word	0x10624dd3

0800187c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 800189e:	e007      	b.n	80018b0 <I2C_Cmd+0x34>
    I2Cx->CR1 |= CR1_PE_Set;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	801a      	strh	r2, [r3, #0]
  }
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d008      	beq.n	80018e0 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 80018de:	e007      	b.n	80018f0 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= CR1_START_Set;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	801a      	strh	r2, [r3, #0]
  }
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop

080018fc <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 800191e:	e007      	b.n	8001930 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= CR1_STOP_Set;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	801a      	strh	r2, [r3, #0]
  }
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop

0800193c <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001958:	b29a      	uxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 800195e:	e007      	b.n	8001970 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= CR1_ACK_Set;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	b29b      	uxth	r3, r3
 8001966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	801a      	strh	r2, [r3, #0]
  }
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop

0800197c <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	b29a      	uxth	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	821a      	strh	r2, [r3, #16]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8a1b      	ldrh	r3, [r3, #16]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
 80019c4:	4613      	mov	r3, r2
 80019c6:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80019c8:	78bb      	ldrb	r3, [r7, #2]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	70fb      	strb	r3, [r7, #3]
 80019d6:	e003      	b.n	80019e0 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	821a      	strh	r2, [r3, #16]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop

080019f4 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	8a9b      	ldrh	r3, [r3, #20]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	8b1b      	ldrh	r3, [r3, #24]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a2e:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	401a      	ands	r2, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d102      	bne.n	8001a42 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]
 8001a40:	e001      	b.n	8001a46 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	0f1b      	lsrs	r3, r3, #28
 8001a72:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a7a:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3314      	adds	r3, #20
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e005      	b.n	8001a96 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3318      	adds	r3, #24
 8001a94:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75fb      	strb	r3, [r7, #23]
 8001aa6:	e001      	b.n	8001aac <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <RCC_GetClocksFreq+0x14c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d007      	beq.n	8001af0 <RCC_GetClocksFreq+0x38>
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d009      	beq.n	8001af8 <RCC_GetClocksFreq+0x40>
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d133      	bne.n	8001b50 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <RCC_GetClocksFreq+0x150>)
 8001aec:	601a      	str	r2, [r3, #0]
      break;
 8001aee:	e033      	b.n	8001b58 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a45      	ldr	r2, [pc, #276]	; (8001c08 <RCC_GetClocksFreq+0x150>)
 8001af4:	601a      	str	r2, [r3, #0]
      break;
 8001af6:	e02f      	b.n	8001b58 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001af8:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <RCC_GetClocksFreq+0x14c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b00:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001b02:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <RCC_GetClocksFreq+0x14c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	0c9b      	lsrs	r3, r3, #18
 8001b10:	3302      	adds	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4a3b      	ldr	r2, [pc, #236]	; (8001c0c <RCC_GetClocksFreq+0x154>)
 8001b1e:	fb02 f203 	mul.w	r2, r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001b26:	e017      	b.n	8001b58 <RCC_GetClocksFreq+0xa0>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001b28:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <RCC_GetClocksFreq+0x14c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4a35      	ldr	r2, [pc, #212]	; (8001c0c <RCC_GetClocksFreq+0x154>)
 8001b38:	fb02 f203 	mul.w	r2, r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001b40:	e00a      	b.n	8001b58 <RCC_GetClocksFreq+0xa0>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4a30      	ldr	r2, [pc, #192]	; (8001c08 <RCC_GetClocksFreq+0x150>)
 8001b46:	fb02 f203 	mul.w	r2, r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001b4e:	e003      	b.n	8001b58 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <RCC_GetClocksFreq+0x150>)
 8001b54:	601a      	str	r2, [r3, #0]
      break;
 8001b56:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <RCC_GetClocksFreq+0x14c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b60:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001b68:	4a29      	ldr	r2, [pc, #164]	; (8001c10 <RCC_GetClocksFreq+0x158>)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	40da      	lsrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <RCC_GetClocksFreq+0x14c>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b88:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001b90:	4a1f      	ldr	r2, [pc, #124]	; (8001c10 <RCC_GetClocksFreq+0x158>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	40da      	lsrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <RCC_GetClocksFreq+0x14c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001bb0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	0adb      	lsrs	r3, r3, #11
 8001bb6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001bb8:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <RCC_GetClocksFreq+0x158>)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	40da      	lsrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <RCC_GetClocksFreq+0x14c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bd8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	0b9b      	lsrs	r3, r3, #14
 8001bde:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <RCC_GetClocksFreq+0x15c>)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	4413      	add	r3, r2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	611a      	str	r2, [r3, #16]
}
 8001bfa:	bf00      	nop
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40021000 	.word	0x40021000
 8001c08:	007a1200 	.word	0x007a1200
 8001c0c:	003d0900 	.word	0x003d0900
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000010 	.word	0x20000010

08001c18 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d006      	beq.n	8001c38 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001c2a:	4909      	ldr	r1, [pc, #36]	; (8001c50 <RCC_AHBPeriphClockCmd+0x38>)
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <RCC_AHBPeriphClockCmd+0x38>)
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001c36:	e006      	b.n	8001c46 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001c38:	4905      	ldr	r1, [pc, #20]	; (8001c50 <RCC_AHBPeriphClockCmd+0x38>)
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <RCC_AHBPeriphClockCmd+0x38>)
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4013      	ands	r3, r2
 8001c44:	614b      	str	r3, [r1, #20]
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	40021000 	.word	0x40021000

08001c54 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001c66:	4909      	ldr	r1, [pc, #36]	; (8001c8c <RCC_APB2PeriphClockCmd+0x38>)
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <RCC_APB2PeriphClockCmd+0x38>)
 8001c6a:	699a      	ldr	r2, [r3, #24]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001c72:	e006      	b.n	8001c82 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001c74:	4905      	ldr	r1, [pc, #20]	; (8001c8c <RCC_APB2PeriphClockCmd+0x38>)
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <RCC_APB2PeriphClockCmd+0x38>)
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4013      	ands	r3, r2
 8001c80:	618b      	str	r3, [r1, #24]
  }
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000

08001c90 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d006      	beq.n	8001cb0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001ca2:	4909      	ldr	r1, [pc, #36]	; (8001cc8 <RCC_APB1PeriphClockCmd+0x38>)
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <RCC_APB1PeriphClockCmd+0x38>)
 8001ca6:	69da      	ldr	r2, [r3, #28]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001cae:	e006      	b.n	8001cbe <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001cb0:	4905      	ldr	r1, [pc, #20]	; (8001cc8 <RCC_APB1PeriphClockCmd+0x38>)
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <RCC_APB1PeriphClockCmd+0x38>)
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61cb      	str	r3, [r1, #28]
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40021000 	.word	0x40021000

08001ccc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001cde:	4909      	ldr	r1, [pc, #36]	; (8001d04 <RCC_APB2PeriphResetCmd+0x38>)
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <RCC_APB2PeriphResetCmd+0x38>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001cea:	e006      	b.n	8001cfa <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001cec:	4905      	ldr	r1, [pc, #20]	; (8001d04 <RCC_APB2PeriphResetCmd+0x38>)
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <RCC_APB2PeriphResetCmd+0x38>)
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	60cb      	str	r3, [r1, #12]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	40021000 	.word	0x40021000

08001d08 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001d1a:	4909      	ldr	r1, [pc, #36]	; (8001d40 <RCC_APB1PeriphResetCmd+0x38>)
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <RCC_APB1PeriphResetCmd+0x38>)
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001d26:	e006      	b.n	8001d36 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001d28:	4905      	ldr	r1, [pc, #20]	; (8001d40 <RCC_APB1PeriphResetCmd+0x38>)
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <RCC_APB1PeriphResetCmd+0x38>)
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4013      	ands	r3, r2
 8001d34:	610b      	str	r3, [r1, #16]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000

08001d44 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a17      	ldr	r2, [pc, #92]	; (8001dac <SPI_I2S_DeInit+0x68>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d10a      	bne.n	8001d6a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001d54:	2101      	movs	r1, #1
 8001d56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d5a:	f7ff ffb7 	bl	8001ccc <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001d5e:	2100      	movs	r1, #0
 8001d60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d64:	f7ff ffb2 	bl	8001ccc <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001d68:	e01c      	b.n	8001da4 <SPI_I2S_DeInit+0x60>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <SPI_I2S_DeInit+0x6c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d10a      	bne.n	8001d88 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001d72:	2101      	movs	r1, #1
 8001d74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d78:	f7ff ffc6 	bl	8001d08 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d82:	f7ff ffc1 	bl	8001d08 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001d86:	e00d      	b.n	8001da4 <SPI_I2S_DeInit+0x60>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else
  {
    if (SPIx == SPI3)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SPI_I2S_DeInit+0x70>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d109      	bne.n	8001da4 <SPI_I2S_DeInit+0x60>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001d90:	2101      	movs	r1, #1
 8001d92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d96:	f7ff ffb7 	bl	8001d08 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001da0:	f7ff ffb2 	bl	8001d08 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40013000 	.word	0x40013000
 8001db0:	40003800 	.word	0x40003800
 8001db4:	40003c00 	.word	0x40003c00

08001db8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001dcc:	89fb      	ldrh	r3, [r7, #14]
 8001dce:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001dd2:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	881a      	ldrh	r2, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e04:	4313      	orrs	r3, r2
 8001e06:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	89fb      	ldrh	r3, [r7, #14]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	89fa      	ldrh	r2, [r7, #14]
 8001e1a:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	8b9b      	ldrh	r3, [r3, #28]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	8a1a      	ldrh	r2, [r3, #16]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	821a      	strh	r2, [r3, #16]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop

08001e40 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001e62:	e007      	b.n	8001e74 <SPI_Cmd+0x34>
    SPIx->CR1 |= CR1_SPE_Set;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	801a      	strh	r2, [r3, #0]
  }
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	819a      	strh	r2, [r3, #12]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	899b      	ldrh	r3, [r3, #12]
 8001ea8:	b29b      	uxth	r3, r3
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	891b      	ldrh	r3, [r3, #8]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e001      	b.n	8001ede <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop

08001eec <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a2e      	ldr	r2, [pc, #184]	; (8001fbc <TIM_TimeBaseInit+0xd0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <TIM_TimeBaseInit+0x44>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a2d      	ldr	r2, [pc, #180]	; (8001fc0 <TIM_TimeBaseInit+0xd4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00f      	beq.n	8001f30 <TIM_TimeBaseInit+0x44>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f16:	d00b      	beq.n	8001f30 <TIM_TimeBaseInit+0x44>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a2a      	ldr	r2, [pc, #168]	; (8001fc4 <TIM_TimeBaseInit+0xd8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d007      	beq.n	8001f30 <TIM_TimeBaseInit+0x44>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <TIM_TimeBaseInit+0xdc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d003      	beq.n	8001f30 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a28      	ldr	r2, [pc, #160]	; (8001fcc <TIM_TimeBaseInit+0xe0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d108      	bne.n	8001f42 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001f30:	89fb      	ldrh	r3, [r7, #14]
 8001f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f36:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	885a      	ldrh	r2, [r3, #2]
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <TIM_TimeBaseInit+0xe4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00c      	beq.n	8001f64 <TIM_TimeBaseInit+0x78>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <TIM_TimeBaseInit+0xe8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d008      	beq.n	8001f64 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001f52:	89fb      	ldrh	r3, [r7, #14]
 8001f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f58:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	88da      	ldrh	r2, [r3, #6]
 8001f5e:	89fb      	ldrh	r3, [r7, #14]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	89fa      	ldrh	r2, [r7, #14]
 8001f68:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	889a      	ldrh	r2, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	881a      	ldrh	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <TIM_TimeBaseInit+0xd0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00f      	beq.n	8001fa2 <TIM_TimeBaseInit+0xb6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <TIM_TimeBaseInit+0xd4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00b      	beq.n	8001fa2 <TIM_TimeBaseInit+0xb6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <TIM_TimeBaseInit+0xec>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <TIM_TimeBaseInit+0xb6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <TIM_TimeBaseInit+0xf0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d003      	beq.n	8001fa2 <TIM_TimeBaseInit+0xb6>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <TIM_TimeBaseInit+0xf4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d104      	bne.n	8001fac <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	7a1b      	ldrb	r3, [r3, #8]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	829a      	strh	r2, [r3, #20]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	40012c00 	.word	0x40012c00
 8001fc0:	40013400 	.word	0x40013400
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40000800 	.word	0x40000800
 8001fcc:	40000c00 	.word	0x40000c00
 8001fd0:	40001000 	.word	0x40001000
 8001fd4:	40001400 	.word	0x40001400
 8001fd8:	40014000 	.word	0x40014000
 8001fdc:	40014400 	.word	0x40014400
 8001fe0:	40014800 	.word	0x40014800

08001fe4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	817b      	strh	r3, [r7, #10]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	81fb      	strh	r3, [r7, #14]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8c1b      	ldrh	r3, [r3, #32]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002004:	b29a      	uxth	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	8c1b      	ldrh	r3, [r3, #32]
 800200e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	889b      	ldrh	r3, [r3, #4]
 8002014:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8b9b      	ldrh	r3, [r3, #28]
 800201a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 800201c:	897b      	ldrh	r3, [r7, #10]
 800201e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002022:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8002024:	897b      	ldrh	r3, [r7, #10]
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	881a      	ldrh	r2, [r3, #0]
 8002030:	897b      	ldrh	r3, [r7, #10]
 8002032:	4313      	orrs	r3, r2
 8002034:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800203c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	891b      	ldrh	r3, [r3, #8]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b29a      	uxth	r2, r3
 8002046:	89fb      	ldrh	r3, [r7, #14]
 8002048:	4313      	orrs	r3, r2
 800204a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	885b      	ldrh	r3, [r3, #2]
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	b29a      	uxth	r2, r3
 8002054:	89fb      	ldrh	r3, [r7, #14]
 8002056:	4313      	orrs	r3, r2
 8002058:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a22      	ldr	r2, [pc, #136]	; (80020e8 <TIM_OC3Init+0x104>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d003      	beq.n	800206a <TIM_OC3Init+0x86>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a21      	ldr	r2, [pc, #132]	; (80020ec <TIM_OC3Init+0x108>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d12b      	bne.n	80020c2 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 800206a:	89fb      	ldrh	r3, [r7, #14]
 800206c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002070:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	895b      	ldrh	r3, [r3, #10]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	b29a      	uxth	r2, r3
 800207a:	89fb      	ldrh	r3, [r7, #14]
 800207c:	4313      	orrs	r3, r2
 800207e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8002080:	89fb      	ldrh	r3, [r7, #14]
 8002082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002086:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	889b      	ldrh	r3, [r3, #4]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b29a      	uxth	r2, r3
 8002090:	89fb      	ldrh	r3, [r7, #14]
 8002092:	4313      	orrs	r3, r2
 8002094:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8002096:	89bb      	ldrh	r3, [r7, #12]
 8002098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800209c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 800209e:	89bb      	ldrh	r3, [r7, #12]
 80020a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020a4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	899b      	ldrh	r3, [r3, #12]
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	89bb      	ldrh	r3, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	89db      	ldrh	r3, [r3, #14]
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	89bb      	ldrh	r3, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	89ba      	ldrh	r2, [r7, #12]
 80020c6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	897a      	ldrh	r2, [r7, #10]
 80020cc:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	88da      	ldrh	r2, [r3, #6]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	89fa      	ldrh	r2, [r7, #14]
 80020da:	841a      	strh	r2, [r3, #32]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	40013400 	.word	0x40013400

080020f0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8002112:	e007      	b.n	8002124 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	801a      	strh	r2, [r3, #0]
  }
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop

08002130 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00c      	beq.n	800215c <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002148:	b29b      	uxth	r3, r3
 800214a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800214e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
 800215a:	e009      	b.n	8002170 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002162:	b29b      	uxth	r3, r3
 8002164:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002168:	b29a      	uxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop

0800217c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	899b      	ldrh	r3, [r3, #12]
 8002196:	b29a      	uxth	r2, r3
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	4313      	orrs	r3, r2
 800219c:	b29a      	uxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80021a2:	e009      	b.n	80021b8 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	899b      	ldrh	r3, [r3, #12]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4013      	ands	r3, r2
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	819a      	strh	r2, [r3, #12]
  }
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop

080021c4 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	4608      	mov	r0, r1
 80021ce:	4611      	mov	r1, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	817b      	strh	r3, [r7, #10]
 80021d6:	460b      	mov	r3, r1
 80021d8:	813b      	strh	r3, [r7, #8]
 80021da:	4613      	mov	r3, r2
 80021dc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	891b      	ldrh	r3, [r3, #8]
 80021ee:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8b1b      	ldrh	r3, [r3, #24]
 80021f4:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8c1b      	ldrh	r3, [r3, #32]
 80021fa:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80021fc:	8afb      	ldrh	r3, [r7, #22]
 80021fe:	f023 0307 	bic.w	r3, r3, #7
 8002202:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8002204:	8afa      	ldrh	r2, [r7, #22]
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	4313      	orrs	r3, r2
 800220a:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800220c:	8abb      	ldrh	r3, [r7, #20]
 800220e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002218:	8abb      	ldrh	r3, [r7, #20]
 800221a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8002224:	8a7b      	ldrh	r3, [r7, #18]
 8002226:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800222a:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	b29a      	uxth	r2, r3
 8002232:	893b      	ldrh	r3, [r7, #8]
 8002234:	4313      	orrs	r3, r2
 8002236:	b29a      	uxth	r2, r3
 8002238:	8a7b      	ldrh	r3, [r7, #18]
 800223a:	4313      	orrs	r3, r2
 800223c:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8afa      	ldrh	r2, [r7, #22]
 8002242:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8aba      	ldrh	r2, [r7, #20]
 8002248:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8a7a      	ldrh	r2, [r7, #18]
 800224e:	841a      	strh	r2, [r3, #32]
}
 8002250:	bf00      	nop
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop

0800225c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d008      	beq.n	8002280 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	b29a      	uxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 800227e:	e007      	b.n	8002290 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	801a      	strh	r2, [r3, #0]
  }
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8b9b      	ldrh	r3, [r3, #28]
 80022b0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 80022b2:	89fb      	ldrh	r3, [r7, #14]
 80022b4:	f023 0308 	bic.w	r3, r3, #8
 80022b8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80022ba:	89fa      	ldrh	r2, [r7, #14]
 80022bc:	887b      	ldrh	r3, [r7, #2]
 80022be:	4313      	orrs	r3, r2
 80022c0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	89fa      	ldrh	r2, [r7, #14]
 80022c6:	839a      	strh	r2, [r3, #28]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop

080022d4 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022fc:	b29b      	uxth	r3, r3
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8002318:	2300      	movs	r3, #0
 800231a:	81bb      	strh	r3, [r7, #12]
 800231c:	2300      	movs	r3, #0
 800231e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	8a1b      	ldrh	r3, [r3, #16]
 8002324:	b29a      	uxth	r2, r3
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	4013      	ands	r3, r2
 800232a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	899b      	ldrh	r3, [r3, #12]
 8002330:	b29a      	uxth	r2, r3
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	4013      	ands	r3, r2
 8002336:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002338:	89bb      	ldrh	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <TIM_GetITStatus+0x42>
 800233e:	897b      	ldrh	r3, [r7, #10]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e001      	b.n	800234e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	43db      	mvns	r3, r3
 800236c:	b29a      	uxth	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	821a      	strh	r2, [r3, #16]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	; 0x30
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238a:	2300      	movs	r3, #0
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	8a1b      	ldrh	r3, [r3, #16]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80023a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a8:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80023ac:	4013      	ands	r3, r2
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	88db      	ldrh	r3, [r3, #6]
 80023b4:	461a      	mov	r2, r3
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	4313      	orrs	r3, r2
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023be:	b29a      	uxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	899b      	ldrh	r3, [r3, #12]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80023cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ce:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80023d2:	4013      	ands	r3, r2
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	889a      	ldrh	r2, [r3, #4]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	891b      	ldrh	r3, [r3, #8]
 80023de:	4313      	orrs	r3, r2
 80023e0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	4313      	orrs	r3, r2
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	8a9b      	ldrh	r3, [r3, #20]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8002402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002404:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8002408:	4013      	ands	r3, r2
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	899b      	ldrh	r3, [r3, #12]
 8002410:	461a      	mov	r2, r3
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	4313      	orrs	r3, r2
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	b29a      	uxth	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002420:	f107 0308 	add.w	r3, r7, #8
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fb47 	bl	8001ab8 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4a2e      	ldr	r2, [pc, #184]	; (80024e8 <USART_Init+0x16c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d102      	bne.n	8002438 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 8002436:	e001      	b.n	800243c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	899b      	ldrh	r3, [r3, #12]
 8002440:	b29b      	uxth	r3, r3
 8002442:	b21b      	sxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	da0c      	bge.n	8002462 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	009a      	lsls	r2, r3, #2
 8002452:	441a      	add	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	e00b      	b.n	800247a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	009a      	lsls	r2, r3, #2
 800246c:	441a      	add	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <USART_Init+0x170>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	2264      	movs	r2, #100	; 0x64
 800248e:	fb02 f303 	mul.w	r3, r2, r3
 8002492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	899b      	ldrh	r3, [r3, #12]
 800249c:	b29b      	uxth	r3, r3
 800249e:	b21b      	sxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da0c      	bge.n	80024be <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	3332      	adds	r3, #50	; 0x32
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <USART_Init+0x170>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b8:	4313      	orrs	r3, r2
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024bc:	e00b      	b.n	80024d6 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	3332      	adds	r3, #50	; 0x32
 80024c4:	4a09      	ldr	r2, [pc, #36]	; (80024ec <USART_Init+0x170>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d2:	4313      	orrs	r3, r2
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	b29a      	uxth	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	811a      	strh	r2, [r3, #8]
}
 80024de:	bf00      	nop
 80024e0:	3730      	adds	r7, #48	; 0x30
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40013800 	.word	0x40013800
 80024ec:	51eb851f 	.word	0x51eb851f

080024f0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	899b      	ldrh	r3, [r3, #12]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800250c:	b29a      	uxth	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8002512:	e007      	b.n	8002524 <USART_Cmd+0x34>
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	899b      	ldrh	r3, [r3, #12]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800251e:	b29a      	uxth	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	819a      	strh	r2, [r3, #12]
  }
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop

08002530 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8a9b      	ldrh	r3, [r3, #20]
 800254a:	b29a      	uxth	r2, r3
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	4313      	orrs	r3, r2
 8002550:	b29a      	uxth	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 8002556:	e009      	b.n	800256c <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	8a9b      	ldrh	r3, [r3, #20]
 800255c:	b29a      	uxth	r2, r3
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	43db      	mvns	r3, r3
 8002562:	b29b      	uxth	r3, r3
 8002564:	4013      	ands	r3, r2
 8002566:	b29a      	uxth	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	829a      	strh	r2, [r3, #20]
  }
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop

08002578 <setUpADC>:
//the DMA has been set up in the DMA.c file.

//Rob's source - http://www.embedds.com/multichannel-adc-using-dma-on-stm32/
#include "ADC.h"

void setUpADC() {
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
	//source: http://www.embedds.com/introducing-to-stm32-adc-programming-part2/
	V25 = 1750;    // when V25=1.41V at ref 3.3V
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <setUpADC+0x120>)
 8002580:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8002584:	801a      	strh	r2, [r3, #0]
	Avg_Slope = 5; //when avg_slope=4.3mV/C at ref 3.3V
 8002586:	4b45      	ldr	r3, [pc, #276]	; (800269c <setUpADC+0x124>)
 8002588:	2205      	movs	r2, #5
 800258a:	801a      	strh	r2, [r3, #0]

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800258c:	2101      	movs	r1, #1
 800258e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002592:	f7ff fb5f 	bl	8001c54 <RCC_APB2PeriphClockCmd>
	ADC_InitTypeDef ADC_InitStructure;
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;	//was disabled, but now we need multichannels
 800259a:	2300      	movs	r3, #0
 800259c:	723b      	strb	r3, [r7, #8]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;	//was disabled
 800259e:	2301      	movs	r3, #1
 80025a0:	727b      	strb	r3, [r7, #9]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 80025a2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80025a6:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfChannel = 1;	//was 1
 80025ac:	2301      	movs	r3, #1
 80025ae:	753b      	strb	r3, [r7, #20]
	ADC_Init(ADC1, &ADC_InitStructure);
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	4619      	mov	r1, r3
 80025b4:	483a      	ldr	r0, [pc, #232]	; (80026a0 <setUpADC+0x128>)
 80025b6:	f7fe fc57 	bl	8000e68 <ADC_Init>
	ADC_TempSensorVrefintCmd(ENABLE);
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7fe fe26 	bl	800120c <ADC_TempSensorVrefintCmd>
	//temperature only reading in correctly when it's 1 and current sensor is 2:
	//	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 2, ADC_SampleTime_41Cycles5); // for current sensor, PA5
	ADC_RegularChannelConfig(ADC1, ADC_Channel_16, 1, ADC_SampleTime_41Cycles5); // ADC_SampleTime_7Cycles5);
 80025c0:	2304      	movs	r3, #4
 80025c2:	2201      	movs	r2, #1
 80025c4:	2110      	movs	r1, #16
 80025c6:	4836      	ldr	r0, [pc, #216]	; (80026a0 <setUpADC+0x128>)
 80025c8:	f7fe fd4a 	bl	8001060 <ADC_RegularChannelConfig>
	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 80025cc:	2201      	movs	r2, #1
 80025ce:	f44f 7108 	mov.w	r1, #544	; 0x220
 80025d2:	4833      	ldr	r0, [pc, #204]	; (80026a0 <setUpADC+0x128>)
 80025d4:	f7fe fcb6 	bl	8000f44 <ADC_ITConfig>



	/* ADC2 configuration ------------------------------------------------------*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 80025d8:	2101      	movs	r1, #1
 80025da:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025de:	f7ff fb39 	bl	8001c54 <RCC_APB2PeriphClockCmd>
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	723b      	strb	r3, [r7, #8]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80025ea:	2301      	movs	r3, #1
 80025ec:	727b      	strb	r3, [r7, #9]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 80025ee:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80025f2:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfChannel = 1;
 80025f8:	2301      	movs	r3, #1
 80025fa:	753b      	strb	r3, [r7, #20]
	ADC_Init(ADC2, &ADC_InitStructure);
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	4619      	mov	r1, r3
 8002600:	4828      	ldr	r0, [pc, #160]	; (80026a4 <setUpADC+0x12c>)
 8002602:	f7fe fc31 	bl	8000e68 <ADC_Init>
	/* ADC2 regular channels configuration */
	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 1, ADC_SampleTime_41Cycles5);
 8002606:	2304      	movs	r3, #4
 8002608:	2201      	movs	r2, #1
 800260a:	2105      	movs	r1, #5
 800260c:	4825      	ldr	r0, [pc, #148]	; (80026a4 <setUpADC+0x12c>)
 800260e:	f7fe fd27 	bl	8001060 <ADC_RegularChannelConfig>
	/* Enable ADC2 EOC interrupt */
	ADC_ITConfig(ADC2, ADC_IT_EOC, ENABLE);
 8002612:	2201      	movs	r2, #1
 8002614:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002618:	4822      	ldr	r0, [pc, #136]	; (80026a4 <setUpADC+0x12c>)
 800261a:	f7fe fc93 	bl	8000f44 <ADC_ITConfig>


	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 800261e:	2101      	movs	r1, #1
 8002620:	481f      	ldr	r0, [pc, #124]	; (80026a0 <setUpADC+0x128>)
 8002622:	f7fe fc73 	bl	8000f0c <ADC_Cmd>

	/* Enable ADC1 reset calibration register */
	ADC_ResetCalibration(ADC1);
 8002626:	481e      	ldr	r0, [pc, #120]	; (80026a0 <setUpADC+0x128>)
 8002628:	f7fe fcae 	bl	8000f88 <ADC_ResetCalibration>
	/* Check the end of ADC1 reset calibration register */
	while(ADC_GetResetCalibrationStatus(ADC1));
 800262c:	bf00      	nop
 800262e:	481c      	ldr	r0, [pc, #112]	; (80026a0 <setUpADC+0x128>)
 8002630:	f7fe fcba 	bl	8000fa8 <ADC_GetResetCalibrationStatus>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f9      	bne.n	800262e <setUpADC+0xb6>

	/* Start ADC1 calibration */
	ADC_StartCalibration(ADC1);
 800263a:	4819      	ldr	r0, [pc, #100]	; (80026a0 <setUpADC+0x128>)
 800263c:	f7fe fccc 	bl	8000fd8 <ADC_StartCalibration>
	/* Check the end of ADC1 calibration */
	while(ADC_GetCalibrationStatus(ADC1));
 8002640:	bf00      	nop
 8002642:	4817      	ldr	r0, [pc, #92]	; (80026a0 <setUpADC+0x128>)
 8002644:	f7fe fcd8 	bl	8000ff8 <ADC_GetCalibrationStatus>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <setUpADC+0xca>

	/* Enable ADC2 */
	ADC_Cmd(ADC2, ENABLE);
 800264e:	2101      	movs	r1, #1
 8002650:	4814      	ldr	r0, [pc, #80]	; (80026a4 <setUpADC+0x12c>)
 8002652:	f7fe fc5b 	bl	8000f0c <ADC_Cmd>

	/* Enable ADC2 reset calibration register */
	ADC_ResetCalibration(ADC2);
 8002656:	4813      	ldr	r0, [pc, #76]	; (80026a4 <setUpADC+0x12c>)
 8002658:	f7fe fc96 	bl	8000f88 <ADC_ResetCalibration>
	/* Check the end of ADC2 reset calibration register */
	while(ADC_GetResetCalibrationStatus(ADC2));
 800265c:	bf00      	nop
 800265e:	4811      	ldr	r0, [pc, #68]	; (80026a4 <setUpADC+0x12c>)
 8002660:	f7fe fca2 	bl	8000fa8 <ADC_GetResetCalibrationStatus>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f9      	bne.n	800265e <setUpADC+0xe6>

	/* Start ADC2 calibration */
	ADC_StartCalibration(ADC2);
 800266a:	480e      	ldr	r0, [pc, #56]	; (80026a4 <setUpADC+0x12c>)
 800266c:	f7fe fcb4 	bl	8000fd8 <ADC_StartCalibration>
	/* Check the end of ADC2 calibration */
	while(ADC_GetCalibrationStatus(ADC2));
 8002670:	bf00      	nop
 8002672:	480c      	ldr	r0, [pc, #48]	; (80026a4 <setUpADC+0x12c>)
 8002674:	f7fe fcc0 	bl	8000ff8 <ADC_GetCalibrationStatus>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f9      	bne.n	8002672 <setUpADC+0xfa>

	/* Start ADC1 Software Conversion */
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 800267e:	2101      	movs	r1, #1
 8002680:	4807      	ldr	r0, [pc, #28]	; (80026a0 <setUpADC+0x128>)
 8002682:	f7fe fcd1 	bl	8001028 <ADC_SoftwareStartConvCmd>
	/* Start ADC2 Software Conversion */
	ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 8002686:	2101      	movs	r1, #1
 8002688:	4806      	ldr	r0, [pc, #24]	; (80026a4 <setUpADC+0x12c>)
 800268a:	f7fe fccd 	bl	8001028 <ADC_SoftwareStartConvCmd>
	//	while (ADC_GetCalibrationStatus(ADC1))
	//		;
	//set up the DMA
	//	setUpDMA((&ADC_ConvertedValue[0]));
	//	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000044e 	.word	0x2000044e
 800269c:	2000044c 	.word	0x2000044c
 80026a0:	40012400 	.word	0x40012400
 80026a4:	40012800 	.word	0x40012800

080026a8 <readADCdma>:
//	TemperatureC = (uint8_t) ((V25 - AD_value) / Avg_Slope + 25);
//	return TemperatureC;
//}


void readADCdma(u16* out, float *motor_current_float) {
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	//	while (!(DMA_GetFlagStatus(DMA1_FLAG_TC1)))
	//		;
	//	ADC_Cmd(ADC1, DISABLE);
	//	ADC_SoftwareStartConvCmd(ADC1, DISABLE);
	//	DMA_ClearFlag(DMA1_FLAG_TC1);
	float tempMotorCurrent = 0;
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
	tempMotorCurrent = -(ADC_GetConversionValue(ADC2)*(10.0/4096.0)*(3.30/5.0)-5.0)*1000.0;
 80026b8:	4841      	ldr	r0, [pc, #260]	; (80027c0 <readADCdma+0x118>)
 80026ba:	f7fe fd9b 	bl	80011f4 <ADC_GetConversionValue>
 80026be:	4603      	mov	r3, r0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff03 	bl	80004cc <__aeabi_i2d>
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <readADCdma+0x11c>)
 80026cc:	f7fd ff64 	bl	8000598 <__aeabi_dmul>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	a337      	add	r3, pc, #220	; (adr r3, 80027b8 <readADCdma+0x110>)
 80026da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026de:	f7fd ff5b 	bl	8000598 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <readADCdma+0x120>)
 80026f0:	f7fd fd9e 	bl	8000230 <__aeabi_dsub>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4614      	mov	r4, r2
 80026fa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <readADCdma+0x124>)
 8002704:	4620      	mov	r0, r4
 8002706:	4629      	mov	r1, r5
 8002708:	f7fd ff46 	bl	8000598 <__aeabi_dmul>
 800270c:	4603      	mov	r3, r0
 800270e:	460c      	mov	r4, r1
 8002710:	4618      	mov	r0, r3
 8002712:	4621      	mov	r1, r4
 8002714:	f7fe f952 	bl	80009bc <__aeabi_d2f>
 8002718:	4603      	mov	r3, r0
 800271a:	60bb      	str	r3, [r7, #8]
	ADC_ConvertedValue[0] = ADC_GetConversionValue(ADC1);
 800271c:	482c      	ldr	r0, [pc, #176]	; (80027d0 <readADCdma+0x128>)
 800271e:	f7fe fd69 	bl	80011f4 <ADC_GetConversionValue>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <readADCdma+0x12c>)
 8002728:	801a      	strh	r2, [r3, #0]
	ADC_ConvertedValue[1] = (uint16_t)(tempMotorCurrent);
 800272a:	68b8      	ldr	r0, [r7, #8]
 800272c:	f7fe fb1a 	bl	8000d64 <__aeabi_f2uiz>
 8002730:	4603      	mov	r3, r0
 8002732:	b29a      	uxth	r2, r3
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <readADCdma+0x12c>)
 8002736:	805a      	strh	r2, [r3, #2]

	for (int i = 0; i < BufferSize; i++) {
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e00b      	b.n	8002756 <readADCdma+0xae>
		*out = ADC_ConvertedValue[i];
 800273e:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <readADCdma+0x12c>)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	801a      	strh	r2, [r3, #0]
		out++;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3302      	adds	r3, #2
 800274e:	607b      	str	r3, [r7, #4]
	float tempMotorCurrent = 0;
	tempMotorCurrent = -(ADC_GetConversionValue(ADC2)*(10.0/4096.0)*(3.30/5.0)-5.0)*1000.0;
	ADC_ConvertedValue[0] = ADC_GetConversionValue(ADC1);
	ADC_ConvertedValue[1] = (uint16_t)(tempMotorCurrent);

	for (int i = 0; i < BufferSize; i++) {
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3301      	adds	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b01      	cmp	r3, #1
 800275a:	ddf0      	ble.n	800273e <readADCdma+0x96>
		*out = ADC_ConvertedValue[i];
		out++;
	}
	*motor_current_float = -(ADC_GetConversionValue(ADC2)*(10.0/4096.0)*(3.30/5.0)-5.0);
 800275c:	4818      	ldr	r0, [pc, #96]	; (80027c0 <readADCdma+0x118>)
 800275e:	f7fe fd49 	bl	80011f4 <ADC_GetConversionValue>
 8002762:	4603      	mov	r3, r0
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd feb1 	bl	80004cc <__aeabi_i2d>
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <readADCdma+0x11c>)
 8002770:	f7fd ff12 	bl	8000598 <__aeabi_dmul>
 8002774:	4603      	mov	r3, r0
 8002776:	460c      	mov	r4, r1
 8002778:	4618      	mov	r0, r3
 800277a:	4621      	mov	r1, r4
 800277c:	a30e      	add	r3, pc, #56	; (adr r3, 80027b8 <readADCdma+0x110>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	f7fd ff09 	bl	8000598 <__aeabi_dmul>
 8002786:	4603      	mov	r3, r0
 8002788:	460c      	mov	r4, r1
 800278a:	4618      	mov	r0, r3
 800278c:	4621      	mov	r1, r4
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <readADCdma+0x120>)
 8002794:	f7fd fd4c 	bl	8000230 <__aeabi_dsub>
 8002798:	4603      	mov	r3, r0
 800279a:	460c      	mov	r4, r1
 800279c:	4618      	mov	r0, r3
 800279e:	4621      	mov	r1, r4
 80027a0:	f7fe f90c 	bl	80009bc <__aeabi_d2f>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	601a      	str	r2, [r3, #0]
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bdb0      	pop	{r4, r5, r7, pc}
 80027b6:	bf00      	nop
 80027b8:	51eb851e 	.word	0x51eb851e
 80027bc:	3fe51eb8 	.word	0x3fe51eb8
 80027c0:	40012800 	.word	0x40012800
 80027c4:	3f640000 	.word	0x3f640000
 80027c8:	40140000 	.word	0x40140000
 80027cc:	408f4000 	.word	0x408f4000
 80027d0:	40012400 	.word	0x40012400
 80027d4:	20000454 	.word	0x20000454

080027d8 <DMA1_Channel1_IRQHandler>:
void readADC_motorCurrent(float *output_float) {
	*output_float = -(ADC_GetConversionValue(ADC2)*(10.0/4096.0)*(3.30/5.0)-5.0);
}

void DMA1_Channel1_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	if (DMA_GetITStatus(DMA1_IT_TC1))
 80027dc:	2002      	movs	r0, #2
 80027de:	f7fe fdc3 	bl	8001368 <DMA_GetITStatus>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <DMA1_Channel1_IRQHandler+0x16>
	{
		DMA_ClearITPendingBit(DMA1_IT_GL1);
 80027e8:	2001      	movs	r0, #1
 80027ea:	f7fe fde5 	bl	80013b8 <DMA_ClearITPendingBit>

		// Do something
	}
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop

080027f4 <setUpEcompass>:

///////////////////////////////////////////////////////////////////////////
///////////////ACC AND MAGN FUNCTIONS//////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void setUpEcompass()
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	initI2CEcompass();
 80027f8:	f000 f804 	bl	8002804 <initI2CEcompass>
	initRegistersEcompass();
 80027fc:	f000 f840 	bl	8002880 <initRegistersEcompass>
}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}

08002804 <initI2CEcompass>:
void initI2CEcompass(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
	I2C_InitTypeDef  I2C_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable I2C and GPIO clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 800280a:	2101      	movs	r1, #1
 800280c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002810:	f7ff fa3e 	bl	8001c90 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO, ENABLE);
 8002814:	2101      	movs	r1, #1
 8002816:	2009      	movs	r0, #9
 8002818:	f7ff fa1c 	bl	8001c54 <RCC_APB2PeriphClockCmd>

	/* Configure I2C pins: SCL and SDA */
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10 | GPIO_Pin_11;
 800281c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002820:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002822:	2303      	movs	r3, #3
 8002824:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8002826:	231c      	movs	r3, #28
 8002828:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	4619      	mov	r1, r3
 800282e:	4811      	ldr	r0, [pc, #68]	; (8002874 <initI2CEcompass+0x70>)
 8002830:	f7fe fddc 	bl	80013ec <GPIO_Init>

	/* I2C configuration */
	I2C_DeInit(I2C2);
 8002834:	4810      	ldr	r0, [pc, #64]	; (8002878 <initI2CEcompass+0x74>)
 8002836:	f7fe ff3b 	bl	80016b0 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800283a:	2300      	movs	r3, #0
 800283c:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800283e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002842:	81fb      	strh	r3, [r7, #14]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8002844:	2300      	movs	r3, #0
 8002846:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800284c:	827b      	strh	r3, [r7, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800284e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002852:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_ClockSpeed = 400000;	//was 100 000
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <initI2CEcompass+0x78>)
 8002856:	60bb      	str	r3, [r7, #8]

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C2, &I2C_InitStructure);
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	4619      	mov	r1, r3
 800285e:	4806      	ldr	r0, [pc, #24]	; (8002878 <initI2CEcompass+0x74>)
 8002860:	f7fe ff4a 	bl	80016f8 <I2C_Init>

	/* I2C Peripheral Enable */
	I2C_Cmd(I2C2, ENABLE);
 8002864:	2101      	movs	r1, #1
 8002866:	4804      	ldr	r0, [pc, #16]	; (8002878 <initI2CEcompass+0x74>)
 8002868:	f7ff f808 	bl	800187c <I2C_Cmd>
}
 800286c:	bf00      	nop
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40010c00 	.word	0x40010c00
 8002878:	40005800 	.word	0x40005800
 800287c:	00061a80 	.word	0x00061a80

08002880 <initRegistersEcompass>:
void initRegistersEcompass(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
	//ctrl_reg1_A
	//PM2 PM1 PM0 DR1 DR0 Zen Yen Xen
	//PM2-PM0 000(power down) 001(normal mode) other = low power mde
	//Dr1-Dro data rate- 00=50hz 01=100hz 10=400hz 11=1000hz
	//Zen, Yen, Xen 1=enable 0=disable
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 8002884:	bf00      	nop
 8002886:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800288a:	4899      	ldr	r0, [pc, #612]	; (8002af0 <initRegistersEcompass+0x270>)
 800288c:	f7ff f8e2 	bl	8001a54 <I2C_GetFlagStatus>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f7      	bne.n	8002886 <initRegistersEcompass+0x6>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002896:	2101      	movs	r1, #1
 8002898:	4895      	ldr	r0, [pc, #596]	; (8002af0 <initRegistersEcompass+0x270>)
 800289a:	f7ff f80f 	bl	80018bc <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 800289e:	bf00      	nop
 80028a0:	4994      	ldr	r1, [pc, #592]	; (8002af4 <initRegistersEcompass+0x274>)
 80028a2:	4893      	ldr	r0, [pc, #588]	; (8002af0 <initRegistersEcompass+0x270>)
 80028a4:	f7ff f8a6 	bl	80019f4 <I2C_CheckEvent>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f8      	beq.n	80028a0 <initRegistersEcompass+0x20>
	I2C_Send7bitAddress(I2C2,0x32,I2C_Direction_Transmitter);//slave address    33
 80028ae:	2200      	movs	r2, #0
 80028b0:	2132      	movs	r1, #50	; 0x32
 80028b2:	488f      	ldr	r0, [pc, #572]	; (8002af0 <initRegistersEcompass+0x270>)
 80028b4:	f7ff f880 	bl	80019b8 <I2C_Send7bitAddress>
	//I2C_SendData(I2C2,(u8)0x32);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 80028b8:	bf00      	nop
 80028ba:	498f      	ldr	r1, [pc, #572]	; (8002af8 <initRegistersEcompass+0x278>)
 80028bc:	488c      	ldr	r0, [pc, #560]	; (8002af0 <initRegistersEcompass+0x270>)
 80028be:	f7ff f899 	bl	80019f4 <I2C_CheckEvent>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f8      	beq.n	80028ba <initRegistersEcompass+0x3a>
	I2C_SendData(I2C2,(u8)0x20);//write address
 80028c8:	2120      	movs	r1, #32
 80028ca:	4889      	ldr	r0, [pc, #548]	; (8002af0 <initRegistersEcompass+0x270>)
 80028cc:	f7ff f856 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80028d0:	bf00      	nop
 80028d2:	498a      	ldr	r1, [pc, #552]	; (8002afc <initRegistersEcompass+0x27c>)
 80028d4:	4886      	ldr	r0, [pc, #536]	; (8002af0 <initRegistersEcompass+0x270>)
 80028d6:	f7ff f88d 	bl	80019f4 <I2C_CheckEvent>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f8      	beq.n	80028d2 <initRegistersEcompass+0x52>
	I2C_SendData(I2C2,0b00110111);//data-0x27
 80028e0:	2137      	movs	r1, #55	; 0x37
 80028e2:	4883      	ldr	r0, [pc, #524]	; (8002af0 <initRegistersEcompass+0x270>)
 80028e4:	f7ff f84a 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80028e8:	bf00      	nop
 80028ea:	4984      	ldr	r1, [pc, #528]	; (8002afc <initRegistersEcompass+0x27c>)
 80028ec:	4880      	ldr	r0, [pc, #512]	; (8002af0 <initRegistersEcompass+0x270>)
 80028ee:	f7ff f881 	bl	80019f4 <I2C_CheckEvent>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f8      	beq.n	80028ea <initRegistersEcompass+0x6a>
	I2C_GenerateSTOP(I2C2,ENABLE);
 80028f8:	2101      	movs	r1, #1
 80028fa:	487d      	ldr	r0, [pc, #500]	; (8002af0 <initRegistersEcompass+0x270>)
 80028fc:	f7fe fffe 	bl	80018fc <I2C_GenerateSTOP>
	//BDU block data update 1= output registers not updated between MSB and LSB reading
	//BLE (BIG LITTLE endian) 0=data LSB at lower address 1= data MSB at lower address
	//FS1,FS0 00=+-2g 01=+-4g 11=+-8g
	//STsign self test sign 0=self test plus, 1= self test minus (default=0)
	//ST= self test enable 0=disable, 1= enable
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 8002900:	bf00      	nop
 8002902:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002906:	487a      	ldr	r0, [pc, #488]	; (8002af0 <initRegistersEcompass+0x270>)
 8002908:	f7ff f8a4 	bl	8001a54 <I2C_GetFlagStatus>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f7      	bne.n	8002902 <initRegistersEcompass+0x82>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002912:	2101      	movs	r1, #1
 8002914:	4876      	ldr	r0, [pc, #472]	; (8002af0 <initRegistersEcompass+0x270>)
 8002916:	f7fe ffd1 	bl	80018bc <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 800291a:	bf00      	nop
 800291c:	4975      	ldr	r1, [pc, #468]	; (8002af4 <initRegistersEcompass+0x274>)
 800291e:	4874      	ldr	r0, [pc, #464]	; (8002af0 <initRegistersEcompass+0x270>)
 8002920:	f7ff f868 	bl	80019f4 <I2C_CheckEvent>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f8      	beq.n	800291c <initRegistersEcompass+0x9c>
	I2C_Send7bitAddress(I2C2,(u8)0x33,I2C_Direction_Transmitter);//slave address
 800292a:	2200      	movs	r2, #0
 800292c:	2133      	movs	r1, #51	; 0x33
 800292e:	4870      	ldr	r0, [pc, #448]	; (8002af0 <initRegistersEcompass+0x270>)
 8002930:	f7ff f842 	bl	80019b8 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002934:	bf00      	nop
 8002936:	4970      	ldr	r1, [pc, #448]	; (8002af8 <initRegistersEcompass+0x278>)
 8002938:	486d      	ldr	r0, [pc, #436]	; (8002af0 <initRegistersEcompass+0x270>)
 800293a:	f7ff f85b 	bl	80019f4 <I2C_CheckEvent>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f8      	beq.n	8002936 <initRegistersEcompass+0xb6>
	I2C_SendData(I2C2,(u8)0x23);//write address
 8002944:	2123      	movs	r1, #35	; 0x23
 8002946:	486a      	ldr	r0, [pc, #424]	; (8002af0 <initRegistersEcompass+0x270>)
 8002948:	f7ff f818 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800294c:	bf00      	nop
 800294e:	496b      	ldr	r1, [pc, #428]	; (8002afc <initRegistersEcompass+0x27c>)
 8002950:	4867      	ldr	r0, [pc, #412]	; (8002af0 <initRegistersEcompass+0x270>)
 8002952:	f7ff f84f 	bl	80019f4 <I2C_CheckEvent>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f8      	beq.n	800294e <initRegistersEcompass+0xce>
	I2C_SendData(I2C2,(u8)0b10000000);
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	4864      	ldr	r0, [pc, #400]	; (8002af0 <initRegistersEcompass+0x270>)
 8002960:	f7ff f80c 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002964:	bf00      	nop
 8002966:	4965      	ldr	r1, [pc, #404]	; (8002afc <initRegistersEcompass+0x27c>)
 8002968:	4861      	ldr	r0, [pc, #388]	; (8002af0 <initRegistersEcompass+0x270>)
 800296a:	f7ff f843 	bl	80019f4 <I2C_CheckEvent>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f8      	beq.n	8002966 <initRegistersEcompass+0xe6>
	I2C_GenerateSTOP(I2C2,ENABLE);
 8002974:	2101      	movs	r1, #1
 8002976:	485e      	ldr	r0, [pc, #376]	; (8002af0 <initRegistersEcompass+0x270>)
 8002978:	f7fe ffc0 	bl	80018fc <I2C_GenerateSTOP>
	//MS1 to MSo measurement config bits
	//00=normal measurement (default)
	//01=positive bias config
	//10=negative bias config
	//11=not used
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 800297c:	bf00      	nop
 800297e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002982:	485b      	ldr	r0, [pc, #364]	; (8002af0 <initRegistersEcompass+0x270>)
 8002984:	f7ff f866 	bl	8001a54 <I2C_GetFlagStatus>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f7      	bne.n	800297e <initRegistersEcompass+0xfe>
	I2C_GenerateSTART(I2C2,ENABLE);
 800298e:	2101      	movs	r1, #1
 8002990:	4857      	ldr	r0, [pc, #348]	; (8002af0 <initRegistersEcompass+0x270>)
 8002992:	f7fe ff93 	bl	80018bc <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 8002996:	bf00      	nop
 8002998:	4956      	ldr	r1, [pc, #344]	; (8002af4 <initRegistersEcompass+0x274>)
 800299a:	4855      	ldr	r0, [pc, #340]	; (8002af0 <initRegistersEcompass+0x270>)
 800299c:	f7ff f82a 	bl	80019f4 <I2C_CheckEvent>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f8      	beq.n	8002998 <initRegistersEcompass+0x118>
	//I2C_Send7bitAddress(I2C2,(u8)0x3C,I2C_Direction_Transmitter);//slave address
	I2C_SendData(I2C2,(u8)0x3C);
 80029a6:	213c      	movs	r1, #60	; 0x3c
 80029a8:	4851      	ldr	r0, [pc, #324]	; (8002af0 <initRegistersEcompass+0x270>)
 80029aa:	f7fe ffe7 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 80029ae:	bf00      	nop
 80029b0:	4951      	ldr	r1, [pc, #324]	; (8002af8 <initRegistersEcompass+0x278>)
 80029b2:	484f      	ldr	r0, [pc, #316]	; (8002af0 <initRegistersEcompass+0x270>)
 80029b4:	f7ff f81e 	bl	80019f4 <I2C_CheckEvent>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f8      	beq.n	80029b0 <initRegistersEcompass+0x130>
	I2C_SendData(I2C2,(u8)0x00);//write address
 80029be:	2100      	movs	r1, #0
 80029c0:	484b      	ldr	r0, [pc, #300]	; (8002af0 <initRegistersEcompass+0x270>)
 80029c2:	f7fe ffdb 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80029c6:	bf00      	nop
 80029c8:	494c      	ldr	r1, [pc, #304]	; (8002afc <initRegistersEcompass+0x27c>)
 80029ca:	4849      	ldr	r0, [pc, #292]	; (8002af0 <initRegistersEcompass+0x270>)
 80029cc:	f7ff f812 	bl	80019f4 <I2C_CheckEvent>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f8      	beq.n	80029c8 <initRegistersEcompass+0x148>
	I2C_SendData(I2C2,(u8)0b00011000);//data
 80029d6:	2118      	movs	r1, #24
 80029d8:	4845      	ldr	r0, [pc, #276]	; (8002af0 <initRegistersEcompass+0x270>)
 80029da:	f7fe ffcf 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80029de:	bf00      	nop
 80029e0:	4946      	ldr	r1, [pc, #280]	; (8002afc <initRegistersEcompass+0x27c>)
 80029e2:	4843      	ldr	r0, [pc, #268]	; (8002af0 <initRegistersEcompass+0x270>)
 80029e4:	f7ff f806 	bl	80019f4 <I2C_CheckEvent>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f8      	beq.n	80029e0 <initRegistersEcompass+0x160>
	I2C_GenerateSTOP(I2C2,ENABLE);
 80029ee:	2101      	movs	r1, #1
 80029f0:	483f      	ldr	r0, [pc, #252]	; (8002af0 <initRegistersEcompass+0x270>)
 80029f2:	f7fe ff83 	bl	80018fc <I2C_GenerateSTOP>
	//011 =+-2.5
	//100 =+-4
	//101 =+-4.7
	//110 =+-5.6
	//111 =+-8.1
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 80029f6:	bf00      	nop
 80029f8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80029fc:	483c      	ldr	r0, [pc, #240]	; (8002af0 <initRegistersEcompass+0x270>)
 80029fe:	f7ff f829 	bl	8001a54 <I2C_GetFlagStatus>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f7      	bne.n	80029f8 <initRegistersEcompass+0x178>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4839      	ldr	r0, [pc, #228]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a0c:	f7fe ff56 	bl	80018bc <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 8002a10:	bf00      	nop
 8002a12:	4938      	ldr	r1, [pc, #224]	; (8002af4 <initRegistersEcompass+0x274>)
 8002a14:	4836      	ldr	r0, [pc, #216]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a16:	f7fe ffed 	bl	80019f4 <I2C_CheckEvent>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f8      	beq.n	8002a12 <initRegistersEcompass+0x192>
	I2C_Send7bitAddress(I2C2,(u8)0x3C,I2C_Direction_Transmitter);//slave address
 8002a20:	2200      	movs	r2, #0
 8002a22:	213c      	movs	r1, #60	; 0x3c
 8002a24:	4832      	ldr	r0, [pc, #200]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a26:	f7fe ffc7 	bl	80019b8 <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002a2a:	bf00      	nop
 8002a2c:	4932      	ldr	r1, [pc, #200]	; (8002af8 <initRegistersEcompass+0x278>)
 8002a2e:	4830      	ldr	r0, [pc, #192]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a30:	f7fe ffe0 	bl	80019f4 <I2C_CheckEvent>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f8      	beq.n	8002a2c <initRegistersEcompass+0x1ac>
	I2C_SendData(I2C2,(u8)0x01);//write address
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	482c      	ldr	r0, [pc, #176]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a3e:	f7fe ff9d 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002a42:	bf00      	nop
 8002a44:	492d      	ldr	r1, [pc, #180]	; (8002afc <initRegistersEcompass+0x27c>)
 8002a46:	482a      	ldr	r0, [pc, #168]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a48:	f7fe ffd4 	bl	80019f4 <I2C_CheckEvent>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f8      	beq.n	8002a44 <initRegistersEcompass+0x1c4>
	I2C_SendData(I2C2,(u8)0b11100000);//data
 8002a52:	21e0      	movs	r1, #224	; 0xe0
 8002a54:	4826      	ldr	r0, [pc, #152]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a56:	f7fe ff91 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002a5a:	bf00      	nop
 8002a5c:	4927      	ldr	r1, [pc, #156]	; (8002afc <initRegistersEcompass+0x27c>)
 8002a5e:	4824      	ldr	r0, [pc, #144]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a60:	f7fe ffc8 	bl	80019f4 <I2C_CheckEvent>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f8      	beq.n	8002a5c <initRegistersEcompass+0x1dc>
	I2C_GenerateSTOP(I2C2,ENABLE);
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4820      	ldr	r0, [pc, #128]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a6e:	f7fe ff45 	bl	80018fc <I2C_GenerateSTOP>
	//register 0x02->0b00000000-> single conversion mode
	//0 0 0 0 0 0 MD1 MD0
	//00= continuous mode
	//01= single conversion mode
	//11=sleep mode
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 8002a72:	bf00      	nop
 8002a74:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002a78:	481d      	ldr	r0, [pc, #116]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a7a:	f7fe ffeb 	bl	8001a54 <I2C_GetFlagStatus>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f7      	bne.n	8002a74 <initRegistersEcompass+0x1f4>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002a84:	2101      	movs	r1, #1
 8002a86:	481a      	ldr	r0, [pc, #104]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a88:	f7fe ff18 	bl	80018bc <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 8002a8c:	bf00      	nop
 8002a8e:	4919      	ldr	r1, [pc, #100]	; (8002af4 <initRegistersEcompass+0x274>)
 8002a90:	4817      	ldr	r0, [pc, #92]	; (8002af0 <initRegistersEcompass+0x270>)
 8002a92:	f7fe ffaf 	bl	80019f4 <I2C_CheckEvent>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f8      	beq.n	8002a8e <initRegistersEcompass+0x20e>
	//I2C_Send7bitAddress(I2C2,(u8)0x3C,I2C_Direction_Transmitter);//slave address
	I2C_SendData(I2C2,(u8)0x3C);
 8002a9c:	213c      	movs	r1, #60	; 0x3c
 8002a9e:	4814      	ldr	r0, [pc, #80]	; (8002af0 <initRegistersEcompass+0x270>)
 8002aa0:	f7fe ff6c 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002aa4:	bf00      	nop
 8002aa6:	4914      	ldr	r1, [pc, #80]	; (8002af8 <initRegistersEcompass+0x278>)
 8002aa8:	4811      	ldr	r0, [pc, #68]	; (8002af0 <initRegistersEcompass+0x270>)
 8002aaa:	f7fe ffa3 	bl	80019f4 <I2C_CheckEvent>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f8      	beq.n	8002aa6 <initRegistersEcompass+0x226>
	I2C_SendData(I2C2,(u8)0x02);//write address
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	480e      	ldr	r0, [pc, #56]	; (8002af0 <initRegistersEcompass+0x270>)
 8002ab8:	f7fe ff60 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002abc:	bf00      	nop
 8002abe:	490f      	ldr	r1, [pc, #60]	; (8002afc <initRegistersEcompass+0x27c>)
 8002ac0:	480b      	ldr	r0, [pc, #44]	; (8002af0 <initRegistersEcompass+0x270>)
 8002ac2:	f7fe ff97 	bl	80019f4 <I2C_CheckEvent>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f8      	beq.n	8002abe <initRegistersEcompass+0x23e>
	I2C_SendData(I2C2,0x00);//data
 8002acc:	2100      	movs	r1, #0
 8002ace:	4808      	ldr	r0, [pc, #32]	; (8002af0 <initRegistersEcompass+0x270>)
 8002ad0:	f7fe ff54 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002ad4:	bf00      	nop
 8002ad6:	4909      	ldr	r1, [pc, #36]	; (8002afc <initRegistersEcompass+0x27c>)
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <initRegistersEcompass+0x270>)
 8002ada:	f7fe ff8b 	bl	80019f4 <I2C_CheckEvent>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f8      	beq.n	8002ad6 <initRegistersEcompass+0x256>
	I2C_GenerateSTOP(I2C2,ENABLE);
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4802      	ldr	r0, [pc, #8]	; (8002af0 <initRegistersEcompass+0x270>)
 8002ae8:	f7fe ff08 	bl	80018fc <I2C_GenerateSTOP>
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40005800 	.word	0x40005800
 8002af4:	00030001 	.word	0x00030001
 8002af8:	00070082 	.word	0x00070082
 8002afc:	00070084 	.word	0x00070084

08002b00 <eCompassRead>:
void eCompassRead(u8 address,uint32_t numByteToRead,u8* pBuffer)//for the acc
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	73fb      	strb	r3, [r7, #15]
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 8002b0e:	bf00      	nop
 8002b10:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002b14:	4838      	ldr	r0, [pc, #224]	; (8002bf8 <eCompassRead+0xf8>)
 8002b16:	f7fe ff9d 	bl	8001a54 <I2C_GetFlagStatus>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f7      	bne.n	8002b10 <eCompassRead+0x10>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002b20:	2101      	movs	r1, #1
 8002b22:	4835      	ldr	r0, [pc, #212]	; (8002bf8 <eCompassRead+0xf8>)
 8002b24:	f7fe feca 	bl	80018bc <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 8002b28:	bf00      	nop
 8002b2a:	4934      	ldr	r1, [pc, #208]	; (8002bfc <eCompassRead+0xfc>)
 8002b2c:	4832      	ldr	r0, [pc, #200]	; (8002bf8 <eCompassRead+0xf8>)
 8002b2e:	f7fe ff61 	bl	80019f4 <I2C_CheckEvent>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f8      	beq.n	8002b2a <eCompassRead+0x2a>
	I2C_Send7bitAddress(I2C2,(u8)0x32,I2C_Direction_Transmitter);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2132      	movs	r1, #50	; 0x32
 8002b3c:	482e      	ldr	r0, [pc, #184]	; (8002bf8 <eCompassRead+0xf8>)
 8002b3e:	f7fe ff3b 	bl	80019b8 <I2C_Send7bitAddress>
	//I2C_SendData(I2C2,0x32);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002b42:	bf00      	nop
 8002b44:	492e      	ldr	r1, [pc, #184]	; (8002c00 <eCompassRead+0x100>)
 8002b46:	482c      	ldr	r0, [pc, #176]	; (8002bf8 <eCompassRead+0xf8>)
 8002b48:	f7fe ff54 	bl	80019f4 <I2C_CheckEvent>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f8      	beq.n	8002b44 <eCompassRead+0x44>
	I2C_Cmd(I2C2,ENABLE);
 8002b52:	2101      	movs	r1, #1
 8002b54:	4828      	ldr	r0, [pc, #160]	; (8002bf8 <eCompassRead+0xf8>)
 8002b56:	f7fe fe91 	bl	800187c <I2C_Cmd>
	I2C_SendData(I2C2,(u8)address);
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4826      	ldr	r0, [pc, #152]	; (8002bf8 <eCompassRead+0xf8>)
 8002b60:	f7fe ff0c 	bl	800197c <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002b64:	bf00      	nop
 8002b66:	4927      	ldr	r1, [pc, #156]	; (8002c04 <eCompassRead+0x104>)
 8002b68:	4823      	ldr	r0, [pc, #140]	; (8002bf8 <eCompassRead+0xf8>)
 8002b6a:	f7fe ff43 	bl	80019f4 <I2C_CheckEvent>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f8      	beq.n	8002b66 <eCompassRead+0x66>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002b74:	2101      	movs	r1, #1
 8002b76:	4820      	ldr	r0, [pc, #128]	; (8002bf8 <eCompassRead+0xf8>)
 8002b78:	f7fe fea0 	bl	80018bc <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 8002b7c:	bf00      	nop
 8002b7e:	491f      	ldr	r1, [pc, #124]	; (8002bfc <eCompassRead+0xfc>)
 8002b80:	481d      	ldr	r0, [pc, #116]	; (8002bf8 <eCompassRead+0xf8>)
 8002b82:	f7fe ff37 	bl	80019f4 <I2C_CheckEvent>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f8      	beq.n	8002b7e <eCompassRead+0x7e>
	I2C_Send7bitAddress(I2C2,(u8)0x33,I2C_Direction_Receiver);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2133      	movs	r1, #51	; 0x33
 8002b90:	4819      	ldr	r0, [pc, #100]	; (8002bf8 <eCompassRead+0xf8>)
 8002b92:	f7fe ff11 	bl	80019b8 <I2C_Send7bitAddress>
	//I2C_SendData(I2C2,0x33);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8002b96:	bf00      	nop
 8002b98:	491b      	ldr	r1, [pc, #108]	; (8002c08 <eCompassRead+0x108>)
 8002b9a:	4817      	ldr	r0, [pc, #92]	; (8002bf8 <eCompassRead+0xf8>)
 8002b9c:	f7fe ff2a 	bl	80019f4 <I2C_CheckEvent>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f8      	beq.n	8002b98 <eCompassRead+0x98>
	while(numByteToRead)
 8002ba6:	e01b      	b.n	8002be0 <eCompassRead+0xe0>
	{
		if(numByteToRead==1)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <eCompassRead+0xbe>
     	{
			I2C_AcknowledgeConfig(I2C2,DISABLE);
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4811      	ldr	r0, [pc, #68]	; (8002bf8 <eCompassRead+0xf8>)
 8002bb2:	f7fe fec3 	bl	800193c <I2C_AcknowledgeConfig>
			I2C_GenerateSTOP(I2C2,ENABLE);
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	480f      	ldr	r0, [pc, #60]	; (8002bf8 <eCompassRead+0xf8>)
 8002bba:	f7fe fe9f 	bl	80018fc <I2C_GenerateSTOP>
		}
		if(I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_RECEIVED))
 8002bbe:	4913      	ldr	r1, [pc, #76]	; (8002c0c <eCompassRead+0x10c>)
 8002bc0:	480d      	ldr	r0, [pc, #52]	; (8002bf8 <eCompassRead+0xf8>)
 8002bc2:	f7fe ff17 	bl	80019f4 <I2C_CheckEvent>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <eCompassRead+0xe0>

		{
			*pBuffer=I2C_ReceiveData(I2C2);
 8002bcc:	480a      	ldr	r0, [pc, #40]	; (8002bf8 <eCompassRead+0xf8>)
 8002bce:	f7fe fee5 	bl	800199c <I2C_ReceiveData>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	701a      	strb	r2, [r3, #0]
			numByteToRead--;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
	I2C_GenerateSTART(I2C2,ENABLE);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(I2C2,(u8)0x33,I2C_Direction_Receiver);
	//I2C_SendData(I2C2,0x33);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	while(numByteToRead)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e0      	bne.n	8002ba8 <eCompassRead+0xa8>
			*pBuffer=I2C_ReceiveData(I2C2);
			numByteToRead--;
		}

	}
	I2C_AcknowledgeConfig(I2C2,ENABLE);
 8002be6:	2101      	movs	r1, #1
 8002be8:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <eCompassRead+0xf8>)
 8002bea:	f7fe fea7 	bl	800193c <I2C_AcknowledgeConfig>
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40005800 	.word	0x40005800
 8002bfc:	00030001 	.word	0x00030001
 8002c00:	00070082 	.word	0x00070082
 8002c04:	00070084 	.word	0x00070084
 8002c08:	00030002 	.word	0x00030002
 8002c0c:	00030040 	.word	0x00030040

08002c10 <getAcc>:
	I2C_SendData(I2C2,(u8)data);//data
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	I2C_GenerateSTOP(I2C2,ENABLE);
}
void getAcc(u8* buffer,float* out)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
	//u8 buffer[6];
	u8 crtl4;

	eCompassRead(0x23,1,&crtl4);
 8002c1a:	f107 030b 	add.w	r3, r7, #11
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2101      	movs	r1, #1
 8002c22:	2023      	movs	r0, #35	; 0x23
 8002c24:	f7ff ff6c 	bl	8002b00 <eCompassRead>
	eCompassRead(0x28,1,&buffer[0]);
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	2028      	movs	r0, #40	; 0x28
 8002c2e:	f7ff ff67 	bl	8002b00 <eCompassRead>
	eCompassRead(0x29,1,&buffer[1]);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3301      	adds	r3, #1
 8002c36:	461a      	mov	r2, r3
 8002c38:	2101      	movs	r1, #1
 8002c3a:	2029      	movs	r0, #41	; 0x29
 8002c3c:	f7ff ff60 	bl	8002b00 <eCompassRead>
	eCompassRead(0x2A,1,&buffer[2]);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3302      	adds	r3, #2
 8002c44:	461a      	mov	r2, r3
 8002c46:	2101      	movs	r1, #1
 8002c48:	202a      	movs	r0, #42	; 0x2a
 8002c4a:	f7ff ff59 	bl	8002b00 <eCompassRead>
	eCompassRead(0x2B,1,&buffer[3]);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3303      	adds	r3, #3
 8002c52:	461a      	mov	r2, r3
 8002c54:	2101      	movs	r1, #1
 8002c56:	202b      	movs	r0, #43	; 0x2b
 8002c58:	f7ff ff52 	bl	8002b00 <eCompassRead>
	eCompassRead(0x2C,1,&buffer[4]);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	461a      	mov	r2, r3
 8002c62:	2101      	movs	r1, #1
 8002c64:	202c      	movs	r0, #44	; 0x2c
 8002c66:	f7ff ff4b 	bl	8002b00 <eCompassRead>
	eCompassRead(0x2D,1,&buffer[5]);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3305      	adds	r3, #5
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2101      	movs	r1, #1
 8002c72:	202d      	movs	r0, #45	; 0x2d
 8002c74:	f7ff ff44 	bl	8002b00 <eCompassRead>

	int i=0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
	u16 t=0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	827b      	strh	r3, [r7, #18]

	if(!(crtl4 & 0x40))//endian check
 8002c80:	7afb      	ldrb	r3, [r7, #11]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 80e7 	bne.w	8002e5a <getAcc+0x24a>
	{
		switch(crtl4 & 0x30)//adjust the sensitivity
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
 8002c8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d044      	beq.n	8002d20 <getAcc+0x110>
 8002c96:	2b30      	cmp	r3, #48	; 0x30
 8002c98:	f000 808a 	beq.w	8002db0 <getAcc+0x1a0>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d000      	beq.n	8002ca2 <getAcc+0x92>
				out[i]=(float)(5*(te/(16*3.9))*9.81/1000.0);//
			}
			break;
		}
	}
}
 8002ca0:	e0db      	b.n	8002e5a <getAcc+0x24a>
	if(!(crtl4 & 0x40))//endian check
	{
		switch(crtl4 & 0x30)//adjust the sensitivity
		{
		case 0x00:
			for(i=0;i<3;i++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	e037      	b.n	8002d18 <getAcc+0x108>
			{
				s16 te=0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	823b      	strh	r3, [r7, #16]
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	b21a      	sxth	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	440b      	add	r3, r1
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	827b      	strh	r3, [r7, #18]
				te=twosCompToDec(t);
 8002cd0:	8a7b      	ldrh	r3, [r7, #18]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f8d4 	bl	8002e80 <twosCompToDec>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	823b      	strh	r3, [r7, #16]
				//out[i]=(float)(((te/16)*9.81/1000.0));	//go from G to m/s2
				out[i]=(float)(((te)/16/1000.0));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	18d4      	adds	r4, r2, r3
 8002ce4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da00      	bge.n	8002cee <getAcc+0xde>
 8002cec:	330f      	adds	r3, #15
 8002cee:	111b      	asrs	r3, r3, #4
 8002cf0:	b21b      	sxth	r3, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fbea 	bl	80004cc <__aeabi_i2d>
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <getAcc+0x268>)
 8002cfe:	f7fd fd75 	bl	80007ec <__aeabi_ddiv>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f7fd fe57 	bl	80009bc <__aeabi_d2f>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6023      	str	r3, [r4, #0]
	if(!(crtl4 & 0x40))//endian check
	{
		switch(crtl4 & 0x30)//adjust the sensitivity
		{
		case 0x00:
			for(i=0;i<3;i++)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	ddc4      	ble.n	8002ca8 <getAcc+0x98>
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
				te=twosCompToDec(t);
				//out[i]=(float)(((te/16)*9.81/1000.0));	//go from G to m/s2
				out[i]=(float)(((te)/16/1000.0));
			}
			break;
 8002d1e:	e09c      	b.n	8002e5a <getAcc+0x24a>
		case 0x10:
			for(i=0;i<3;i++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	e040      	b.n	8002da8 <getAcc+0x198>
			{
				s16 te=0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	81fb      	strh	r3, [r7, #14]
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	3301      	adds	r3, #1
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	b21a      	sxth	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4619      	mov	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	440b      	add	r3, r1
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	b21b      	sxth	r3, r3
 8002d4c:	827b      	strh	r3, [r7, #18]
				te=twosCompToDec(t);
 8002d4e:	8a7b      	ldrh	r3, [r7, #18]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 f895 	bl	8002e80 <twosCompToDec>
 8002d56:	4603      	mov	r3, r0
 8002d58:	81fb      	strh	r3, [r7, #14]
				out[i]=(float)((te/(16*2))*9.81/1000.0);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	18d4      	adds	r4, r2, r3
 8002d62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	da00      	bge.n	8002d6c <getAcc+0x15c>
 8002d6a:	331f      	adds	r3, #31
 8002d6c:	115b      	asrs	r3, r3, #5
 8002d6e:	b21b      	sxth	r3, r3
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fbab 	bl	80004cc <__aeabi_i2d>
 8002d76:	a33c      	add	r3, pc, #240	; (adr r3, 8002e68 <getAcc+0x258>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f7fd fc0c 	bl	8000598 <__aeabi_dmul>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <getAcc+0x268>)
 8002d8e:	f7fd fd2d 	bl	80007ec <__aeabi_ddiv>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd fe0f 	bl	80009bc <__aeabi_d2f>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6023      	str	r3, [r4, #0]
				//out[i]=(float)(((te/16)*9.81/1000.0));	//go from G to m/s2
				out[i]=(float)(((te)/16/1000.0));
			}
			break;
		case 0x10:
			for(i=0;i<3;i++)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	ddbb      	ble.n	8002d26 <getAcc+0x116>
				s16 te=0;
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
				te=twosCompToDec(t);
				out[i]=(float)((te/(16*2))*9.81/1000.0);
			}
			break;
 8002dae:	e054      	b.n	8002e5a <getAcc+0x24a>
		case 0x30:
			for(i=0;i<3;i++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e04d      	b.n	8002e52 <getAcc+0x242>
			{
				s16 te=0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	81bb      	strh	r3, [r7, #12]
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	b21a      	sxth	r2, r3
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4619      	mov	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	440b      	add	r3, r1
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b21b      	sxth	r3, r3
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	827b      	strh	r3, [r7, #18]
				te=twosCompToDec(t);
 8002dde:	8a7b      	ldrh	r3, [r7, #18]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 f84d 	bl	8002e80 <twosCompToDec>
 8002de6:	4603      	mov	r3, r0
 8002de8:	81bb      	strh	r3, [r7, #12]
				out[i]=(float)(5*(te/(16*3.9))*9.81/1000.0);//
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	18d4      	adds	r4, r2, r3
 8002df2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fb68 	bl	80004cc <__aeabi_i2d>
 8002dfc:	a31c      	add	r3, pc, #112	; (adr r3, 8002e70 <getAcc+0x260>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f7fd fcf3 	bl	80007ec <__aeabi_ddiv>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <getAcc+0x26c>)
 8002e14:	f7fd fbc0 	bl	8000598 <__aeabi_dmul>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	a311      	add	r3, pc, #68	; (adr r3, 8002e68 <getAcc+0x258>)
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	f7fd fbb7 	bl	8000598 <__aeabi_dmul>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <getAcc+0x268>)
 8002e38:	f7fd fcd8 	bl	80007ec <__aeabi_ddiv>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4610      	mov	r0, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	f7fd fdba 	bl	80009bc <__aeabi_d2f>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	6023      	str	r3, [r4, #0]
				te=twosCompToDec(t);
				out[i]=(float)((te/(16*2))*9.81/1000.0);
			}
			break;
		case 0x30:
			for(i=0;i<3;i++)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	ddae      	ble.n	8002db6 <getAcc+0x1a6>
				s16 te=0;
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
				te=twosCompToDec(t);
				out[i]=(float)(5*(te/(16*3.9))*9.81/1000.0);//
			}
			break;
 8002e58:	bf00      	nop
		}
	}
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	f3af 8000 	nop.w
 8002e68:	51eb851f 	.word	0x51eb851f
 8002e6c:	40239eb8 	.word	0x40239eb8
 8002e70:	33333333 	.word	0x33333333
 8002e74:	404f3333 	.word	0x404f3333
 8002e78:	408f4000 	.word	0x408f4000
 8002e7c:	40140000 	.word	0x40140000

08002e80 <twosCompToDec>:
	  out[2]=(float)(te/205);
	  break;
    }
}
s16 twosCompToDec(u16 val)//for 16 bit
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	80fb      	strh	r3, [r7, #6]
	u16 v=val;
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	81bb      	strh	r3, [r7, #12]
	s16 temp=0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	81fb      	strh	r3, [r7, #14]
	if((v & 0b1000000000000000)==0b1000000000000000)
 8002e92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	da02      	bge.n	8002ea0 <twosCompToDec+0x20>
	{
		temp=-32768;
 8002e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e9e:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000001)==0b0000000000000001)
 8002ea0:	89bb      	ldrh	r3, [r7, #12]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <twosCompToDec+0x32>
	{
		temp=temp+1;
 8002eaa:	89fb      	ldrh	r3, [r7, #14]
 8002eac:	3301      	adds	r3, #1
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000010)==0b0000000000000010)
 8002eb2:	89bb      	ldrh	r3, [r7, #12]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <twosCompToDec+0x44>
	{
		temp=temp+2;
 8002ebc:	89fb      	ldrh	r3, [r7, #14]
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000100)==0b0000000000000100)
 8002ec4:	89bb      	ldrh	r3, [r7, #12]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <twosCompToDec+0x56>
	{
		temp=temp+4;
 8002ece:	89fb      	ldrh	r3, [r7, #14]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000001000)==0b0000000000001000)
 8002ed6:	89bb      	ldrh	r3, [r7, #12]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <twosCompToDec+0x68>
	{
		temp=temp+8;
 8002ee0:	89fb      	ldrh	r3, [r7, #14]
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000010000)==0b0000000000010000)
 8002ee8:	89bb      	ldrh	r3, [r7, #12]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <twosCompToDec+0x7a>
	{
		temp=temp+16;
 8002ef2:	89fb      	ldrh	r3, [r7, #14]
 8002ef4:	3310      	adds	r3, #16
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000100000)==0b0000000000100000)
 8002efa:	89bb      	ldrh	r3, [r7, #12]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <twosCompToDec+0x8c>
	{
		temp=temp+32;
 8002f04:	89fb      	ldrh	r3, [r7, #14]
 8002f06:	3320      	adds	r3, #32
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000001000000)==0b0000000001000000)
 8002f0c:	89bb      	ldrh	r3, [r7, #12]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <twosCompToDec+0x9e>
	{
		temp=temp+64;
 8002f16:	89fb      	ldrh	r3, [r7, #14]
 8002f18:	3340      	adds	r3, #64	; 0x40
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000010000000)==0b0000000010000000)
 8002f1e:	89bb      	ldrh	r3, [r7, #12]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <twosCompToDec+0xb0>
	{
		temp=temp+128;
 8002f28:	89fb      	ldrh	r3, [r7, #14]
 8002f2a:	3380      	adds	r3, #128	; 0x80
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000100000000)==0b0000000100000000)
 8002f30:	89bb      	ldrh	r3, [r7, #12]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <twosCompToDec+0xc4>
	{
		temp=temp+256;
 8002f3a:	89fb      	ldrh	r3, [r7, #14]
 8002f3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000001000000000)==0b0000001000000000)
 8002f44:	89bb      	ldrh	r3, [r7, #12]
 8002f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d004      	beq.n	8002f58 <twosCompToDec+0xd8>
	{
		temp=temp+512;
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000010000000000)==0b0000010000000000)
 8002f58:	89bb      	ldrh	r3, [r7, #12]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <twosCompToDec+0xec>
	{
		temp=temp+1024;
 8002f62:	89fb      	ldrh	r3, [r7, #14]
 8002f64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000100000000000)==0b0000100000000000)
 8002f6c:	89bb      	ldrh	r3, [r7, #12]
 8002f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <twosCompToDec+0x100>
	{
		temp=temp+2048;
 8002f76:	89fb      	ldrh	r3, [r7, #14]
 8002f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0001000000000000)==0b0001000000000000)
 8002f80:	89bb      	ldrh	r3, [r7, #12]
 8002f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <twosCompToDec+0x114>
	{
		temp=temp+4096;
 8002f8a:	89fb      	ldrh	r3, [r7, #14]
 8002f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0010000000000000)==0b0010000000000000)
 8002f94:	89bb      	ldrh	r3, [r7, #12]
 8002f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d004      	beq.n	8002fa8 <twosCompToDec+0x128>
	{
		temp=temp+8192;
 8002f9e:	89fb      	ldrh	r3, [r7, #14]
 8002fa0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0100000000000000)==0b0100000000000000)
 8002fa8:	89bb      	ldrh	r3, [r7, #12]
 8002faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <twosCompToDec+0x13c>
	{
		temp=temp+16384;
 8002fb2:	89fb      	ldrh	r3, [r7, #14]
 8002fb4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	81fb      	strh	r3, [r7, #14]
	}

	return (s16)temp;
 8002fbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop

08002fcc <initCRC>:
static uint32_t crcTable[256];
static uint32_t currentCRC;

static void buildTable();

void initCRC() {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0

  buildTable();
 8002fd0:	f000 f83a 	bl	8003048 <buildTable>
  currentCRC = CRCDATA_INITIALVAL;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	; (8002fe0 <initCRC+0x14>)
 8002fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fda:	601a      	str	r2, [r3, #0]

}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000430 	.word	0x20000430

08002fe4 <crcCalc>:

uint32_t crcCalc(const uint8_t* data, uint16_t startIndex, uint16_t length) {
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	803b      	strh	r3, [r7, #0]
  uint16_t index;
  uint32_t lookup;
  uint32_t remainder = CRCDATA_INITIALVAL;
 8002ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ff8:	613b      	str	r3, [r7, #16]

  for (index = startIndex; index < length + startIndex; index++) {
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	82fb      	strh	r3, [r7, #22]
 8002ffe:	e014      	b.n	800302a <crcCalc+0x46>
    lookup = ((uint32_t) data[index] ^ (uint32_t) (remainder >> (CRCDATA_DATAWIDTH - (uint8_t) 8))) & (uint32_t) 0xFF;
 8003000:	8afb      	ldrh	r3, [r7, #22]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	4053      	eors	r3, r2
 8003010:	b2db      	uxtb	r3, r3
 8003012:	60fb      	str	r3, [r7, #12]
    remainder = (uint32_t) (crcTable[lookup] ^ (uint32_t) (remainder << (uint32_t) 8));
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <crcCalc+0x60>)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	4053      	eors	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
uint32_t crcCalc(const uint8_t* data, uint16_t startIndex, uint16_t length) {
  uint16_t index;
  uint32_t lookup;
  uint32_t remainder = CRCDATA_INITIALVAL;

  for (index = startIndex; index < length + startIndex; index++) {
 8003024:	8afb      	ldrh	r3, [r7, #22]
 8003026:	3301      	adds	r3, #1
 8003028:	82fb      	strh	r3, [r7, #22]
 800302a:	8afa      	ldrh	r2, [r7, #22]
 800302c:	8839      	ldrh	r1, [r7, #0]
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	440b      	add	r3, r1
 8003032:	429a      	cmp	r2, r3
 8003034:	dbe4      	blt.n	8003000 <crcCalc+0x1c>
    lookup = ((uint32_t) data[index] ^ (uint32_t) (remainder >> (CRCDATA_DATAWIDTH - (uint8_t) 8))) & (uint32_t) 0xFF;
    remainder = (uint32_t) (crcTable[lookup] ^ (uint32_t) (remainder << (uint32_t) 8));
  }
  /* CRC result */
  return (uint32_t) (remainder ^ CRCDATA_FINAL_VAL) & CRCDATA_MASK;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	b29b      	uxth	r3, r3
}
 800303a:	4618      	mov	r0, r3
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	20000030 	.word	0x20000030

08003048 <buildTable>:
 * This function build the lookup table.
 * @param sCRCdata - CRC data struct
 * @return void.
 * @throws  none
 */
static void buildTable() {
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
  uint32_t topbit;
  uint32_t dividend;
  uint32_t bit;
  uint32_t remainder;

  topbit = (uint32_t) 1U << (CRCDATA_DATAWIDTH - (uint8_t) 1);
 800304e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003052:	603b      	str	r3, [r7, #0]

  //Compute the remainder of each possible dividend.
  for (dividend = 0U; dividend < 256U; dividend++) {
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e026      	b.n	80030a8 <buildTable+0x60>
    //Start with the dividend followed by zeros.
    remainder = (dividend << (CRCDATA_DATAWIDTH - (uint8_t) 8)) & CRCDATA_MASK;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	b29b      	uxth	r3, r3
 8003060:	607b      	str	r3, [r7, #4]

    //Perform modulo-2 division, a bit at a time.
    for (bit = 8U; bit > 0U; bit--) {
 8003062:	2308      	movs	r3, #8
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	e014      	b.n	8003092 <buildTable+0x4a>
      //Try to divide the current data bit.
      if ((remainder & topbit) > 0U) {
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <buildTable+0x3c>
        remainder = ((remainder << 1U) ^ CRCDATA_POLYNOMIAL) & CRCDATA_MASK;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800307a:	f083 0301 	eor.w	r3, r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	e003      	b.n	800308c <buildTable+0x44>
      } else {
        remainder = (remainder << 1U) & CRCDATA_MASK;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	607b      	str	r3, [r7, #4]
  for (dividend = 0U; dividend < 256U; dividend++) {
    //Start with the dividend followed by zeros.
    remainder = (dividend << (CRCDATA_DATAWIDTH - (uint8_t) 8)) & CRCDATA_MASK;

    //Perform modulo-2 division, a bit at a time.
    for (bit = 8U; bit > 0U; bit--) {
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	3b01      	subs	r3, #1
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e7      	bne.n	8003068 <buildTable+0x20>
      } else {
        remainder = (remainder << 1U) & CRCDATA_MASK;
      }
    }
    //Store the result into table.
    crcTable[dividend] = remainder;
 8003098:	4907      	ldr	r1, [pc, #28]	; (80030b8 <buildTable+0x70>)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  uint32_t remainder;

  topbit = (uint32_t) 1U << (CRCDATA_DATAWIDTH - (uint8_t) 1);

  //Compute the remainder of each possible dividend.
  for (dividend = 0U; dividend < 256U; dividend++) {
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3301      	adds	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	d9d5      	bls.n	800305a <buildTable+0x12>
      }
    }
    //Store the result into table.
    crcTable[dividend] = remainder;
  }
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	20000030 	.word	0x20000030

080030bc <setUpLoggerSDcard>:
//if you require to set up more then 1 USART then copy and edit the functions
//as necessary
//make sure to call the setUpUSART() method in the main method.
#include "USART.h"

void setUpLoggerSDcard(void) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
	/* Enable GPIO clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80030c2:	2101      	movs	r1, #1
 80030c4:	2008      	movs	r0, #8
 80030c6:	f7fe fdc5 	bl	8001c54 <RCC_APB2PeriphClockCmd>
	/* Enable USART1 clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80030ca:	2101      	movs	r1, #1
 80030cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030d0:	f7fe fdc0 	bl	8001c54 <RCC_APB2PeriphClockCmd>
	//DMA 1 clock
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 80030d4:	2101      	movs	r1, #1
 80030d6:	2001      	movs	r0, #1
 80030d8:	f7fe fd9e 	bl	8001c18 <RCC_AHBPeriphClockCmd>


	GPIO_InitTypeDef GPIO_InitStruct;
	/* Configure USART Rx & Tx as alternate function */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80030dc:	23c0      	movs	r3, #192	; 0xc0
 80030de:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 80030e0:	2318      	movs	r3, #24
 80030e2:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80030e4:	2303      	movs	r3, #3
 80030e6:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	4619      	mov	r1, r3
 80030ee:	4811      	ldr	r0, [pc, #68]	; (8003134 <setUpLoggerSDcard+0x78>)
 80030f0:	f7fe f97c 	bl	80013ec <GPIO_Init>

	USART_InitTypeDef USART_InitStructure;

	GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);
 80030f4:	2101      	movs	r1, #1
 80030f6:	2004      	movs	r0, #4
 80030f8:	f7fe fa6a 	bl	80015d0 <GPIO_PinRemapConfig>

	USART_InitStructure.USART_BaudRate = 115200; //115200;	//SD card can go faster than Xbee
 80030fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003100:	607b      	str	r3, [r7, #4]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003102:	2300      	movs	r3, #0
 8003104:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003106:	2300      	movs	r3, #0
 8003108:	817b      	strh	r3, [r7, #10]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 800310a:	2300      	movs	r3, #0
 800310c:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 800310e:	230c      	movs	r3, #12
 8003110:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_HardwareFlowControl =
 8003112:	2300      	movs	r3, #0
 8003114:	823b      	strh	r3, [r7, #16]
			USART_HardwareFlowControl_None;

	USART_Init(USART1, &USART_InitStructure);
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	4619      	mov	r1, r3
 800311a:	4807      	ldr	r0, [pc, #28]	; (8003138 <setUpLoggerSDcard+0x7c>)
 800311c:	f7ff f92e 	bl	800237c <USART_Init>
//		{
//				 USART_SendData(USART6, CommsTask_TxBuffer_data[b]);
//				 while(USART_GetFlagStatus(USART6, USART_FLAG_TXE) == RESET);
//		}

	setUpDMA1channel4();
 8003120:	f000 f80c 	bl	800313c <setUpDMA1channel4>
	USART_Cmd(USART1, ENABLE);
 8003124:	2101      	movs	r1, #1
 8003126:	4804      	ldr	r0, [pc, #16]	; (8003138 <setUpLoggerSDcard+0x7c>)
 8003128:	f7ff f9e2 	bl	80024f0 <USART_Cmd>
}
 800312c:	bf00      	nop
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40010c00 	.word	0x40010c00
 8003138:	40013800 	.word	0x40013800

0800313c <setUpDMA1channel4>:

void setUpDMA1channel4() {
 800313c:	b580      	push	{r7, lr}
 800313e:	b08c      	sub	sp, #48	; 0x30
 8003140:	af00      	add	r7, sp, #0
	DMA_InitTypeDef DMA_InitStructure;
	//DMA_DeInit(DMA1_Channel7);
	DMA_StructInit(&DMA_InitStructure);
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe f8bb 	bl	80012c0 <DMA_StructInit>
	//DMA_InitStructure.DMA_Channel = DMA_Channel_4;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) (USART1_BASE + 0x04); //USART Data Register
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <setUpDMA1channel4+0x60>)
 800314c:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) TxBuff;
 800314e:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <setUpDMA1channel4+0x64>)
 8003150:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; //DMA_DIR_PeripheralSRC;//;//
 8003152:	2310      	movs	r3, #16
 8003154:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_BufferSize = TX_BUFFER_SIZE;
 8003156:	2334      	movs	r3, #52	; 0x34
 8003158:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003166:	2300      	movs	r3, #0
 8003168:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800316e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel4, &DMA_InitStructure);
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	4619      	mov	r1, r3
 800317c:	4809      	ldr	r0, [pc, #36]	; (80031a4 <setUpDMA1channel4+0x68>)
 800317e:	f7fe f861 	bl	8001244 <DMA_Init>

	USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
 8003182:	2201      	movs	r2, #1
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	4808      	ldr	r0, [pc, #32]	; (80031a8 <setUpDMA1channel4+0x6c>)
 8003188:	f7ff f9d2 	bl	8002530 <USART_DMACmd>
	DMA_Cmd(DMA1_Channel4, ENABLE);
 800318c:	2101      	movs	r1, #1
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <setUpDMA1channel4+0x68>)
 8003190:	f7fe f8c0 	bl	8001314 <DMA_Cmd>
}
 8003194:	bf00      	nop
 8003196:	3730      	adds	r7, #48	; 0x30
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40013804 	.word	0x40013804
 80031a0:	20000564 	.word	0x20000564
 80031a4:	40020044 	.word	0x40020044
 80031a8:	40013800 	.word	0x40013800

080031ac <readEncoder>:
 *
 */

#include "control.h"

void readEncoder(float *shaft_revs, float *shaft_speed) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]

	static volatile int16_t oldShaftEncoder;
	static volatile int16_t shaftEncoder;
	static float position = 0;

	oldShaftEncoder = shaftEncoder;
 80031b6:	4b17      	ldr	r3, [pc, #92]	; (8003214 <readEncoder+0x68>)
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b21a      	sxth	r2, r3
 80031bc:	4b16      	ldr	r3, [pc, #88]	; (8003218 <readEncoder+0x6c>)
 80031be:	801a      	strh	r2, [r3, #0]
	shaftEncoder = TIM_GetCounter(TIM3);
 80031c0:	4816      	ldr	r0, [pc, #88]	; (800321c <readEncoder+0x70>)
 80031c2:	f7ff f895 	bl	80022f0 <TIM_GetCounter>
 80031c6:	4603      	mov	r3, r0
 80031c8:	b21a      	sxth	r2, r3
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <readEncoder+0x68>)
 80031cc:	801a      	strh	r2, [r3, #0]
	*shaft_speed = shaftEncoder - oldShaftEncoder;
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <readEncoder+0x68>)
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b21b      	sxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <readEncoder+0x6c>)
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b21b      	sxth	r3, r3
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd fcf6 	bl	8000bd0 <__aeabi_i2f>
 80031e4:	4602      	mov	r2, r0
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	601a      	str	r2, [r3, #0]
	position += *shaft_speed;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <readEncoder+0x74>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f7fd fc37 	bl	8000a68 <__addsf3>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <readEncoder+0x74>)
 8003200:	601a      	str	r2, [r3, #0]
	*shaft_revs = position;
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <readEncoder+0x74>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	601a      	str	r2, [r3, #0]
	//		shaftEncoder = -(65536 - shaftEncoder);
	//	}
	//	*shaft_revs = (position) ;//(1/(3*2));	//3 teeth on encoder wheel
	//*shaft_speed = *shaft_speed / 0.01;

}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000434 	.word	0x20000434
 8003218:	20000436 	.word	0x20000436
 800321c:	40000400 	.word	0x40000400
 8003220:	20000438 	.word	0x20000438
 8003224:	00000000 	.word	0x00000000

08003228 <calibrateMEMS>:

void calibrateMEMS(float* acc, float* accCalib, float* gyro, float* gyroCalib, u8* temperature){
 8003228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
	accCalib[0] = 0.9922*acc[0] - 0.0247*acc[1] + 0.0225*acc[2] + 0.0468;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f958 	bl	80004f0 <__aeabi_f2d>
 8003240:	a3ab      	add	r3, pc, #684	; (adr r3, 80034f0 <calibrateMEMS+0x2c8>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f7fd f9a7 	bl	8000598 <__aeabi_dmul>
 800324a:	4603      	mov	r3, r0
 800324c:	460c      	mov	r4, r1
 800324e:	4625      	mov	r5, r4
 8003250:	461c      	mov	r4, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3304      	adds	r3, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f949 	bl	80004f0 <__aeabi_f2d>
 800325e:	a3a6      	add	r3, pc, #664	; (adr r3, 80034f8 <calibrateMEMS+0x2d0>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f7fd f998 	bl	8000598 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4620      	mov	r0, r4
 800326e:	4629      	mov	r1, r5
 8003270:	f7fc ffde 	bl	8000230 <__aeabi_dsub>
 8003274:	4603      	mov	r3, r0
 8003276:	460c      	mov	r4, r1
 8003278:	4625      	mov	r5, r4
 800327a:	461c      	mov	r4, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3308      	adds	r3, #8
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd f934 	bl	80004f0 <__aeabi_f2d>
 8003288:	a39d      	add	r3, pc, #628	; (adr r3, 8003500 <calibrateMEMS+0x2d8>)
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f7fd f983 	bl	8000598 <__aeabi_dmul>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4620      	mov	r0, r4
 8003298:	4629      	mov	r1, r5
 800329a:	f7fc ffcb 	bl	8000234 <__adddf3>
 800329e:	4603      	mov	r3, r0
 80032a0:	460c      	mov	r4, r1
 80032a2:	4618      	mov	r0, r3
 80032a4:	4621      	mov	r1, r4
 80032a6:	a398      	add	r3, pc, #608	; (adr r3, 8003508 <calibrateMEMS+0x2e0>)
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f7fc ffc2 	bl	8000234 <__adddf3>
 80032b0:	4603      	mov	r3, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	4618      	mov	r0, r3
 80032b6:	4621      	mov	r1, r4
 80032b8:	f7fd fb80 	bl	80009bc <__aeabi_d2f>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	601a      	str	r2, [r3, #0]
	accCalib[1] = 0.0453*acc[0] + 0.9574*acc[1] + 0.0072*acc[2] + 0.022;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	1d1c      	adds	r4, r3, #4
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd f910 	bl	80004f0 <__aeabi_f2d>
 80032d0:	a38f      	add	r3, pc, #572	; (adr r3, 8003510 <calibrateMEMS+0x2e8>)
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f7fd f95f 	bl	8000598 <__aeabi_dmul>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4615      	mov	r5, r2
 80032e0:	461e      	mov	r6, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3304      	adds	r3, #4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f901 	bl	80004f0 <__aeabi_f2d>
 80032ee:	a38a      	add	r3, pc, #552	; (adr r3, 8003518 <calibrateMEMS+0x2f0>)
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f7fd f950 	bl	8000598 <__aeabi_dmul>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4628      	mov	r0, r5
 80032fe:	4631      	mov	r1, r6
 8003300:	f7fc ff98 	bl	8000234 <__adddf3>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4615      	mov	r5, r2
 800330a:	461e      	mov	r6, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3308      	adds	r3, #8
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd f8ec 	bl	80004f0 <__aeabi_f2d>
 8003318:	a381      	add	r3, pc, #516	; (adr r3, 8003520 <calibrateMEMS+0x2f8>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f7fd f93b 	bl	8000598 <__aeabi_dmul>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4628      	mov	r0, r5
 8003328:	4631      	mov	r1, r6
 800332a:	f7fc ff83 	bl	8000234 <__adddf3>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	a37c      	add	r3, pc, #496	; (adr r3, 8003528 <calibrateMEMS+0x300>)
 8003338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333c:	f7fc ff7a 	bl	8000234 <__adddf3>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	f7fd fb38 	bl	80009bc <__aeabi_d2f>
 800334c:	4603      	mov	r3, r0
 800334e:	6023      	str	r3, [r4, #0]
	accCalib[2] = -0.0141*acc[0] -0.0037*acc[1] + 0.9971*acc[2] + 0.0053;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f103 0408 	add.w	r4, r3, #8
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd f8c8 	bl	80004f0 <__aeabi_f2d>
 8003360:	a373      	add	r3, pc, #460	; (adr r3, 8003530 <calibrateMEMS+0x308>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	f7fd f917 	bl	8000598 <__aeabi_dmul>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4615      	mov	r5, r2
 8003370:	461e      	mov	r6, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3304      	adds	r3, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f8b9 	bl	80004f0 <__aeabi_f2d>
 800337e:	a36e      	add	r3, pc, #440	; (adr r3, 8003538 <calibrateMEMS+0x310>)
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f7fd f908 	bl	8000598 <__aeabi_dmul>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4628      	mov	r0, r5
 800338e:	4631      	mov	r1, r6
 8003390:	f7fc ff4e 	bl	8000230 <__aeabi_dsub>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4615      	mov	r5, r2
 800339a:	461e      	mov	r6, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3308      	adds	r3, #8
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd f8a4 	bl	80004f0 <__aeabi_f2d>
 80033a8:	a365      	add	r3, pc, #404	; (adr r3, 8003540 <calibrateMEMS+0x318>)
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f7fd f8f3 	bl	8000598 <__aeabi_dmul>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4628      	mov	r0, r5
 80033b8:	4631      	mov	r1, r6
 80033ba:	f7fc ff3b 	bl	8000234 <__adddf3>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4610      	mov	r0, r2
 80033c4:	4619      	mov	r1, r3
 80033c6:	a360      	add	r3, pc, #384	; (adr r3, 8003548 <calibrateMEMS+0x320>)
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f7fc ff32 	bl	8000234 <__adddf3>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f7fd faf0 	bl	80009bc <__aeabi_d2f>
 80033dc:	4603      	mov	r3, r0
 80033de:	6023      	str	r3, [r4, #0]

	gyroCalib[0] = gyro[0] + (0.060394*temperature[1] - 3.0843);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd f883 	bl	80004f0 <__aeabi_f2d>
 80033ea:	4604      	mov	r4, r0
 80033ec:	460d      	mov	r5, r1
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	3301      	adds	r3, #1
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd f869 	bl	80004cc <__aeabi_i2d>
 80033fa:	a355      	add	r3, pc, #340	; (adr r3, 8003550 <calibrateMEMS+0x328>)
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f7fd f8ca 	bl	8000598 <__aeabi_dmul>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	a352      	add	r3, pc, #328	; (adr r3, 8003558 <calibrateMEMS+0x330>)
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f7fc ff0d 	bl	8000230 <__aeabi_dsub>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4620      	mov	r0, r4
 800341c:	4629      	mov	r1, r5
 800341e:	f7fc ff09 	bl	8000234 <__adddf3>
 8003422:	4603      	mov	r3, r0
 8003424:	460c      	mov	r4, r1
 8003426:	4618      	mov	r0, r3
 8003428:	4621      	mov	r1, r4
 800342a:	f7fd fac7 	bl	80009bc <__aeabi_d2f>
 800342e:	4602      	mov	r2, r0
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	601a      	str	r2, [r3, #0]
	gyroCalib[1] = gyro[1] + (0.025522*temperature[1] - 0.40084);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	1d1c      	adds	r4, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd f856 	bl	80004f0 <__aeabi_f2d>
 8003444:	4605      	mov	r5, r0
 8003446:	460e      	mov	r6, r1
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	3301      	adds	r3, #1
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd f83c 	bl	80004cc <__aeabi_i2d>
 8003454:	a342      	add	r3, pc, #264	; (adr r3, 8003560 <calibrateMEMS+0x338>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd f89d 	bl	8000598 <__aeabi_dmul>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	a340      	add	r3, pc, #256	; (adr r3, 8003568 <calibrateMEMS+0x340>)
 8003468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346c:	f7fc fee0 	bl	8000230 <__aeabi_dsub>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4628      	mov	r0, r5
 8003476:	4631      	mov	r1, r6
 8003478:	f7fc fedc 	bl	8000234 <__adddf3>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	f7fd fa9a 	bl	80009bc <__aeabi_d2f>
 8003488:	4603      	mov	r3, r0
 800348a:	6023      	str	r3, [r4, #0]
	gyroCalib[2] = gyro[2] + (-0.32248*temperature[1] + 11.3496);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	f103 0408 	add.w	r4, r3, #8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3308      	adds	r3, #8
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd f829 	bl	80004f0 <__aeabi_f2d>
 800349e:	4605      	mov	r5, r0
 80034a0:	460e      	mov	r6, r1
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	3301      	adds	r3, #1
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd f80f 	bl	80004cc <__aeabi_i2d>
 80034ae:	a330      	add	r3, pc, #192	; (adr r3, 8003570 <calibrateMEMS+0x348>)
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f7fd f870 	bl	8000598 <__aeabi_dmul>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	a32d      	add	r3, pc, #180	; (adr r3, 8003578 <calibrateMEMS+0x350>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fc feb5 	bl	8000234 <__adddf3>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4628      	mov	r0, r5
 80034d0:	4631      	mov	r1, r6
 80034d2:	f7fc feaf 	bl	8000234 <__adddf3>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	f7fd fa6d 	bl	80009bc <__aeabi_d2f>
 80034e2:	4603      	mov	r3, r0
 80034e4:	6023      	str	r3, [r4, #0]
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ee:	bf00      	nop
 80034f0:	36e2eb1c 	.word	0x36e2eb1c
 80034f4:	3fefc01a 	.word	0x3fefc01a
 80034f8:	f0d844d0 	.word	0xf0d844d0
 80034fc:	3f994af4 	.word	0x3f994af4
 8003500:	70a3d70a 	.word	0x70a3d70a
 8003504:	3f970a3d 	.word	0x3f970a3d
 8003508:	6ae7d567 	.word	0x6ae7d567
 800350c:	3fa7f62b 	.word	0x3fa7f62b
 8003510:	c504816f 	.word	0xc504816f
 8003514:	3fa7318f 	.word	0x3fa7318f
 8003518:	532617c2 	.word	0x532617c2
 800351c:	3feea305 	.word	0x3feea305
 8003520:	487fcb92 	.word	0x487fcb92
 8003524:	3f7d7dbf 	.word	0x3f7d7dbf
 8003528:	020c49ba 	.word	0x020c49ba
 800352c:	3f96872b 	.word	0x3f96872b
 8003530:	f6fd21ff 	.word	0xf6fd21ff
 8003534:	bf8ce075 	.word	0xbf8ce075
 8003538:	5fd8adac 	.word	0x5fd8adac
 800353c:	3f6e4f76 	.word	0x3f6e4f76
 8003540:	425aee63 	.word	0x425aee63
 8003544:	3fefe83e 	.word	0x3fefe83e
 8003548:	eab367a1 	.word	0xeab367a1
 800354c:	3f75b573 	.word	0x3f75b573
 8003550:	5dbfceb8 	.word	0x5dbfceb8
 8003554:	3faeebf6 	.word	0x3faeebf6
 8003558:	7a786c22 	.word	0x7a786c22
 800355c:	4008aca5 	.word	0x4008aca5
 8003560:	6d506573 	.word	0x6d506573
 8003564:	3f9a2270 	.word	0x3f9a2270
 8003568:	d0bb6ed6 	.word	0xd0bb6ed6
 800356c:	3fd9a75c 	.word	0x3fd9a75c
 8003570:	27674d16 	.word	0x27674d16
 8003574:	bfd4a383 	.word	0xbfd4a383
 8003578:	c56d5cfb 	.word	0xc56d5cfb
 800357c:	4026b2fe 	.word	0x4026b2fe

08003580 <controlMethod>:

void controlMethod(float*accCalib, float*gyroCalib, uint8_t*temp, float*angles, float*velocities,
		float*positions,float*PWMval,float*shaft_revs,uint8_t*activateControl) //perform all control in this method
{
 8003580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
	//3 floats sent in angles (12 bytes total)
	angles[0] = angles[0] + gyroCalib[0]*0.01;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fc ffac 	bl	80004f0 <__aeabi_f2d>
 8003598:	4604      	mov	r4, r0
 800359a:	460d      	mov	r5, r1
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffa5 	bl	80004f0 <__aeabi_f2d>
 80035a6:	a3b8      	add	r3, pc, #736	; (adr r3, 8003888 <controlMethod+0x308>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f7fc fff4 	bl	8000598 <__aeabi_dmul>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4620      	mov	r0, r4
 80035b6:	4629      	mov	r1, r5
 80035b8:	f7fc fe3c 	bl	8000234 <__adddf3>
 80035bc:	4603      	mov	r3, r0
 80035be:	460c      	mov	r4, r1
 80035c0:	4618      	mov	r0, r3
 80035c2:	4621      	mov	r1, r4
 80035c4:	f7fd f9fa 	bl	80009bc <__aeabi_d2f>
 80035c8:	4602      	mov	r2, r0
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	601a      	str	r2, [r3, #0]
	angles[1] = angles[1] + gyroCalib[1]*0.01;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	1d1c      	adds	r4, r3, #4
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	3304      	adds	r3, #4
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc ff89 	bl	80004f0 <__aeabi_f2d>
 80035de:	4605      	mov	r5, r0
 80035e0:	460e      	mov	r6, r1
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	3304      	adds	r3, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ff81 	bl	80004f0 <__aeabi_f2d>
 80035ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8003888 <controlMethod+0x308>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fc ffd0 	bl	8000598 <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4628      	mov	r0, r5
 80035fe:	4631      	mov	r1, r6
 8003600:	f7fc fe18 	bl	8000234 <__adddf3>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f7fd f9d6 	bl	80009bc <__aeabi_d2f>
 8003610:	4603      	mov	r3, r0
 8003612:	6023      	str	r3, [r4, #0]
	angles[2] = angles[2] + gyroCalib[2]*0.01;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	f103 0408 	add.w	r4, r3, #8
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	3308      	adds	r3, #8
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc ff65 	bl	80004f0 <__aeabi_f2d>
 8003626:	4605      	mov	r5, r0
 8003628:	460e      	mov	r6, r1
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3308      	adds	r3, #8
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ff5d 	bl	80004f0 <__aeabi_f2d>
 8003636:	a394      	add	r3, pc, #592	; (adr r3, 8003888 <controlMethod+0x308>)
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f7fc ffac 	bl	8000598 <__aeabi_dmul>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4628      	mov	r0, r5
 8003646:	4631      	mov	r1, r6
 8003648:	f7fc fdf4 	bl	8000234 <__adddf3>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	f7fd f9b2 	bl	80009bc <__aeabi_d2f>
 8003658:	4603      	mov	r3, r0
 800365a:	6023      	str	r3, [r4, #0]

	//Velocities from acc data
	velocities[0] = velocities[0] + 9.81*accCalib[0]*0.01;
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fc ff45 	bl	80004f0 <__aeabi_f2d>
 8003666:	4604      	mov	r4, r0
 8003668:	460d      	mov	r5, r1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc ff3e 	bl	80004f0 <__aeabi_f2d>
 8003674:	a386      	add	r3, pc, #536	; (adr r3, 8003890 <controlMethod+0x310>)
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f7fc ff8d 	bl	8000598 <__aeabi_dmul>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4610      	mov	r0, r2
 8003684:	4619      	mov	r1, r3
 8003686:	a380      	add	r3, pc, #512	; (adr r3, 8003888 <controlMethod+0x308>)
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f7fc ff84 	bl	8000598 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4620      	mov	r0, r4
 8003696:	4629      	mov	r1, r5
 8003698:	f7fc fdcc 	bl	8000234 <__adddf3>
 800369c:	4603      	mov	r3, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	4618      	mov	r0, r3
 80036a2:	4621      	mov	r1, r4
 80036a4:	f7fd f98a 	bl	80009bc <__aeabi_d2f>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	601a      	str	r2, [r3, #0]
	velocities[1] = velocities[1] + 9.81*accCalib[1]*0.01;
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	1d1c      	adds	r4, r3, #4
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	3304      	adds	r3, #4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fc ff19 	bl	80004f0 <__aeabi_f2d>
 80036be:	4605      	mov	r5, r0
 80036c0:	460e      	mov	r6, r1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3304      	adds	r3, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fc ff11 	bl	80004f0 <__aeabi_f2d>
 80036ce:	a370      	add	r3, pc, #448	; (adr r3, 8003890 <controlMethod+0x310>)
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f7fc ff60 	bl	8000598 <__aeabi_dmul>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	a369      	add	r3, pc, #420	; (adr r3, 8003888 <controlMethod+0x308>)
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	f7fc ff57 	bl	8000598 <__aeabi_dmul>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4628      	mov	r0, r5
 80036f0:	4631      	mov	r1, r6
 80036f2:	f7fc fd9f 	bl	8000234 <__adddf3>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	f7fd f95d 	bl	80009bc <__aeabi_d2f>
 8003702:	4603      	mov	r3, r0
 8003704:	6023      	str	r3, [r4, #0]
	velocities[2] = velocities[2] + 9.81*accCalib[2]*0.01;
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	f103 0408 	add.w	r4, r3, #8
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	3308      	adds	r3, #8
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fc feec 	bl	80004f0 <__aeabi_f2d>
 8003718:	4605      	mov	r5, r0
 800371a:	460e      	mov	r6, r1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3308      	adds	r3, #8
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fc fee4 	bl	80004f0 <__aeabi_f2d>
 8003728:	a359      	add	r3, pc, #356	; (adr r3, 8003890 <controlMethod+0x310>)
 800372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372e:	f7fc ff33 	bl	8000598 <__aeabi_dmul>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	a353      	add	r3, pc, #332	; (adr r3, 8003888 <controlMethod+0x308>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f7fc ff2a 	bl	8000598 <__aeabi_dmul>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4628      	mov	r0, r5
 800374a:	4631      	mov	r1, r6
 800374c:	f7fc fd72 	bl	8000234 <__adddf3>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	f7fd f930 	bl	80009bc <__aeabi_d2f>
 800375c:	4603      	mov	r3, r0
 800375e:	6023      	str	r3, [r4, #0]

	//Positions from velocity from acc data
	positions[0] = positions[0] + velocities[0]*0.01;
 8003760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fc fec3 	bl	80004f0 <__aeabi_f2d>
 800376a:	4604      	mov	r4, r0
 800376c:	460d      	mov	r5, r1
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fc febc 	bl	80004f0 <__aeabi_f2d>
 8003778:	a343      	add	r3, pc, #268	; (adr r3, 8003888 <controlMethod+0x308>)
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	f7fc ff0b 	bl	8000598 <__aeabi_dmul>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4620      	mov	r0, r4
 8003788:	4629      	mov	r1, r5
 800378a:	f7fc fd53 	bl	8000234 <__adddf3>
 800378e:	4603      	mov	r3, r0
 8003790:	460c      	mov	r4, r1
 8003792:	4618      	mov	r0, r3
 8003794:	4621      	mov	r1, r4
 8003796:	f7fd f911 	bl	80009bc <__aeabi_d2f>
 800379a:	4602      	mov	r2, r0
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	601a      	str	r2, [r3, #0]
	positions[1] = positions[1] + velocities[1]*0.01;
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	1d1c      	adds	r4, r3, #4
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	3304      	adds	r3, #4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc fea0 	bl	80004f0 <__aeabi_f2d>
 80037b0:	4605      	mov	r5, r0
 80037b2:	460e      	mov	r6, r1
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	3304      	adds	r3, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fc fe98 	bl	80004f0 <__aeabi_f2d>
 80037c0:	a331      	add	r3, pc, #196	; (adr r3, 8003888 <controlMethod+0x308>)
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f7fc fee7 	bl	8000598 <__aeabi_dmul>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4628      	mov	r0, r5
 80037d0:	4631      	mov	r1, r6
 80037d2:	f7fc fd2f 	bl	8000234 <__adddf3>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	f7fd f8ed 	bl	80009bc <__aeabi_d2f>
 80037e2:	4603      	mov	r3, r0
 80037e4:	6023      	str	r3, [r4, #0]
	positions[2] = positions[2] + velocities[2]*0.01;
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	f103 0408 	add.w	r4, r3, #8
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	3308      	adds	r3, #8
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc fe7c 	bl	80004f0 <__aeabi_f2d>
 80037f8:	4605      	mov	r5, r0
 80037fa:	460e      	mov	r6, r1
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	3308      	adds	r3, #8
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fe74 	bl	80004f0 <__aeabi_f2d>
 8003808:	a31f      	add	r3, pc, #124	; (adr r3, 8003888 <controlMethod+0x308>)
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f7fc fec3 	bl	8000598 <__aeabi_dmul>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4628      	mov	r0, r5
 8003818:	4631      	mov	r1, r6
 800381a:	f7fc fd0b 	bl	8000234 <__adddf3>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	f7fd f8c9 	bl	80009bc <__aeabi_d2f>
 800382a:	4603      	mov	r3, r0
 800382c:	6023      	str	r3, [r4, #0]

	}*/
	//turn off motor PWM control after 0.5 s

	//to wind up dragline manually after jumping
	if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_9) != 0) {
 800382e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003832:	481b      	ldr	r0, [pc, #108]	; (80038a0 <controlMethod+0x320>)
 8003834:	f7fd fe96 	bl	8001564 <GPIO_ReadInputDataBit>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d016      	beq.n	800386c <controlMethod+0x2ec>
		//*activateControl = 1;
		*PWMval = *PWMval+0.2;	//was 20
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fc fe54 	bl	80004f0 <__aeabi_f2d>
 8003848:	a313      	add	r3, pc, #76	; (adr r3, 8003898 <controlMethod+0x318>)
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f7fc fcf1 	bl	8000234 <__adddf3>
 8003852:	4603      	mov	r3, r0
 8003854:	460c      	mov	r4, r1
 8003856:	4618      	mov	r0, r3
 8003858:	4621      	mov	r1, r4
 800385a:	f7fd f8af 	bl	80009bc <__aeabi_d2f>
 800385e:	4602      	mov	r2, r0
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003862:	601a      	str	r2, [r3, #0]
		setPWM(PWMval);
 8003864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003866:	f000 fda3 	bl	80043b0 <setPWM>
			*activateControl = 1;
		}*/

	}

}
 800386a:	e006      	b.n	800387a <controlMethod+0x2fa>
	if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_9) != 0) {
		//*activateControl = 1;
		*PWMval = *PWMval+0.2;	//was 20
		setPWM(PWMval);
	} else {
		*PWMval = 0;
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
		setPWM(PWMval);
 8003874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003876:	f000 fd9b 	bl	80043b0 <setPWM>
			*activateControl = 1;
		}*/

	}

}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003882:	bf00      	nop
 8003884:	f3af 8000 	nop.w
 8003888:	47ae147b 	.word	0x47ae147b
 800388c:	3f847ae1 	.word	0x3f847ae1
 8003890:	51eb851f 	.word	0x51eb851f
 8003894:	40239eb8 	.word	0x40239eb8
 8003898:	9999999a 	.word	0x9999999a
 800389c:	3fc99999 	.word	0x3fc99999
 80038a0:	40010800 	.word	0x40010800

080038a4 <setUpLoopTimer>:

int proceed10ms = 0;
///////////////////////////////////////////////////////////////////////////
////////////////main loop timer ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void setUpLoopTimer(void) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80038aa:	2101      	movs	r1, #1
 80038ac:	2001      	movs	r0, #1
 80038ae:	f7fe f9ef 	bl	8001c90 <RCC_APB1PeriphClockCmd>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 global Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; //set up the interrupt handler for TIM2
 80038b2:	231c      	movs	r3, #28
 80038b4:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&NVIC_InitStructure);
 80038c2:	f107 030c 	add.w	r3, r7, #12
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd fa6c 	bl	8000da4 <NVIC_Init>

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;

	TIM_TimeBaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 80038cc:	2300      	movs	r3, #0
 80038ce:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 80038d0:	2300      	movs	r3, #0
 80038d2:	807b      	strh	r3, [r7, #2]
	//TIM_TimeBaseStruct.TIM_Period = (7200 / 4 - 1); //makes it 100Hz - confirmed on scope.
	TIM_TimeBaseStruct.TIM_Period = (3600 / 4 - 1); //experimenting, 200Hz
 80038d4:	f240 3383 	movw	r3, #899	; 0x383
 80038d8:	80bb      	strh	r3, [r7, #4]
	//TIM_TimeBaseStruct.TIM_Period = (2888 / 4 - 1); //experimenting, 250Hz
	//TIM_TimeBaseStruct.TIM_Period = (1440 / 4 - 1); //experimenting, 500Hz
	TIM_TimeBaseStruct.TIM_Prescaler = 400 - 1;
 80038da:	f240 138f 	movw	r3, #399	; 0x18f
 80038de:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseStruct.TIM_RepetitionCounter = 0x0000;
 80038e0:	2300      	movs	r3, #0
 80038e2:	723b      	strb	r3, [r7, #8]

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStruct);
 80038e4:	463b      	mov	r3, r7
 80038e6:	4619      	mov	r1, r3
 80038e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038ec:	f7fe fafe 	bl	8001eec <TIM_TimeBaseInit>

	TIM_Cmd(TIM2, ENABLE);
 80038f0:	2101      	movs	r1, #1
 80038f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038f6:	f7fe fbfb 	bl	80020f0 <TIM_Cmd>

	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80038fa:	2201      	movs	r2, #1
 80038fc:	2101      	movs	r1, #1
 80038fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003902:	f7fe fc3b 	bl	800217c <TIM_ITConfig>

}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop

08003910 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 8003914:	2101      	movs	r1, #1
 8003916:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800391a:	f7fe fcf5 	bl	8002308 <TIM_GetITStatus>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <TIM2_IRQHandler+0x24>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8003924:	2101      	movs	r1, #1
 8003926:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800392a:	f7fe fd17 	bl	800235c <TIM_ClearITPendingBit>

		proceed10ms = 1;
 800392e:	4b02      	ldr	r3, [pc, #8]	; (8003938 <TIM2_IRQHandler+0x28>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
	}
}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000043c 	.word	0x2000043c

0800393c <setUpEncoder>:

void setUpEncoder(void) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
//http://www.micromouseonline.com/2013/02/16/quadrature-encoders-with-the-stm32f4/
//https://my.st.com/public/STe2ecommunities/mcu/Lists/cortex_mx_stm32/Flat.aspx?RootFolder=https%3a%2f%2fmy%2est%2ecom%2fpublic%2fSTe2ecommunities%2fmcu%2fLists%2fcortex_mx_stm32%2fSTM32F107%20Quadrature%20encoder%20example&FolderCTID=0x01200200770978C69A1141439FE559EB459D7580009C4E14902C3CDE46A77F0FFD06506F5B&currentviews=5599
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8003942:	2101      	movs	r1, #1
 8003944:	2002      	movs	r0, #2
 8003946:	f7fe f9a3 	bl	8001c90 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_Period = 65535; // Maximal
 800394e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003952:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003954:	2300      	movs	r3, #0
 8003956:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003958:	2300      	movs	r3, #0
 800395a:	80fb      	strh	r3, [r7, #6]

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	4619      	mov	r1, r3
 8003960:	4808      	ldr	r0, [pc, #32]	; (8003984 <setUpEncoder+0x48>)
 8003962:	f7fe fac3 	bl	8001eec <TIM_TimeBaseInit>

	// TIM_EncoderMode_TI1: Counter counts on TI1FP1 edge depending on TI2FP2 level.
	TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI1, TIM_ICPolarity_Rising,
 8003966:	2300      	movs	r3, #0
 8003968:	2200      	movs	r2, #0
 800396a:	2101      	movs	r1, #1
 800396c:	4805      	ldr	r0, [pc, #20]	; (8003984 <setUpEncoder+0x48>)
 800396e:	f7fe fc29 	bl	80021c4 <TIM_EncoderInterfaceConfig>
			TIM_ICPolarity_Rising);

	TIM_Cmd(TIM3, ENABLE);
 8003972:	2101      	movs	r1, #1
 8003974:	4803      	ldr	r0, [pc, #12]	; (8003984 <setUpEncoder+0x48>)
 8003976:	f7fe fbbb 	bl	80020f0 <TIM_Cmd>
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40000400 	.word	0x40000400

08003988 <waitForEndTimerHz>:

void waitForEndTimerHz(void) {
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
	while (proceed10ms == 0) //interrupt will set proceed to 1;
 800398c:	bf00      	nop
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <waitForEndTimerHz+0x1c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0fb      	beq.n	800398e <waitForEndTimerHz+0x6>
	{

	}
	proceed10ms = 0;
 8003996:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <waitForEndTimerHz+0x1c>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	2000043c 	.word	0x2000043c

080039a8 <setUpGPIO>:
//GPIO_Pin_6	GPIOA	SPI1_MISO / TIM8_BKIN / ADC12_IN6 / TIM3_CH1 with alternative function TIM1_BKIN
//GPIO_Pin_7	GPIOA	SPI1_MOSI / TIM8_CH1N / ADC12_IN7 / TIM3_CH2 with alternative function TIM1_CH1N
//GPIO_Pin_1	GPIOA	USART2_RTS / ADC123_IN1 / TIM5_CH2 / TIM2_CH2

void setUpGPIO(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB,ENABLE);
 80039ae:	2101      	movs	r1, #1
 80039b0:	200c      	movs	r0, #12
 80039b2:	f7fe f94f 	bl	8001c54 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 80039b6:	2101      	movs	r1, #1
 80039b8:	2001      	movs	r0, #1
 80039ba:	f7fe f94b 	bl	8001c54 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_11 | GPIO_Pin_12|GPIO_Pin_0;
 80039be:	f641 0301 	movw	r3, #6145	; 0x1801
 80039c2:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80039c4:	2303      	movs	r3, #3
 80039c6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80039c8:	2310      	movs	r3, #16
 80039ca:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	4819      	ldr	r0, [pc, #100]	; (8003a38 <setUpGPIO+0x90>)
 80039d2:	f7fd fd0b 	bl	80013ec <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;	//for H-bridge pushbutton
 80039d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039da:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80039dc:	2303      	movs	r3, #3
 80039de:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80039e0:	2304      	movs	r3, #4
 80039e2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	4619      	mov	r1, r3
 80039e8:	4813      	ldr	r0, [pc, #76]	; (8003a38 <setUpGPIO+0x90>)
 80039ea:	f7fd fcff 	bl	80013ec <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7; //for encoder channels
 80039ee:	23c0      	movs	r3, #192	; 0xc0
 80039f0:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80039f2:	2303      	movs	r3, #3
 80039f4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80039f6:	2304      	movs	r3, #4
 80039f8:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	480e      	ldr	r0, [pc, #56]	; (8003a38 <setUpGPIO+0x90>)
 8003a00:	f7fd fcf4 	bl	80013ec <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; //for current sensor to ADC
 8003a04:	2320      	movs	r3, #32
 8003a06:	80bb      	strh	r3, [r7, #4]
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4809      	ldr	r0, [pc, #36]	; (8003a38 <setUpGPIO+0x90>)
 8003a12:	f7fd fceb 	bl	80013ec <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_8|GPIO_Pin_9;
 8003a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a1a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003a20:	2310      	movs	r3, #16
 8003a22:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	4619      	mov	r1, r3
 8003a28:	4804      	ldr	r0, [pc, #16]	; (8003a3c <setUpGPIO+0x94>)
 8003a2a:	f7fd fcdf 	bl	80013ec <GPIO_Init>
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40010800 	.word	0x40010800
 8003a3c:	40010c00 	.word	0x40010c00

08003a40 <setUpGyro>:

#include "gyro.h"
//////////////////////////////////////////////////////////////////////////
////////////////GYRO FUNCTIONS////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
void setUpGyro() {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
	initSPIgyro();
 8003a44:	f000 f804 	bl	8003a50 <initSPIgyro>
	spiGyroRegisterSetup();
 8003a48:	f000 f856 	bl	8003af8 <spiGyroRegisterSetup>
}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <initSPIgyro>:

void initSPIgyro(void) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8003a56:	2101      	movs	r1, #1
 8003a58:	2008      	movs	r0, #8
 8003a5a:	f7fe f8fb 	bl	8001c54 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8003a5e:	2101      	movs	r1, #1
 8003a60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a64:	f7fe f914 	bl	8001c90 <RCC_APB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* Pack the struct */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8003a68:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003a6c:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8003a6e:	2318      	movs	r3, #24
 8003a70:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8003a72:	2303      	movs	r3, #3
 8003a74:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a76:	f107 0314 	add.w	r3, r7, #20
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	481c      	ldr	r0, [pc, #112]	; (8003af0 <initSPIgyro+0xa0>)
 8003a7e:	f7fd fcb5 	bl	80013ec <GPIO_Init>

	//Init CS-Pin
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12;
 8003a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a86:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8003a88:	2310      	movs	r3, #16
 8003a8a:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	4619      	mov	r1, r3
 8003a96:	4816      	ldr	r0, [pc, #88]	; (8003af0 <initSPIgyro+0xa0>)
 8003a98:	f7fd fca8 	bl	80013ec <GPIO_Init>

	GPIO_SetBits(GPIOB, GPIO_Pin_12);  //Set CS high
 8003a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aa0:	4813      	ldr	r0, [pc, #76]	; (8003af0 <initSPIgyro+0xa0>)
 8003aa2:	f7fd fd79 	bl	8001598 <GPIO_SetBits>

	SPI_InitTypeDef SPI_InitStructure;

	SPI_I2S_DeInit(SPI2);
 8003aa6:	4813      	ldr	r0, [pc, #76]	; (8003af4 <initSPIgyro+0xa4>)
 8003aa8:	f7fe f94c 	bl	8001d44 <SPI_I2S_DeInit>
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8003aac:	2300      	movs	r3, #0
 8003aae:	803b      	strh	r3, [r7, #0]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8003ab0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003ab4:	807b      	strh	r3, [r7, #2]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8003aba:	2300      	movs	r3, #0
 8003abc:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8003ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ac6:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2; //TODO THIS CHANGED FROM 8 TO 2
 8003ac8:	2300      	movs	r3, #0
 8003aca:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8003acc:	2300      	movs	r3, #0
 8003ace:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8003ad0:	2307      	movs	r3, #7
 8003ad2:	823b      	strh	r3, [r7, #16]

	SPI_Init(SPI2, &SPI_InitStructure);
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4806      	ldr	r0, [pc, #24]	; (8003af4 <initSPIgyro+0xa4>)
 8003ada:	f7fe f96d 	bl	8001db8 <SPI_Init>

	SPI_Cmd(SPI2, ENABLE);
 8003ade:	2101      	movs	r1, #1
 8003ae0:	4804      	ldr	r0, [pc, #16]	; (8003af4 <initSPIgyro+0xa4>)
 8003ae2:	f7fe f9ad 	bl	8001e40 <SPI_Cmd>
}
 8003ae6:	bf00      	nop
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40010c00 	.word	0x40010c00
 8003af4:	40003800 	.word	0x40003800

08003af8 <spiGyroRegisterSetup>:
void spiGyroRegisterSetup(void) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	//10 11=380
	//11 00=760
	//11 01=760
	//11 10=760
	//11 11=760
	(void) writeSPIgyro(0b00100000, 0b11001111);//reg 0x20-ctrl_Reg1 (first 2 bits are "write" and "no increment"
 8003afc:	21cf      	movs	r1, #207	; 0xcf
 8003afe:	2020      	movs	r0, #32
 8003b00:	f000 f80a 	bl	8003b18 <writeSPIgyro>
	//BDU BLE FS1 FS0 - 0 0 SIM
	//BDU 0=continuous update 1=not updated until both read
	//BLE 0=data LSB at lower address
	//FS 00=250dps 01=500dps 10=2000dps 11=2000dps
	//SIM-SPI serial interface 0=4wire 1=3wire
	(void) writeSPIgyro(0b00100011, 0b10100000);	//reg 0x23-ctrl_Reg4, set to 2000dps, was 500dps (10)
 8003b04:	21a0      	movs	r1, #160	; 0xa0
 8003b06:	2023      	movs	r0, #35	; 0x23
 8003b08:	f000 f806 	bl	8003b18 <writeSPIgyro>
	//BOOT 0=normal
	//FIFO 0=disable
	//Hpen high pass filter 0=disable
	//INT default 0 to disable
	//out out selection configuration default 0
	(void) writeSPIgyro(0b00100100, 0b00000000);	//reg 0x24-ctrl_Reg5
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	2024      	movs	r0, #36	; 0x24
 8003b10:	f000 f802 	bl	8003b18 <writeSPIgyro>
}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <writeSPIgyro>:
uint8_t writeSPIgyro(uint8_t regAdr, uint8_t data)	//also reads the register
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	460a      	mov	r2, r1
 8003b22:	71fb      	strb	r3, [r7, #7]
 8003b24:	4613      	mov	r3, r2
 8003b26:	71bb      	strb	r3, [r7, #6]
	uint8_t dummyVar;
	int32_t val;

	/* Pull CS line low */
	GPIO_ResetBits(GPIOB, GPIO_Pin_12);
 8003b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b2c:	4822      	ldr	r0, [pc, #136]	; (8003bb8 <writeSPIgyro+0xa0>)
 8003b2e:	f7fd fd41 	bl	80015b4 <GPIO_ResetBits>

	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {
 8003b32:	bf00      	nop
 8003b34:	2102      	movs	r1, #2
 8003b36:	4821      	ldr	r0, [pc, #132]	; (8003bbc <writeSPIgyro+0xa4>)
 8003b38:	f7fe f9bc 	bl	8001eb4 <SPI_I2S_GetFlagStatus>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f8      	beq.n	8003b34 <writeSPIgyro+0x1c>
		/* Wait for all transmissions to complete */
	}
	SPI_I2S_SendData(SPI2, regAdr);    //Sensor Address that we are WRITING to
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	4619      	mov	r1, r3
 8003b48:	481c      	ldr	r0, [pc, #112]	; (8003bbc <writeSPIgyro+0xa4>)
 8003b4a:	f7fe f999 	bl	8001e80 <SPI_I2S_SendData>
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {
 8003b4e:	bf00      	nop
 8003b50:	2101      	movs	r1, #1
 8003b52:	481a      	ldr	r0, [pc, #104]	; (8003bbc <writeSPIgyro+0xa4>)
 8003b54:	f7fe f9ae 	bl	8001eb4 <SPI_I2S_GetFlagStatus>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f8      	beq.n	8003b50 <writeSPIgyro+0x38>
		/* Wait for data */
	}
	dummyVar = SPI_I2S_ReceiveData(SPI2);
 8003b5e:	4817      	ldr	r0, [pc, #92]	; (8003bbc <writeSPIgyro+0xa4>)
 8003b60:	f7fe f99c 	bl	8001e9c <SPI_I2S_ReceiveData>
 8003b64:	4603      	mov	r3, r0
 8003b66:	73fb      	strb	r3, [r7, #15]

	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {
 8003b68:	bf00      	nop
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4813      	ldr	r0, [pc, #76]	; (8003bbc <writeSPIgyro+0xa4>)
 8003b6e:	f7fe f9a1 	bl	8001eb4 <SPI_I2S_GetFlagStatus>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f8      	beq.n	8003b6a <writeSPIgyro+0x52>
		/* Wait for all transmissions to complete */
	}
	SPI_I2S_SendData(SPI2, data);    //Sensor Config
 8003b78:	79bb      	ldrb	r3, [r7, #6]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	480f      	ldr	r0, [pc, #60]	; (8003bbc <writeSPIgyro+0xa4>)
 8003b80:	f7fe f97e 	bl	8001e80 <SPI_I2S_SendData>

	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {
 8003b84:	bf00      	nop
 8003b86:	2101      	movs	r1, #1
 8003b88:	480c      	ldr	r0, [pc, #48]	; (8003bbc <writeSPIgyro+0xa4>)
 8003b8a:	f7fe f993 	bl	8001eb4 <SPI_I2S_GetFlagStatus>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f8      	beq.n	8003b86 <writeSPIgyro+0x6e>
		/* Wait for data */
	}
	val = (u8) SPI_I2S_ReceiveData(SPI2);
 8003b94:	4809      	ldr	r0, [pc, #36]	; (8003bbc <writeSPIgyro+0xa4>)
 8003b96:	f7fe f981 	bl	8001e9c <SPI_I2S_ReceiveData>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	60bb      	str	r3, [r7, #8]

	/* Pull CS line high */
	GPIO_SetBits(GPIOB, GPIO_Pin_12);
 8003ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ba4:	4804      	ldr	r0, [pc, #16]	; (8003bb8 <writeSPIgyro+0xa0>)
 8003ba6:	f7fd fcf7 	bl	8001598 <GPIO_SetBits>
	return (u8) val;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	b2db      	uxtb	r3, r3

}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40010c00 	.word	0x40010c00
 8003bbc:	40003800 	.word	0x40003800

08003bc0 <getGyro>:
void getGyro(u8* buffer, float* out) {
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b089      	sub	sp, #36	; 0x24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
	//expressed as 2s compliment
	u8 crtlB;
	crtlB = (u8) writeSPIgyro(0b10100011, 0x00);
 8003bca:	2100      	movs	r1, #0
 8003bcc:	20a3      	movs	r0, #163	; 0xa3
 8003bce:	f7ff ffa3 	bl	8003b18 <writeSPIgyro>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	76fb      	strb	r3, [r7, #27]
	u8 gyroXL = writeSPIgyro(0b10101000, 0x00);
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	20a8      	movs	r0, #168	; 0xa8
 8003bda:	f7ff ff9d 	bl	8003b18 <writeSPIgyro>
 8003bde:	4603      	mov	r3, r0
 8003be0:	76bb      	strb	r3, [r7, #26]
	u8 gyroXH = writeSPIgyro(0b10101001, 0x00);
 8003be2:	2100      	movs	r1, #0
 8003be4:	20a9      	movs	r0, #169	; 0xa9
 8003be6:	f7ff ff97 	bl	8003b18 <writeSPIgyro>
 8003bea:	4603      	mov	r3, r0
 8003bec:	767b      	strb	r3, [r7, #25]
	u8 gyroYL = writeSPIgyro(0b10101010, 0x00);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	20aa      	movs	r0, #170	; 0xaa
 8003bf2:	f7ff ff91 	bl	8003b18 <writeSPIgyro>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	763b      	strb	r3, [r7, #24]
	u8 gyroYH = writeSPIgyro(0b10101011, 0x00);
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	20ab      	movs	r0, #171	; 0xab
 8003bfe:	f7ff ff8b 	bl	8003b18 <writeSPIgyro>
 8003c02:	4603      	mov	r3, r0
 8003c04:	75fb      	strb	r3, [r7, #23]
	u8 gyroZL = writeSPIgyro(0b10101100, 0x00);
 8003c06:	2100      	movs	r1, #0
 8003c08:	20ac      	movs	r0, #172	; 0xac
 8003c0a:	f7ff ff85 	bl	8003b18 <writeSPIgyro>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	75bb      	strb	r3, [r7, #22]
	u8 gyroZH = writeSPIgyro(0b10101101, 0x00);
 8003c12:	2100      	movs	r1, #0
 8003c14:	20ad      	movs	r0, #173	; 0xad
 8003c16:	f7ff ff7f 	bl	8003b18 <writeSPIgyro>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	757b      	strb	r3, [r7, #21]

	buffer[1] = gyroXL;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3301      	adds	r3, #1
 8003c22:	7eba      	ldrb	r2, [r7, #26]
 8003c24:	701a      	strb	r2, [r3, #0]
	buffer[0] = gyroXH;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7e7a      	ldrb	r2, [r7, #25]
 8003c2a:	701a      	strb	r2, [r3, #0]
	buffer[3] = gyroYL;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3303      	adds	r3, #3
 8003c30:	7e3a      	ldrb	r2, [r7, #24]
 8003c32:	701a      	strb	r2, [r3, #0]
	buffer[2] = gyroYH;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3302      	adds	r3, #2
 8003c38:	7dfa      	ldrb	r2, [r7, #23]
 8003c3a:	701a      	strb	r2, [r3, #0]
	buffer[5] = gyroZL;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3305      	adds	r3, #5
 8003c40:	7dba      	ldrb	r2, [r7, #22]
 8003c42:	701a      	strb	r2, [r3, #0]
	buffer[4] = gyroZH;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	7d7a      	ldrb	r2, [r7, #21]
 8003c4a:	701a      	strb	r2, [r3, #0]
	u16 t = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	827b      	strh	r3, [r7, #18]
	int i = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61fb      	str	r3, [r7, #28]
	u8 temp = (u8) (crtlB & 0x20);	//was 0x30
 8003c54:	7efb      	ldrb	r3, [r7, #27]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	747b      	strb	r3, [r7, #17]
	switch (temp) {
 8003c5c:	7c7b      	ldrb	r3, [r7, #17]
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d04c      	beq.n	8003cfc <getGyro+0x13c>
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	dc02      	bgt.n	8003c6c <getGyro+0xac>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <getGyro+0xba>
 8003c6a:	e0fe      	b.n	8003e6a <getGyro+0x2aa>
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	f000 8086 	beq.w	8003d7e <getGyro+0x1be>
 8003c72:	2b30      	cmp	r3, #48	; 0x30
 8003c74:	f000 80be 	beq.w	8003df4 <getGyro+0x234>
 8003c78:	e0f7      	b.n	8003e6a <getGyro+0x2aa>
	case (u8) 0x00:    //250dps
		for (i = 0; i < 3; i++) {
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e039      	b.n	8003cf4 <getGyro+0x134>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	461a      	mov	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	b21a      	sxth	r2, r3
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	3301      	adds	r3, #1
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	440b      	add	r3, r1
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b21b      	sxth	r3, r3
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	b21b      	sxth	r3, r3
 8003ca2:	827b      	strh	r3, [r7, #18]
			s16 temp2 = twosCompToDec16(t);
 8003ca4:	8a7b      	ldrh	r3, [r7, #18]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f900 	bl	8003eac <twosCompToDec16>
 8003cac:	4603      	mov	r3, r0
 8003cae:	81fb      	strh	r3, [r7, #14]
			out[i] = (float) ((temp2 * 8.75 / 1000.0));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	18d4      	adds	r4, r2, r3
 8003cb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fc05 	bl	80004cc <__aeabi_i2d>
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	4b76      	ldr	r3, [pc, #472]	; (8003ea0 <getGyro+0x2e0>)
 8003cc8:	f7fc fc66 	bl	8000598 <__aeabi_dmul>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	4b72      	ldr	r3, [pc, #456]	; (8003ea4 <getGyro+0x2e4>)
 8003cda:	f7fc fd87 	bl	80007ec <__aeabi_ddiv>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f7fc fe69 	bl	80009bc <__aeabi_d2f>
 8003cea:	4603      	mov	r3, r0
 8003cec:	6023      	str	r3, [r4, #0]
	u16 t = 0;
	int i = 0;
	u8 temp = (u8) (crtlB & 0x20);	//was 0x30
	switch (temp) {
	case (u8) 0x00:    //250dps
		for (i = 0; i < 3; i++) {
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	ddc2      	ble.n	8003c80 <getGyro+0xc0>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 8.75 / 1000.0));
		}
		break;
 8003cfa:	e0b6      	b.n	8003e6a <getGyro+0x2aa>
	case (u8) 0x10:    //500dps
		for (i = 0; i < 3; i++) {
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	e039      	b.n	8003d76 <getGyro+0x1b6>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	461a      	mov	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	b21a      	sxth	r2, r3
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	3301      	adds	r3, #1
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	440b      	add	r3, r1
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	b21b      	sxth	r3, r3
 8003d20:	4313      	orrs	r3, r2
 8003d22:	b21b      	sxth	r3, r3
 8003d24:	827b      	strh	r3, [r7, #18]
			s16 temp2 = twosCompToDec16(t);
 8003d26:	8a7b      	ldrh	r3, [r7, #18]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 f8bf 	bl	8003eac <twosCompToDec16>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	81bb      	strh	r3, [r7, #12]
			out[i] = (float) ((temp2 * 17.5 / 1000.0));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	18d4      	adds	r4, r2, r3
 8003d3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fc fbc4 	bl	80004cc <__aeabi_i2d>
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	4b57      	ldr	r3, [pc, #348]	; (8003ea8 <getGyro+0x2e8>)
 8003d4a:	f7fc fc25 	bl	8000598 <__aeabi_dmul>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	4b52      	ldr	r3, [pc, #328]	; (8003ea4 <getGyro+0x2e4>)
 8003d5c:	f7fc fd46 	bl	80007ec <__aeabi_ddiv>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7fc fe28 	bl	80009bc <__aeabi_d2f>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	6023      	str	r3, [r4, #0]
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 8.75 / 1000.0));
		}
		break;
	case (u8) 0x10:    //500dps
		for (i = 0; i < 3; i++) {
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	ddc2      	ble.n	8003d02 <getGyro+0x142>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 17.5 / 1000.0));
		}
		break;
 8003d7c:	e075      	b.n	8003e6a <getGyro+0x2aa>
	case (u8) 0x20:    //2000dps
		for (i = 0; i < 3; i++) {
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	e033      	b.n	8003dec <getGyro+0x22c>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	461a      	mov	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	b21a      	sxth	r2, r3
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	3301      	adds	r3, #1
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	440b      	add	r3, r1
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b21b      	sxth	r3, r3
 8003da2:	4313      	orrs	r3, r2
 8003da4:	b21b      	sxth	r3, r3
 8003da6:	827b      	strh	r3, [r7, #18]
			s16 temp2 = twosCompToDec16(t);
 8003da8:	8a7b      	ldrh	r3, [r7, #18]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f87e 	bl	8003eac <twosCompToDec16>
 8003db0:	4603      	mov	r3, r0
 8003db2:	817b      	strh	r3, [r7, #10]
			out[i] = (float) ((temp2 * 70 / 1000.0));
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	18d4      	adds	r4, r2, r3
 8003dbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dc0:	2246      	movs	r2, #70	; 0x46
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fc fb80 	bl	80004cc <__aeabi_i2d>
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	4b34      	ldr	r3, [pc, #208]	; (8003ea4 <getGyro+0x2e4>)
 8003dd2:	f7fc fd0b 	bl	80007ec <__aeabi_ddiv>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f7fc fded 	bl	80009bc <__aeabi_d2f>
 8003de2:	4603      	mov	r3, r0
 8003de4:	6023      	str	r3, [r4, #0]
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 17.5 / 1000.0));
		}
		break;
	case (u8) 0x20:    //2000dps
		for (i = 0; i < 3; i++) {
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3301      	adds	r3, #1
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	ddc8      	ble.n	8003d84 <getGyro+0x1c4>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 70 / 1000.0));
		}
		break;
 8003df2:	e03a      	b.n	8003e6a <getGyro+0x2aa>
	case (u8) 0x30:    //20000dps
		for (i = 0; i < 3; i++) {
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	e033      	b.n	8003e62 <getGyro+0x2a2>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	461a      	mov	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	b21a      	sxth	r2, r3
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	3301      	adds	r3, #1
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	440b      	add	r3, r1
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	b21b      	sxth	r3, r3
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	827b      	strh	r3, [r7, #18]
			s16 temp2 = twosCompToDec16(t);
 8003e1e:	8a7b      	ldrh	r3, [r7, #18]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 f843 	bl	8003eac <twosCompToDec16>
 8003e26:	4603      	mov	r3, r0
 8003e28:	813b      	strh	r3, [r7, #8]
			out[i] = (float) ((temp2 * 70 / 1000.0));
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	18d4      	adds	r4, r2, r3
 8003e32:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003e36:	2246      	movs	r2, #70	; 0x46
 8003e38:	fb02 f303 	mul.w	r3, r2, r3
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fc fb45 	bl	80004cc <__aeabi_i2d>
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <getGyro+0x2e4>)
 8003e48:	f7fc fcd0 	bl	80007ec <__aeabi_ddiv>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	f7fc fdb2 	bl	80009bc <__aeabi_d2f>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	6023      	str	r3, [r4, #0]
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 70 / 1000.0));
		}
		break;
	case (u8) 0x30:    //20000dps
		for (i = 0; i < 3; i++) {
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	ddc8      	ble.n	8003dfa <getGyro+0x23a>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 70 / 1000.0));
		}
		break;
 8003e68:	bf00      	nop
	}
	buffer[0] = gyroXL;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	7eba      	ldrb	r2, [r7, #26]
 8003e6e:	701a      	strb	r2, [r3, #0]
	buffer[1] = gyroXH;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3301      	adds	r3, #1
 8003e74:	7e7a      	ldrb	r2, [r7, #25]
 8003e76:	701a      	strb	r2, [r3, #0]
	buffer[2] = gyroYL;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	7e3a      	ldrb	r2, [r7, #24]
 8003e7e:	701a      	strb	r2, [r3, #0]
	buffer[3] = gyroYH;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3303      	adds	r3, #3
 8003e84:	7dfa      	ldrb	r2, [r7, #23]
 8003e86:	701a      	strb	r2, [r3, #0]
	buffer[4] = gyroZL;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	7dba      	ldrb	r2, [r7, #22]
 8003e8e:	701a      	strb	r2, [r3, #0]
	buffer[5] = gyroZH;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3305      	adds	r3, #5
 8003e94:	7d7a      	ldrb	r2, [r7, #21]
 8003e96:	701a      	strb	r2, [r3, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	3724      	adds	r7, #36	; 0x24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}
 8003ea0:	40218000 	.word	0x40218000
 8003ea4:	408f4000 	.word	0x408f4000
 8003ea8:	40318000 	.word	0x40318000

08003eac <twosCompToDec16>:
	//*temp = (u8) writeSPIgyro(0b10100110, 0x00);
	temp[0] = (uint8_t) writeSPIgyro(0b10100110, 0x00);
	temp[1] = readADCtempValue();
}
s16 twosCompToDec16(u16 val)    //for 16 bit
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	80fb      	strh	r3, [r7, #6]
	u16 v = val;
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	81bb      	strh	r3, [r7, #12]
	s16 temp = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	81fb      	strh	r3, [r7, #14]
	if ((v & 0b1000000000000000) == 0b1000000000000000) {
 8003ebe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	da02      	bge.n	8003ecc <twosCompToDec16+0x20>
		temp = -32768;
 8003ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eca:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000000001) == 0b0000000000000001) {
 8003ecc:	89bb      	ldrh	r3, [r7, #12]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <twosCompToDec16+0x32>
		temp = temp + 1;
 8003ed6:	89fb      	ldrh	r3, [r7, #14]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000000010) == 0b0000000000000010) {
 8003ede:	89bb      	ldrh	r3, [r7, #12]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <twosCompToDec16+0x44>
		temp = temp + 2;
 8003ee8:	89fb      	ldrh	r3, [r7, #14]
 8003eea:	3302      	adds	r3, #2
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000000100) == 0b0000000000000100) {
 8003ef0:	89bb      	ldrh	r3, [r7, #12]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <twosCompToDec16+0x56>
		temp = temp + 4;
 8003efa:	89fb      	ldrh	r3, [r7, #14]
 8003efc:	3304      	adds	r3, #4
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000001000) == 0b0000000000001000) {
 8003f02:	89bb      	ldrh	r3, [r7, #12]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <twosCompToDec16+0x68>
		temp = temp + 8;
 8003f0c:	89fb      	ldrh	r3, [r7, #14]
 8003f0e:	3308      	adds	r3, #8
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000010000) == 0b0000000000010000) {
 8003f14:	89bb      	ldrh	r3, [r7, #12]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <twosCompToDec16+0x7a>
		temp = temp + 16;
 8003f1e:	89fb      	ldrh	r3, [r7, #14]
 8003f20:	3310      	adds	r3, #16
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000100000) == 0b0000000000100000) {
 8003f26:	89bb      	ldrh	r3, [r7, #12]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <twosCompToDec16+0x8c>
		temp = temp + 32;
 8003f30:	89fb      	ldrh	r3, [r7, #14]
 8003f32:	3320      	adds	r3, #32
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000001000000) == 0b0000000001000000) {
 8003f38:	89bb      	ldrh	r3, [r7, #12]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <twosCompToDec16+0x9e>
		temp = temp + 64;
 8003f42:	89fb      	ldrh	r3, [r7, #14]
 8003f44:	3340      	adds	r3, #64	; 0x40
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000010000000) == 0b0000000010000000) {
 8003f4a:	89bb      	ldrh	r3, [r7, #12]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <twosCompToDec16+0xb0>
		temp = temp + 128;
 8003f54:	89fb      	ldrh	r3, [r7, #14]
 8003f56:	3380      	adds	r3, #128	; 0x80
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000100000000) == 0b0000000100000000) {
 8003f5c:	89bb      	ldrh	r3, [r7, #12]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d004      	beq.n	8003f70 <twosCompToDec16+0xc4>
		temp = temp + 256;
 8003f66:	89fb      	ldrh	r3, [r7, #14]
 8003f68:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000001000000000) == 0b0000001000000000) {
 8003f70:	89bb      	ldrh	r3, [r7, #12]
 8003f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <twosCompToDec16+0xd8>
		temp = temp + 512;
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000010000000000) == 0b0000010000000000) {
 8003f84:	89bb      	ldrh	r3, [r7, #12]
 8003f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <twosCompToDec16+0xec>
		temp = temp + 1024;
 8003f8e:	89fb      	ldrh	r3, [r7, #14]
 8003f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000100000000000) == 0b0000100000000000) {
 8003f98:	89bb      	ldrh	r3, [r7, #12]
 8003f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d004      	beq.n	8003fac <twosCompToDec16+0x100>
		temp = temp + 2048;
 8003fa2:	89fb      	ldrh	r3, [r7, #14]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0001000000000000) == 0b0001000000000000) {
 8003fac:	89bb      	ldrh	r3, [r7, #12]
 8003fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <twosCompToDec16+0x114>
		temp = temp + 4096;
 8003fb6:	89fb      	ldrh	r3, [r7, #14]
 8003fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0010000000000000) == 0b0010000000000000) {
 8003fc0:	89bb      	ldrh	r3, [r7, #12]
 8003fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <twosCompToDec16+0x128>
		temp = temp + 8192;
 8003fca:	89fb      	ldrh	r3, [r7, #14]
 8003fcc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0100000000000000) == 0b0100000000000000) {
 8003fd4:	89bb      	ldrh	r3, [r7, #12]
 8003fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <twosCompToDec16+0x13c>
		temp = temp + 16384;
 8003fde:	89fb      	ldrh	r3, [r7, #14]
 8003fe0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	81fb      	strh	r3, [r7, #14]
	}

	return (s16) temp;
 8003fe8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop

08003ff8 <main>:
uint8_t a8[] = { 65, 66, 67, 68, 69, 70 };	//debugging
uint8_t b8[] = { 106, 107, 108, 109, 110, 111 };	//debugging
uint8_t c8[] = { 74, 75, 76, 77, 78, 79, 74, 75, 76, 77, 78, 79 };	//debugging
uint8_t d8[] = { 97, 98, 99, 100, 101, 102, 103, 102, 101, 100, 99, 98, 97 };//debugging

int main(void) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af06      	add	r7, sp, #24
	serialTerminal_Init();
 8003ffe:	f000 fa29 	bl	8004454 <serialTerminal_Init>
	setUpLoopTimer();
 8004002:	f7ff fc4f 	bl	80038a4 <setUpLoopTimer>
	setUpEncoder();
 8004006:	f7ff fc99 	bl	800393c <setUpEncoder>
	setUpGPIO();
 800400a:	f7ff fccd 	bl	80039a8 <setUpGPIO>
	setUpEcompass();
 800400e:	f7fe fbf1 	bl	80027f4 <setUpEcompass>
	setUpGyro();
 8004012:	f7ff fd15 	bl	8003a40 <setUpGyro>
	setUpADC();	//this also sets up DMA...
 8004016:	f7fe faaf 	bl	8002578 <setUpADC>
	//setUpXbee(); //unused, replaced with SD card logging
	setUpLoggerSDcard();
 800401a:	f7ff f84f 	bl	80030bc <setUpLoggerSDcard>
	setUpPWM();
 800401e:	f000 f96f 	bl	8004300 <setUpPWM>
//	for(int i = 0; i < 999999; i++){
//	//ensure the data.txt file starts with the beginning of a packet
//	}

	while (1) {
		toggleGPIOpin(&status);
 8004022:	483d      	ldr	r0, [pc, #244]	; (8004118 <main+0x120>)
 8004024:	f000 f8aa 	bl	800417c <toggleGPIOpin>
		getAcc(acc8, acc);		//this takes long
 8004028:	493c      	ldr	r1, [pc, #240]	; (800411c <main+0x124>)
 800402a:	483d      	ldr	r0, [pc, #244]	; (8004120 <main+0x128>)
 800402c:	f7fe fdf0 	bl	8002c10 <getAcc>
		getGyro(gyro8, gyro);
 8004030:	493c      	ldr	r1, [pc, #240]	; (8004124 <main+0x12c>)
 8004032:	483d      	ldr	r0, [pc, #244]	; (8004128 <main+0x130>)
 8004034:	f7ff fdc4 	bl	8003bc0 <getGyro>
		//		getMag(mag8, mag);
		//		getTempCelsius(temperature);
		readADCdma(adcValDMA,&motorCurrent);	//for getting temperature, a u16 val
 8004038:	493c      	ldr	r1, [pc, #240]	; (800412c <main+0x134>)
 800403a:	483d      	ldr	r0, [pc, #244]	; (8004130 <main+0x138>)
 800403c:	f7fe fb34 	bl	80026a8 <readADCdma>
		//readADC_motorCurrent(&motorCurrent);	//for getting current, a float val
		temperature[1] = (uint8_t)((V25 - adcValDMA[0]) / Avg_Slope + 25);
 8004040:	4b3c      	ldr	r3, [pc, #240]	; (8004134 <main+0x13c>)
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	4b3a      	ldr	r3, [pc, #232]	; (8004130 <main+0x138>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	4a3a      	ldr	r2, [pc, #232]	; (8004138 <main+0x140>)
 800404e:	8812      	ldrh	r2, [r2, #0]
 8004050:	fb93 f3f2 	sdiv	r3, r3, r2
 8004054:	b2db      	uxtb	r3, r3
 8004056:	3319      	adds	r3, #25
 8004058:	b2da      	uxtb	r2, r3
 800405a:	4b38      	ldr	r3, [pc, #224]	; (800413c <main+0x144>)
 800405c:	705a      	strb	r2, [r3, #1]
		readEncoder(&shaft_revs, &shaft_speed);
 800405e:	4938      	ldr	r1, [pc, #224]	; (8004140 <main+0x148>)
 8004060:	4838      	ldr	r0, [pc, #224]	; (8004144 <main+0x14c>)
 8004062:	f7ff f8a3 	bl	80031ac <readEncoder>
		calibrateMEMS(acc, accCalib, gyro, gyroCalib, temperature);
 8004066:	4b35      	ldr	r3, [pc, #212]	; (800413c <main+0x144>)
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	4b37      	ldr	r3, [pc, #220]	; (8004148 <main+0x150>)
 800406c:	4a2d      	ldr	r2, [pc, #180]	; (8004124 <main+0x12c>)
 800406e:	4937      	ldr	r1, [pc, #220]	; (800414c <main+0x154>)
 8004070:	482a      	ldr	r0, [pc, #168]	; (800411c <main+0x124>)
 8004072:	f7ff f8d9 	bl	8003228 <calibrateMEMS>
		controlMethod(accCalib, gyroCalib, temperature, angles, velocities, positions,
 8004076:	4b36      	ldr	r3, [pc, #216]	; (8004150 <main+0x158>)
 8004078:	9304      	str	r3, [sp, #16]
 800407a:	4b32      	ldr	r3, [pc, #200]	; (8004144 <main+0x14c>)
 800407c:	9303      	str	r3, [sp, #12]
 800407e:	4b35      	ldr	r3, [pc, #212]	; (8004154 <main+0x15c>)
 8004080:	9302      	str	r3, [sp, #8]
 8004082:	4b35      	ldr	r3, [pc, #212]	; (8004158 <main+0x160>)
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	4b35      	ldr	r3, [pc, #212]	; (800415c <main+0x164>)
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	4b35      	ldr	r3, [pc, #212]	; (8004160 <main+0x168>)
 800408c:	4a2b      	ldr	r2, [pc, #172]	; (800413c <main+0x144>)
 800408e:	492e      	ldr	r1, [pc, #184]	; (8004148 <main+0x150>)
 8004090:	482e      	ldr	r0, [pc, #184]	; (800414c <main+0x154>)
 8004092:	f7ff fa75 	bl	8003580 <controlMethod>
				&PWMval, &shaft_revs, &activateControl);

		for (int p = 0; p < sizeof(TxBuff); p++) {
 8004096:	2300      	movs	r3, #0
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	e007      	b.n	80040ac <main+0xb4>
			TxBuff[p] = 0;
 800409c:	4a31      	ldr	r2, [pc, #196]	; (8004164 <main+0x16c>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
		readEncoder(&shaft_revs, &shaft_speed);
		calibrateMEMS(acc, accCalib, gyro, gyroCalib, temperature);
		controlMethod(accCalib, gyroCalib, temperature, angles, velocities, positions,
				&PWMval, &shaft_revs, &activateControl);

		for (int p = 0; p < sizeof(TxBuff); p++) {
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3301      	adds	r3, #1
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b33      	cmp	r3, #51	; 0x33
 80040b0:	d9f4      	bls.n	800409c <main+0xa4>
			TxBuff[p] = 0;
		}

		DMA_Cmd(DMA1_Channel7, DISABLE);
 80040b2:	2100      	movs	r1, #0
 80040b4:	482c      	ldr	r0, [pc, #176]	; (8004168 <main+0x170>)
 80040b6:	f7fd f92d 	bl	8001314 <DMA_Cmd>
		DMA_SetCurrDataCounter(DMA1_Channel7, sizeof(TxBuff));
 80040ba:	2134      	movs	r1, #52	; 0x34
 80040bc:	482a      	ldr	r0, [pc, #168]	; (8004168 <main+0x170>)
 80040be:	f7fd f945 	bl	800134c <DMA_SetCurrDataCounter>
		DMA_Cmd(DMA1_Channel4, DISABLE);
 80040c2:	2100      	movs	r1, #0
 80040c4:	4829      	ldr	r0, [pc, #164]	; (800416c <main+0x174>)
 80040c6:	f7fd f925 	bl	8001314 <DMA_Cmd>
		DMA_SetCurrDataCounter(DMA1_Channel4, sizeof(TxBuff));
 80040ca:	2134      	movs	r1, #52	; 0x34
 80040cc:	4827      	ldr	r0, [pc, #156]	; (800416c <main+0x174>)
 80040ce:	f7fd f93d 	bl	800134c <DMA_SetCurrDataCounter>

		//Four payloads, gyro/acc/angles/MiscPayload
		convertDataToBytes();
 80040d2:	f000 f873 	bl	80041bc <convertDataToBytes>
		serialTerminal_packetize(gyro8, acc8, angles8, MiscPayload8,
 80040d6:	2311      	movs	r3, #17
 80040d8:	9303      	str	r3, [sp, #12]
 80040da:	230c      	movs	r3, #12
 80040dc:	9302      	str	r3, [sp, #8]
 80040de:	2306      	movs	r3, #6
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	2306      	movs	r3, #6
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <main+0x178>)
 80040e8:	4a22      	ldr	r2, [pc, #136]	; (8004174 <main+0x17c>)
 80040ea:	490d      	ldr	r1, [pc, #52]	; (8004120 <main+0x128>)
 80040ec:	480e      	ldr	r0, [pc, #56]	; (8004128 <main+0x130>)
 80040ee:	f000 f9b7 	bl	8004460 <serialTerminal_packetize>
		//debugging purposes
		//		serialTerminal_packetize(a8, b8, c8, d8, sizeof(a8), sizeof(b8),
		//				sizeof(c8), sizeof(d8));

		//SD card data
		DMA_Cmd(DMA1_Channel4, ENABLE);
 80040f2:	2101      	movs	r1, #1
 80040f4:	481d      	ldr	r0, [pc, #116]	; (800416c <main+0x174>)
 80040f6:	f7fd f90d 	bl	8001314 <DMA_Cmd>
		USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
 80040fa:	2201      	movs	r2, #1
 80040fc:	2180      	movs	r1, #128	; 0x80
 80040fe:	481e      	ldr	r0, [pc, #120]	; (8004178 <main+0x180>)
 8004100:	f7fe fa16 	bl	8002530 <USART_DMACmd>
		USART_Cmd(USART1, ENABLE);
 8004104:	2101      	movs	r1, #1
 8004106:	481c      	ldr	r0, [pc, #112]	; (8004178 <main+0x180>)
 8004108:	f7fe f9f2 	bl	80024f0 <USART_Cmd>
//			USART_Cmd(USART2, ENABLE);
//			XBee_waiting = 0;
//		}
//		XBee_waiting++;
		//Toggle PA11 to test loop frequency
		toggleGPIOpin(&status);
 800410c:	4802      	ldr	r0, [pc, #8]	; (8004118 <main+0x120>)
 800410e:	f000 f835 	bl	800417c <toggleGPIOpin>
		//wait until next run, to maintain 200Hz sync
		waitForEndTimerHz();
 8004112:	f7ff fc39 	bl	8003988 <waitForEndTimerHz>
	}
 8004116:	e784      	b.n	8004022 <main+0x2a>
 8004118:	20000440 	.word	0x20000440
 800411c:	200005a0 	.word	0x200005a0
 8004120:	2000062c 	.word	0x2000062c
 8004124:	200005c4 	.word	0x200005c4
 8004128:	20000598 	.word	0x20000598
 800412c:	200005ac 	.word	0x200005ac
 8004130:	20000640 	.word	0x20000640
 8004134:	2000044e 	.word	0x2000044e
 8004138:	2000044c 	.word	0x2000044c
 800413c:	200005c0 	.word	0x200005c0
 8004140:	20000448 	.word	0x20000448
 8004144:	20000444 	.word	0x20000444
 8004148:	200005f4 	.word	0x200005f4
 800414c:	200005d0 	.word	0x200005d0
 8004150:	20000441 	.word	0x20000441
 8004154:	200005f0 	.word	0x200005f0
 8004158:	20000614 	.word	0x20000614
 800415c:	20000620 	.word	0x20000620
 8004160:	200005b4 	.word	0x200005b4
 8004164:	20000564 	.word	0x20000564
 8004168:	40020080 	.word	0x40020080
 800416c:	40020044 	.word	0x40020044
 8004170:	200005dc 	.word	0x200005dc
 8004174:	20000608 	.word	0x20000608
 8004178:	40013800 	.word	0x40013800

0800417c <toggleGPIOpin>:
}

void toggleGPIOpin(uint8_t *status) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	if (*status == 0) {
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d108      	bne.n	800419e <toggleGPIOpin+0x22>
		GPIO_SetBits(GPIOA, GPIO_Pin_11);
 800418c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004190:	4809      	ldr	r0, [pc, #36]	; (80041b8 <toggleGPIOpin+0x3c>)
 8004192:	f7fd fa01 	bl	8001598 <GPIO_SetBits>
		*status = 1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
	} else {
		GPIO_ResetBits(GPIOA, GPIO_Pin_11);
		*status = 0;
	}
}
 800419c:	e007      	b.n	80041ae <toggleGPIOpin+0x32>
void toggleGPIOpin(uint8_t *status) {
	if (*status == 0) {
		GPIO_SetBits(GPIOA, GPIO_Pin_11);
		*status = 1;
	} else {
		GPIO_ResetBits(GPIOA, GPIO_Pin_11);
 800419e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041a2:	4805      	ldr	r0, [pc, #20]	; (80041b8 <toggleGPIOpin+0x3c>)
 80041a4:	f7fd fa06 	bl	80015b4 <GPIO_ResetBits>
		*status = 0;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
	}
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40010800 	.word	0x40010800

080041bc <convertDataToBytes>:

void convertDataToBytes() {
 80041bc:	b480      	push	{r7}
 80041be:	b08f      	sub	sp, #60	; 0x3c
 80041c0:	af00      	add	r7, sp, #0
	union {
		char temp_char[12];
		float temp_int_buffer[3];
	} buffer_to_char_union1;
	buffer_to_char_union1.temp_int_buffer[0] = angles[0];
 80041c2:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <convertDataToBytes+0x124>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	617b      	str	r3, [r7, #20]
	buffer_to_char_union1.temp_int_buffer[1] = angles[1];
 80041c8:	4b45      	ldr	r3, [pc, #276]	; (80042e0 <convertDataToBytes+0x124>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	61bb      	str	r3, [r7, #24]
	buffer_to_char_union1.temp_int_buffer[2] = angles[2];
 80041ce:	4b44      	ldr	r3, [pc, #272]	; (80042e0 <convertDataToBytes+0x124>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 12; i++) {
 80041d4:	2300      	movs	r3, #0
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
 80041d8:	e00c      	b.n	80041f4 <convertDataToBytes+0x38>
		angles8[i] = buffer_to_char_union1.temp_char[i];
 80041da:	f107 0214 	add.w	r2, r7, #20
 80041de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e0:	4413      	add	r3, r2
 80041e2:	7819      	ldrb	r1, [r3, #0]
 80041e4:	4a3f      	ldr	r2, [pc, #252]	; (80042e4 <convertDataToBytes+0x128>)
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	4413      	add	r3, r2
 80041ea:	460a      	mov	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]
		float temp_int_buffer[3];
	} buffer_to_char_union1;
	buffer_to_char_union1.temp_int_buffer[0] = angles[0];
	buffer_to_char_union1.temp_int_buffer[1] = angles[1];
	buffer_to_char_union1.temp_int_buffer[2] = angles[2];
	for (int i = 0; i < 12; i++) {
 80041ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f0:	3301      	adds	r3, #1
 80041f2:	637b      	str	r3, [r7, #52]	; 0x34
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	2b0b      	cmp	r3, #11
 80041f8:	ddef      	ble.n	80041da <convertDataToBytes+0x1e>
	//	buffer_to_char_union2.temp_signed[0] = temperature[0];
	//	buffer_to_char_union2.temp_signed[1] = temperature[1];
	//	for (int i = 0; i < 2; i++) {
	//		MiscPayload8[i] = buffer_to_char_union2.temp_unsigned[i];
	//	}
	for (int i = 0; i < 1; i++) {
 80041fa:	2300      	movs	r3, #0
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
 80041fe:	e006      	b.n	800420e <convertDataToBytes+0x52>
		//		MiscPayload8[i] = temperature[i];
		MiscPayload8[0] = temperature[1];
 8004200:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <convertDataToBytes+0x12c>)
 8004202:	785a      	ldrb	r2, [r3, #1]
 8004204:	4b39      	ldr	r3, [pc, #228]	; (80042ec <convertDataToBytes+0x130>)
 8004206:	701a      	strb	r2, [r3, #0]
	//	buffer_to_char_union2.temp_signed[0] = temperature[0];
	//	buffer_to_char_union2.temp_signed[1] = temperature[1];
	//	for (int i = 0; i < 2; i++) {
	//		MiscPayload8[i] = buffer_to_char_union2.temp_unsigned[i];
	//	}
	for (int i = 0; i < 1; i++) {
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	3301      	adds	r3, #1
 800420c:	633b      	str	r3, [r7, #48]	; 0x30
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	2b00      	cmp	r3, #0
 8004212:	ddf5      	ble.n	8004200 <convertDataToBytes+0x44>

	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union3;
	buffer_to_char_union3.temp_int_buffer = PWMval;
 8004214:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <convertDataToBytes+0x134>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	613b      	str	r3, [r7, #16]
	for (int i = 1; i < 5; i++) {
 800421a:	2301      	movs	r3, #1
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800421e:	e00e      	b.n	800423e <convertDataToBytes+0x82>
		MiscPayload8[i] = buffer_to_char_union3.temp_char[i - 1];
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004222:	3b01      	subs	r3, #1
 8004224:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004228:	4413      	add	r3, r2
 800422a:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 800422e:	4a2f      	ldr	r2, [pc, #188]	; (80042ec <convertDataToBytes+0x130>)
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	4413      	add	r3, r2
 8004234:	460a      	mov	r2, r1
 8004236:	701a      	strb	r2, [r3, #0]
	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union3;
	buffer_to_char_union3.temp_int_buffer = PWMval;
	for (int i = 1; i < 5; i++) {
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	3301      	adds	r3, #1
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	2b04      	cmp	r3, #4
 8004242:	dded      	ble.n	8004220 <convertDataToBytes+0x64>

	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union4;
	buffer_to_char_union4.temp_int_buffer = shaft_revs;
 8004244:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <convertDataToBytes+0x138>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
	for (int i = 5; i < 9; i++) {
 800424a:	2305      	movs	r3, #5
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
 800424e:	e00e      	b.n	800426e <convertDataToBytes+0xb2>
		MiscPayload8[i] = buffer_to_char_union4.temp_char[i - 5];
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	3b05      	subs	r3, #5
 8004254:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004258:	4413      	add	r3, r2
 800425a:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
 800425e:	4a23      	ldr	r2, [pc, #140]	; (80042ec <convertDataToBytes+0x130>)
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	4413      	add	r3, r2
 8004264:	460a      	mov	r2, r1
 8004266:	701a      	strb	r2, [r3, #0]
	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union4;
	buffer_to_char_union4.temp_int_buffer = shaft_revs;
	for (int i = 5; i < 9; i++) {
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	3301      	adds	r3, #1
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	2b08      	cmp	r3, #8
 8004272:	dded      	ble.n	8004250 <convertDataToBytes+0x94>

	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union5;
	buffer_to_char_union5.temp_int_buffer = shaft_speed;
 8004274:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <convertDataToBytes+0x13c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60bb      	str	r3, [r7, #8]
	for (int i = 9; i < 13; i++) {
 800427a:	2309      	movs	r3, #9
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
 800427e:	e00e      	b.n	800429e <convertDataToBytes+0xe2>
		MiscPayload8[i] = buffer_to_char_union5.temp_char[i - 9];
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	3b09      	subs	r3, #9
 8004284:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004288:	4413      	add	r3, r2
 800428a:	f813 1c30 	ldrb.w	r1, [r3, #-48]
 800428e:	4a17      	ldr	r2, [pc, #92]	; (80042ec <convertDataToBytes+0x130>)
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	4413      	add	r3, r2
 8004294:	460a      	mov	r2, r1
 8004296:	701a      	strb	r2, [r3, #0]
	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union5;
	buffer_to_char_union5.temp_int_buffer = shaft_speed;
	for (int i = 9; i < 13; i++) {
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	3301      	adds	r3, #1
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	dded      	ble.n	8004280 <convertDataToBytes+0xc4>

	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union6;
	buffer_to_char_union6.temp_int_buffer = motorCurrent;
 80042a4:	4b15      	ldr	r3, [pc, #84]	; (80042fc <convertDataToBytes+0x140>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	607b      	str	r3, [r7, #4]
	for (int i = 13; i < 17; i++) {
 80042aa:	230d      	movs	r3, #13
 80042ac:	623b      	str	r3, [r7, #32]
 80042ae:	e00e      	b.n	80042ce <convertDataToBytes+0x112>
		MiscPayload8[i] = buffer_to_char_union6.temp_char[i - 13];
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	3b0d      	subs	r3, #13
 80042b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042b8:	4413      	add	r3, r2
 80042ba:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 80042be:	4a0b      	ldr	r2, [pc, #44]	; (80042ec <convertDataToBytes+0x130>)
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	4413      	add	r3, r2
 80042c4:	460a      	mov	r2, r1
 80042c6:	701a      	strb	r2, [r3, #0]
	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union6;
	buffer_to_char_union6.temp_int_buffer = motorCurrent;
	for (int i = 13; i < 17; i++) {
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	3301      	adds	r3, #1
 80042cc:	623b      	str	r3, [r7, #32]
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	dded      	ble.n	80042b0 <convertDataToBytes+0xf4>
		MiscPayload8[i] = buffer_to_char_union6.temp_char[i - 13];
	}
}
 80042d4:	bf00      	nop
 80042d6:	373c      	adds	r7, #60	; 0x3c
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	200005b4 	.word	0x200005b4
 80042e4:	20000608 	.word	0x20000608
 80042e8:	200005c0 	.word	0x200005c0
 80042ec:	200005dc 	.word	0x200005dc
 80042f0:	200005f0 	.word	0x200005f0
 80042f4:	20000444 	.word	0x20000444
 80042f8:	20000448 	.word	0x20000448
 80042fc:	200005ac 	.word	0x200005ac

08004300 <setUpPWM>:
 *  Created on: Oct 13, 2014
 *      Author: Callen Fisher
 */
#include "pwm.h"

void setUpPWM() {
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); //tim1 ch3 //PA10
 8004306:	2101      	movs	r1, #1
 8004308:	2004      	movs	r0, #4
 800430a:	f7fd fca3 	bl	8001c54 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800430e:	2101      	movs	r1, #1
 8004310:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004314:	f7fd fc9e 	bl	8001c54 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8004318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800431c:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800431e:	2303      	movs	r3, #3
 8004320:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004322:	2318      	movs	r3, #24
 8004324:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004326:	f107 031c 	add.w	r3, r7, #28
 800432a:	4619      	mov	r1, r3
 800432c:	481d      	ldr	r0, [pc, #116]	; (80043a4 <setUpPWM+0xa4>)
 800432e:	f7fd f85d 	bl	80013ec <GPIO_Init>

	//set up timer

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;

	TIM_TimeBaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8004332:	2300      	movs	r3, #0
 8004334:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8004336:	2300      	movs	r3, #0
 8004338:	827b      	strh	r3, [r7, #18]
//	TIM_TimeBaseStruct.TIM_Period = 40000; //makes it 100Hz
	TIM_TimeBaseStruct.TIM_Period = 40000; //makes it 100Hz
 800433a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800433e:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStruct.TIM_Prescaler = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	823b      	strh	r3, [r7, #16]
	TIM_TimeBaseStruct.TIM_RepetitionCounter = 0x0000;
 8004344:	2300      	movs	r3, #0
 8004346:	763b      	strb	r3, [r7, #24]

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStruct);
 8004348:	f107 0310 	add.w	r3, r7, #16
 800434c:	4619      	mov	r1, r3
 800434e:	4816      	ldr	r0, [pc, #88]	; (80043a8 <setUpPWM+0xa8>)
 8004350:	f7fd fdcc 	bl	8001eec <TIM_TimeBaseInit>

	TIM_OCInitTypeDef OC;

	OC.TIM_OCMode = TIM_OCMode_PWM1;
 8004354:	2360      	movs	r3, #96	; 0x60
 8004356:	803b      	strh	r3, [r7, #0]
	OC.TIM_OutputState = TIM_OutputState_Enable;
 8004358:	2301      	movs	r3, #1
 800435a:	807b      	strh	r3, [r7, #2]
//	OC.TIM_Pulse = 20000;
	OC.TIM_Pulse = 2000;
 800435c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004360:	80fb      	strh	r3, [r7, #6]
	OC.TIM_OCPolarity = TIM_OCPolarity_Low;
 8004362:	2302      	movs	r3, #2
 8004364:	813b      	strh	r3, [r7, #8]

	TIM_OC3Init(TIM1, &OC);
 8004366:	463b      	mov	r3, r7
 8004368:	4619      	mov	r1, r3
 800436a:	480f      	ldr	r0, [pc, #60]	; (80043a8 <setUpPWM+0xa8>)
 800436c:	f7fd fe3a 	bl	8001fe4 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8004370:	2108      	movs	r1, #8
 8004372:	480d      	ldr	r0, [pc, #52]	; (80043a8 <setUpPWM+0xa8>)
 8004374:	f7fd ff92 	bl	800229c <TIM_OC3PreloadConfig>

	TIM_ARRPreloadConfig(TIM1, DISABLE);
 8004378:	2100      	movs	r1, #0
 800437a:	480b      	ldr	r0, [pc, #44]	; (80043a8 <setUpPWM+0xa8>)
 800437c:	f7fd ff6e 	bl	800225c <TIM_ARRPreloadConfig>
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8004380:	2101      	movs	r1, #1
 8004382:	4809      	ldr	r0, [pc, #36]	; (80043a8 <setUpPWM+0xa8>)
 8004384:	f7fd fed4 	bl	8002130 <TIM_CtrlPWMOutputs>
	TIM_Cmd(TIM1, ENABLE);
 8004388:	2101      	movs	r1, #1
 800438a:	4807      	ldr	r0, [pc, #28]	; (80043a8 <setUpPWM+0xa8>)
 800438c:	f7fd feb0 	bl	80020f0 <TIM_Cmd>
//	TIM_SetCompare3(TIM1, 10000); //inversed//set compare sets the duty (val between 0 and 40 000 where 40000 is 0% and 0 is 100%
	TIM_SetCompare3(TIM1, 10000); //inversed//set compare sets the duty (val between 0 and 40 000 where 40000 is 0% and 0 is 100%
 8004390:	f242 7110 	movw	r1, #10000	; 0x2710
 8004394:	4804      	ldr	r0, [pc, #16]	; (80043a8 <setUpPWM+0xa8>)
 8004396:	f7fd ff9d 	bl	80022d4 <TIM_SetCompare3>

}
 800439a:	bf00      	nop
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40010800 	.word	0x40010800
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	00000000 	.word	0x00000000

080043b0 <setPWM>:

void setPWM(float* valPercentage) {
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	//40 000 is 0% and 0 is 100%
	if (*valPercentage > 100){
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4922      	ldr	r1, [pc, #136]	; (8004448 <setPWM+0x98>)
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc fcc6 	bl	8000d50 <__aeabi_fcmpgt>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <setPWM+0x20>
		*valPercentage = 100;	//prevent PWM going past 100% which just saturates
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <setPWM+0x98>)
 80043ce:	601a      	str	r2, [r3, #0]
	}
	float valPercentage2 = 100.0 - *valPercentage;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4619      	mov	r1, r3
 80043d6:	481c      	ldr	r0, [pc, #112]	; (8004448 <setPWM+0x98>)
 80043d8:	f7fc fb44 	bl	8000a64 <__aeabi_fsub>
 80043dc:	4603      	mov	r3, r0
 80043de:	60fb      	str	r3, [r7, #12]

	//valPercentage2 = valPercentage2 / 100.0 * 20000;
	valPercentage2 = 40000 - (valPercentage2 / 100.0 * 40000);
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f7fc f885 	bl	80004f0 <__aeabi_f2d>
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	4b18      	ldr	r3, [pc, #96]	; (800444c <setPWM+0x9c>)
 80043ec:	f7fc f9fe 	bl	80007ec <__aeabi_ddiv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	4618      	mov	r0, r3
 80043f6:	4621      	mov	r1, r4
 80043f8:	a311      	add	r3, pc, #68	; (adr r3, 8004440 <setPWM+0x90>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f7fc f8cb 	bl	8000598 <__aeabi_dmul>
 8004402:	4603      	mov	r3, r0
 8004404:	460c      	mov	r4, r1
 8004406:	461a      	mov	r2, r3
 8004408:	4623      	mov	r3, r4
 800440a:	a10d      	add	r1, pc, #52	; (adr r1, 8004440 <setPWM+0x90>)
 800440c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004410:	f7fb ff0e 	bl	8000230 <__aeabi_dsub>
 8004414:	4603      	mov	r3, r0
 8004416:	460c      	mov	r4, r1
 8004418:	4618      	mov	r0, r3
 800441a:	4621      	mov	r1, r4
 800441c:	f7fc face 	bl	80009bc <__aeabi_d2f>
 8004420:	4603      	mov	r3, r0
 8004422:	60fb      	str	r3, [r7, #12]
	uint16_t v = (uint16_t) valPercentage2;
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7fc fc9d 	bl	8000d64 <__aeabi_f2uiz>
 800442a:	4603      	mov	r3, r0
 800442c:	817b      	strh	r3, [r7, #10]
	TIM_SetCompare3(TIM1, v);
 800442e:	897b      	ldrh	r3, [r7, #10]
 8004430:	4619      	mov	r1, r3
 8004432:	4807      	ldr	r0, [pc, #28]	; (8004450 <setPWM+0xa0>)
 8004434:	f7fd ff4e 	bl	80022d4 <TIM_SetCompare3>
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	bd90      	pop	{r4, r7, pc}
 8004440:	00000000 	.word	0x00000000
 8004444:	40e38800 	.word	0x40e38800
 8004448:	42c80000 	.word	0x42c80000
 800444c:	40590000 	.word	0x40590000
 8004450:	40012c00 	.word	0x40012c00

08004454 <serialTerminal_Init>:
 *      Edited by: Roberto Aldera
 */
#include "serial_terminal.h"
#include "CRC.h"

void serialTerminal_Init(void) {
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
	initCRC();
 8004458:	f7fe fdb8 	bl	8002fcc <initCRC>
}
 800445c:	bf00      	nop
 800445e:	bd80      	pop	{r7, pc}

08004460 <serialTerminal_packetize>:

void serialTerminal_packetize(uint8_t* payload_to_packS1,
		uint8_t* payload_to_packS2, uint8_t* payload_to_packS3,
		uint8_t* payload_to_packS4, uint16_t length_of_payloadS1,
		uint16_t length_of_payloadS2, uint16_t length_of_payloadS3,
		uint16_t length_of_payloadS4) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b09a      	sub	sp, #104	; 0x68
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
	CommsTask_TransmitPacketStruct pkt_to_tx;
	uint16_t raw_data_pointer = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint16_t packet_data_pointer = 4;
 8004474:	2304      	movs	r3, #4
 8004476:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t crcCalculated;
	uint8_t char_to_pack;
	uint8_t a = 4;
 800447a:	2304      	movs	r3, #4
 800447c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	//put data
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS1;
 8004480:	2300      	movs	r3, #0
 8004482:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004486:	e054      	b.n	8004532 <serialTerminal_packetize+0xd2>
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
		char_to_pack = payload_to_packS1[raw_data_pointer];
 8004488:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		t[a] = char_to_pack;
 8004496:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800449a:	49e0      	ldr	r1, [pc, #896]	; (800481c <serialTerminal_packetize+0x3bc>)
 800449c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80044a0:	54ca      	strb	r2, [r1, r3]
		if (char_to_pack == 0x7E) {
 80044a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044a6:	2b7e      	cmp	r3, #126	; 0x7e
 80044a8:	d113      	bne.n	80044d2 <serialTerminal_packetize+0x72>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80044aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 80044b4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80044b8:	4413      	add	r3, r2
 80044ba:	227d      	movs	r2, #125	; 0x7d
 80044bc:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5E;
 80044c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044c4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80044c8:	4413      	add	r3, r2
 80044ca:	225e      	movs	r2, #94	; 0x5e
 80044cc:	f803 2c4c 	strb.w	r2, [r3, #-76]
 80044d0:	e020      	b.n	8004514 <serialTerminal_packetize+0xb4>
		} else if (char_to_pack == 0x7D) {
 80044d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044d6:	2b7d      	cmp	r3, #125	; 0x7d
 80044d8:	d113      	bne.n	8004502 <serialTerminal_packetize+0xa2>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80044da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 80044e4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80044e8:	4413      	add	r3, r2
 80044ea:	227d      	movs	r2, #125	; 0x7d
 80044ec:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
 80044f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044f4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80044f8:	4413      	add	r3, r2
 80044fa:	225d      	movs	r2, #93	; 0x5d
 80044fc:	f803 2c4c 	strb.w	r2, [r3, #-76]
 8004500:	e008      	b.n	8004514 <serialTerminal_packetize+0xb4>
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 8004502:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004506:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800450a:	4413      	add	r3, r2
 800450c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004510:	f803 2c4c 	strb.w	r2, [r3, #-76]
	uint16_t crcCalculated;
	uint8_t char_to_pack;
	uint8_t a = 4;
	//put data
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS1;
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
 8004514:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004518:	3301      	adds	r3, #1
 800451a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800451e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004522:	3301      	adds	r3, #1
 8004524:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004528:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800452c:	3301      	adds	r3, #1
 800452e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	uint16_t packet_data_pointer = 4;
	uint16_t crcCalculated;
	uint8_t char_to_pack;
	uint8_t a = 4;
	//put data
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS1;
 8004532:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004536:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800453a:	429a      	cmp	r2, r3
 800453c:	d3a4      	bcc.n	8004488 <serialTerminal_packetize+0x28>
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS2;
 800453e:	2300      	movs	r3, #0
 8004540:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004544:	e054      	b.n	80045f0 <serialTerminal_packetize+0x190>
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
		char_to_pack = payload_to_packS2[raw_data_pointer];
 8004546:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	4413      	add	r3, r2
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		t[a] = char_to_pack;
 8004554:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004558:	49b0      	ldr	r1, [pc, #704]	; (800481c <serialTerminal_packetize+0x3bc>)
 800455a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800455e:	54ca      	strb	r2, [r1, r3]
		if (char_to_pack == 0x7E) {
 8004560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004564:	2b7e      	cmp	r3, #126	; 0x7e
 8004566:	d113      	bne.n	8004590 <serialTerminal_packetize+0x130>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8004568:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 8004572:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004576:	4413      	add	r3, r2
 8004578:	227d      	movs	r2, #125	; 0x7d
 800457a:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5E;
 800457e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004582:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004586:	4413      	add	r3, r2
 8004588:	225e      	movs	r2, #94	; 0x5e
 800458a:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800458e:	e020      	b.n	80045d2 <serialTerminal_packetize+0x172>
		} else if (char_to_pack == 0x7D) {
 8004590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004594:	2b7d      	cmp	r3, #125	; 0x7d
 8004596:	d113      	bne.n	80045c0 <serialTerminal_packetize+0x160>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8004598:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 80045a2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80045a6:	4413      	add	r3, r2
 80045a8:	227d      	movs	r2, #125	; 0x7d
 80045aa:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
 80045ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045b2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80045b6:	4413      	add	r3, r2
 80045b8:	225d      	movs	r2, #93	; 0x5d
 80045ba:	f803 2c4c 	strb.w	r2, [r3, #-76]
 80045be:	e008      	b.n	80045d2 <serialTerminal_packetize+0x172>
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 80045c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045c4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80045c8:	4413      	add	r3, r2
 80045ca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80045ce:	f803 2c4c 	strb.w	r2, [r3, #-76]
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS2;
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
 80045d2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80045d6:	3301      	adds	r3, #1
 80045d8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80045dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045e0:	3301      	adds	r3, #1
 80045e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80045e6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80045ea:	3301      	adds	r3, #1
 80045ec:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS2;
 80045f0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80045f4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d3a4      	bcc.n	8004546 <serialTerminal_packetize+0xe6>
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS3;
 80045fc:	2300      	movs	r3, #0
 80045fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004602:	e054      	b.n	80046ae <serialTerminal_packetize+0x24e>
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
		char_to_pack = payload_to_packS3[raw_data_pointer];
 8004604:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		t[a] = char_to_pack;
 8004612:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004616:	4981      	ldr	r1, [pc, #516]	; (800481c <serialTerminal_packetize+0x3bc>)
 8004618:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800461c:	54ca      	strb	r2, [r1, r3]
		if (char_to_pack == 0x7E) {
 800461e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004622:	2b7e      	cmp	r3, #126	; 0x7e
 8004624:	d113      	bne.n	800464e <serialTerminal_packetize+0x1ee>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8004626:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 8004630:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004634:	4413      	add	r3, r2
 8004636:	227d      	movs	r2, #125	; 0x7d
 8004638:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5E;
 800463c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004640:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004644:	4413      	add	r3, r2
 8004646:	225e      	movs	r2, #94	; 0x5e
 8004648:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800464c:	e020      	b.n	8004690 <serialTerminal_packetize+0x230>
		} else if (char_to_pack == 0x7D) {
 800464e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004652:	2b7d      	cmp	r3, #125	; 0x7d
 8004654:	d113      	bne.n	800467e <serialTerminal_packetize+0x21e>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8004656:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 8004660:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004664:	4413      	add	r3, r2
 8004666:	227d      	movs	r2, #125	; 0x7d
 8004668:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
 800466c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004670:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004674:	4413      	add	r3, r2
 8004676:	225d      	movs	r2, #93	; 0x5d
 8004678:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800467c:	e008      	b.n	8004690 <serialTerminal_packetize+0x230>
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 800467e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004682:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004686:	4413      	add	r3, r2
 8004688:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800468c:	f803 2c4c 	strb.w	r2, [r3, #-76]
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS3;
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
 8004690:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004694:	3301      	adds	r3, #1
 8004696:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800469a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800469e:	3301      	adds	r3, #1
 80046a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80046a4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80046a8:	3301      	adds	r3, #1
 80046aa:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS3;
 80046ae:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80046b2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d3a4      	bcc.n	8004604 <serialTerminal_packetize+0x1a4>
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS4;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80046c0:	e054      	b.n	800476c <serialTerminal_packetize+0x30c>
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
		char_to_pack = payload_to_packS4[raw_data_pointer];
 80046c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		t[a] = char_to_pack;
 80046d0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80046d4:	4951      	ldr	r1, [pc, #324]	; (800481c <serialTerminal_packetize+0x3bc>)
 80046d6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80046da:	54ca      	strb	r2, [r1, r3]
		if (char_to_pack == 0x7E) {
 80046dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80046e0:	2b7e      	cmp	r3, #126	; 0x7e
 80046e2:	d113      	bne.n	800470c <serialTerminal_packetize+0x2ac>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80046e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 80046ee:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80046f2:	4413      	add	r3, r2
 80046f4:	227d      	movs	r2, #125	; 0x7d
 80046f6:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5E;
 80046fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046fe:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004702:	4413      	add	r3, r2
 8004704:	225e      	movs	r2, #94	; 0x5e
 8004706:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800470a:	e020      	b.n	800474e <serialTerminal_packetize+0x2ee>
		} else if (char_to_pack == 0x7D) {
 800470c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004710:	2b7d      	cmp	r3, #125	; 0x7d
 8004712:	d113      	bne.n	800473c <serialTerminal_packetize+0x2dc>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8004714:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 800471e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004722:	4413      	add	r3, r2
 8004724:	227d      	movs	r2, #125	; 0x7d
 8004726:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
 800472a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800472e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004732:	4413      	add	r3, r2
 8004734:	225d      	movs	r2, #93	; 0x5d
 8004736:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800473a:	e008      	b.n	800474e <serialTerminal_packetize+0x2ee>
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 800473c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004740:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004744:	4413      	add	r3, r2
 8004746:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800474a:	f803 2c4c 	strb.w	r2, [r3, #-76]
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS4;
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
 800474e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004752:	3301      	adds	r3, #1
 8004754:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004758:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800475c:	3301      	adds	r3, #1
 800475e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004762:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004766:	3301      	adds	r3, #1
 8004768:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS4;
 800476c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004770:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004774:	429a      	cmp	r2, r3
 8004776:	d3a4      	bcc.n	80046c2 <serialTerminal_packetize+0x262>
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	uint16_t l = a - 4;
 8004778:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b04      	subs	r3, #4
 8004780:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

	union {
		char temp_char[2];
		uint16_t temp_16;
	} buffer_to_char_union1;
	buffer_to_char_union1.temp_16 = 0x0101;
 8004784:	f240 1301 	movw	r3, #257	; 0x101
 8004788:	833b      	strh	r3, [r7, #24]

	pkt_to_tx.data[0] = buffer_to_char_union1.temp_char[0];
 800478a:	7e3b      	ldrb	r3, [r7, #24]
 800478c:	773b      	strb	r3, [r7, #28]
	pkt_to_tx.data[1] = buffer_to_char_union1.temp_char[1];
 800478e:	7e7b      	ldrb	r3, [r7, #25]
 8004790:	777b      	strb	r3, [r7, #29]
	t[0] = buffer_to_char_union1.temp_char[0];
 8004792:	7e3a      	ldrb	r2, [r7, #24]
 8004794:	4b21      	ldr	r3, [pc, #132]	; (800481c <serialTerminal_packetize+0x3bc>)
 8004796:	701a      	strb	r2, [r3, #0]
	t[1] = buffer_to_char_union1.temp_char[1];
 8004798:	7e7a      	ldrb	r2, [r7, #25]
 800479a:	4b20      	ldr	r3, [pc, #128]	; (800481c <serialTerminal_packetize+0x3bc>)
 800479c:	705a      	strb	r2, [r3, #1]
	union {
		char temp_char[2];
		uint16_t temp_16;
	} buffer_to_char_union2;
	buffer_to_char_union2.temp_16 = l;
 800479e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80047a2:	82bb      	strh	r3, [r7, #20]

	pkt_to_tx.data[2] = buffer_to_char_union2.temp_char[0];
 80047a4:	7d3b      	ldrb	r3, [r7, #20]
 80047a6:	77bb      	strb	r3, [r7, #30]
	pkt_to_tx.data[3] = buffer_to_char_union2.temp_char[1];
 80047a8:	7d7b      	ldrb	r3, [r7, #21]
 80047aa:	77fb      	strb	r3, [r7, #31]
	t[2] = buffer_to_char_union2.temp_char[0];
 80047ac:	7d3a      	ldrb	r2, [r7, #20]
 80047ae:	4b1b      	ldr	r3, [pc, #108]	; (800481c <serialTerminal_packetize+0x3bc>)
 80047b0:	709a      	strb	r2, [r3, #2]
	t[3] = buffer_to_char_union2.temp_char[1];
 80047b2:	7d7a      	ldrb	r2, [r7, #21]
 80047b4:	4b19      	ldr	r3, [pc, #100]	; (800481c <serialTerminal_packetize+0x3bc>)
 80047b6:	70da      	strb	r2, [r3, #3]
	//calculate CRC
	crcCalculated = (uint16_t) crcCalc(t, 0, a); //(uint16_t) crcCalc(pkt_to_tx.data, 4, packet_data_pointer-4);////////////////////COULD BE ERROR HERE
 80047b8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80047bc:	b29b      	uxth	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	2100      	movs	r1, #0
 80047c2:	4816      	ldr	r0, [pc, #88]	; (800481c <serialTerminal_packetize+0x3bc>)
 80047c4:	f7fe fc0e 	bl	8002fe4 <crcCalc>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	//put CRC
	for (raw_data_pointer = 0; raw_data_pointer < 2;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80047d4:	e04f      	b.n	8004876 <serialTerminal_packetize+0x416>
			raw_data_pointer++, packet_data_pointer++) {
		char_to_pack = (uint8_t) ((crcCalculated >> 8 * (1 - raw_data_pointer))
 80047d6:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80047da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80047de:	f1c3 0301 	rsb	r3, r3, #1
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	fa42 f303 	asr.w	r3, r2, r3
 80047e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				& 0x00FF);
		if (char_to_pack == 0x7E) {
 80047ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047f0:	2b7e      	cmp	r3, #126	; 0x7e
 80047f2:	d115      	bne.n	8004820 <serialTerminal_packetize+0x3c0>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80047f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 80047fe:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004802:	4413      	add	r3, r2
 8004804:	227d      	movs	r2, #125	; 0x7d
 8004806:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5E;
 800480a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800480e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004812:	4413      	add	r3, r2
 8004814:	225e      	movs	r2, #94	; 0x5e
 8004816:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800481a:	e022      	b.n	8004862 <serialTerminal_packetize+0x402>
 800481c:	20000458 	.word	0x20000458
		} else if (char_to_pack == 0x7D) {
 8004820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004824:	2b7d      	cmp	r3, #125	; 0x7d
 8004826:	d113      	bne.n	8004850 <serialTerminal_packetize+0x3f0>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8004828:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 8004832:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004836:	4413      	add	r3, r2
 8004838:	227d      	movs	r2, #125	; 0x7d
 800483a:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
 800483e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004842:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004846:	4413      	add	r3, r2
 8004848:	225d      	movs	r2, #93	; 0x5d
 800484a:	f803 2c4c 	strb.w	r2, [r3, #-76]
 800484e:	e008      	b.n	8004862 <serialTerminal_packetize+0x402>
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 8004850:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004854:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004858:	4413      	add	r3, r2
 800485a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800485e:	f803 2c4c 	strb.w	r2, [r3, #-76]
	//calculate CRC
	crcCalculated = (uint16_t) crcCalc(t, 0, a); //(uint16_t) crcCalc(pkt_to_tx.data, 4, packet_data_pointer-4);////////////////////COULD BE ERROR HERE

	//put CRC
	for (raw_data_pointer = 0; raw_data_pointer < 2;
			raw_data_pointer++, packet_data_pointer++) {
 8004862:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004866:	3301      	adds	r3, #1
 8004868:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800486c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004870:	3301      	adds	r3, #1
 8004872:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	t[3] = buffer_to_char_union2.temp_char[1];
	//calculate CRC
	crcCalculated = (uint16_t) crcCalc(t, 0, a); //(uint16_t) crcCalc(pkt_to_tx.data, 4, packet_data_pointer-4);////////////////////COULD BE ERROR HERE

	//put CRC
	for (raw_data_pointer = 0; raw_data_pointer < 2;
 8004876:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800487a:	2b01      	cmp	r3, #1
 800487c:	d9ab      	bls.n	80047d6 <serialTerminal_packetize+0x376>
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}

	//set pkt length
	pkt_to_tx.bytes_to_tx = packet_data_pointer + 2;
 800487e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004882:	3302      	adds	r3, #2
 8004884:	b29b      	uxth	r3, r3
 8004886:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	//convert this to the TX buffer array
	TxBuff[0] = 0x7E; //start character
 800488a:	4b1c      	ldr	r3, [pc, #112]	; (80048fc <serialTerminal_packetize+0x49c>)
 800488c:	227e      	movs	r2, #126	; 0x7e
 800488e:	701a      	strb	r2, [r3, #0]

	//add the data (has the CRC,length and opcode in it)
	int i;
	for (i = 1; i < pkt_to_tx.bytes_to_tx - 1; i++) {		//this was -1
 8004890:	2301      	movs	r3, #1
 8004892:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004894:	e00e      	b.n	80048b4 <serialTerminal_packetize+0x454>
		TxBuff[i] = pkt_to_tx.data[i - 1];
 8004896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004898:	3b01      	subs	r3, #1
 800489a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800489e:	4413      	add	r3, r2
 80048a0:	f813 1c4c 	ldrb.w	r1, [r3, #-76]
 80048a4:	4a15      	ldr	r2, [pc, #84]	; (80048fc <serialTerminal_packetize+0x49c>)
 80048a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a8:	4413      	add	r3, r2
 80048aa:	460a      	mov	r2, r1
 80048ac:	701a      	strb	r2, [r3, #0]
	//convert this to the TX buffer array
	TxBuff[0] = 0x7E; //start character

	//add the data (has the CRC,length and opcode in it)
	int i;
	for (i = 1; i < pkt_to_tx.bytes_to_tx - 1; i++) {		//this was -1
 80048ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b0:	3301      	adds	r3, #1
 80048b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048b8:	1e5a      	subs	r2, r3, #1
 80048ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048bc:	429a      	cmp	r2, r3
 80048be:	dcea      	bgt.n	8004896 <serialTerminal_packetize+0x436>
		TxBuff[i] = pkt_to_tx.data[i - 1];
	}
	//add the terminating character
	TxBuff[pkt_to_tx.bytes_to_tx - 1] = 0x7E; //was -1
 80048c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048c4:	3b01      	subs	r3, #1
 80048c6:	4a0d      	ldr	r2, [pc, #52]	; (80048fc <serialTerminal_packetize+0x49c>)
 80048c8:	217e      	movs	r1, #126	; 0x7e
 80048ca:	54d1      	strb	r1, [r2, r3]
	//TxBuff[7] = 35; 						//drops a # into the packet just for testing
	Tx_chars = pkt_to_tx.bytes_to_tx;		//does this line even get used?
 80048cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <serialTerminal_packetize+0x4a0>)
 80048d2:	801a      	strh	r2, [r3, #0]

	int p = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	65bb      	str	r3, [r7, #88]	; 0x58

	for (p = 0; p < sizeof(t); p++) {
 80048d8:	2300      	movs	r3, #0
 80048da:	65bb      	str	r3, [r7, #88]	; 0x58
 80048dc:	e007      	b.n	80048ee <serialTerminal_packetize+0x48e>

		t[p] = 0;
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <serialTerminal_packetize+0x4a4>)
 80048e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e2:	4413      	add	r3, r2
 80048e4:	2200      	movs	r2, #0
 80048e6:	701a      	strb	r2, [r3, #0]
	//TxBuff[7] = 35; 						//drops a # into the packet just for testing
	Tx_chars = pkt_to_tx.bytes_to_tx;		//does this line even get used?

	int p = 0;

	for (p = 0; p < sizeof(t); p++) {
 80048e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ea:	3301      	adds	r3, #1
 80048ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80048ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f0:	2b33      	cmp	r3, #51	; 0x33
 80048f2:	d9f4      	bls.n	80048de <serialTerminal_packetize+0x47e>

		t[p] = 0;
	}
}
 80048f4:	bf00      	nop
 80048f6:	3768      	adds	r7, #104	; 0x68
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000564 	.word	0x20000564
 8004900:	2000048c 	.word	0x2000048c
 8004904:	20000458 	.word	0x20000458

08004908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004940 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800490c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800490e:	e003      	b.n	8004918 <LoopCopyDataInit>

08004910 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8004912:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004914:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004916:	3104      	adds	r1, #4

08004918 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004918:	480b      	ldr	r0, [pc, #44]	; (8004948 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800491a:	4b0c      	ldr	r3, [pc, #48]	; (800494c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800491c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800491e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004920:	d3f6      	bcc.n	8004910 <CopyDataInit>
	ldr	r2, =_sbss
 8004922:	4a0b      	ldr	r2, [pc, #44]	; (8004950 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8004924:	e002      	b.n	800492c <LoopFillZerobss>

08004926 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004926:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004928:	f842 3b04 	str.w	r3, [r2], #4

0800492c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800492e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004930:	d3f9      	bcc.n	8004926 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004932:	f000 f841 	bl	80049b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004936:	f000 f8f9 	bl	8004b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800493a:	f7ff fb5d 	bl	8003ff8 <main>
	bx	lr
 800493e:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004940:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8004944:	08004b98 	.word	0x08004b98
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004948:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800494c:	20000014 	.word	0x20000014
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8004950:	20000014 	.word	0x20000014
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8004954:	20000644 	.word	0x20000644

08004958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004958:	e7fe      	b.n	8004958 <ADC1_2_IRQHandler>
	...

0800495c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
}
 8004960:	bf00      	nop
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800496c:	e7fe      	b.n	800496c <HardFault_Handler+0x4>
 800496e:	bf00      	nop

08004970 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8004974:	e7fe      	b.n	8004974 <MemManage_Handler+0x4>
 8004976:	bf00      	nop

08004978 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800497c:	e7fe      	b.n	800497c <BusFault_Handler+0x4>
 800497e:	bf00      	nop

08004980 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8004984:	e7fe      	b.n	8004984 <UsageFault_Handler+0x4>
 8004986:	bf00      	nop

08004988 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80049bc:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <SystemInit+0x5c>)
 80049be:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <SystemInit+0x5c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80049c8:	4912      	ldr	r1, [pc, #72]	; (8004a14 <SystemInit+0x5c>)
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <SystemInit+0x5c>)
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <SystemInit+0x60>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80049d4:	4a0f      	ldr	r2, [pc, #60]	; (8004a14 <SystemInit+0x5c>)
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <SystemInit+0x5c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80049de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80049e4:	4a0b      	ldr	r2, [pc, #44]	; (8004a14 <SystemInit+0x5c>)
 80049e6:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <SystemInit+0x5c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80049f0:	4a08      	ldr	r2, [pc, #32]	; (8004a14 <SystemInit+0x5c>)
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <SystemInit+0x5c>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80049fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <SystemInit+0x5c>)
 80049fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004a02:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8004a04:	f000 f80c 	bl	8004a20 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004a08:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <SystemInit+0x64>)
 8004a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a0e:	609a      	str	r2, [r3, #8]
#endif 
}
 8004a10:	bf00      	nop
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021000 	.word	0x40021000
 8004a18:	f8ff0000 	.word	0xf8ff0000
 8004a1c:	e000ed00 	.word	0xe000ed00

08004a20 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8004a24:	f000 f802 	bl	8004a2c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	2300      	movs	r3, #0
 8004a38:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004a3a:	4a3a      	ldr	r2, [pc, #232]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004a3c:	4b39      	ldr	r3, [pc, #228]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004a46:	4b37      	ldr	r3, [pc, #220]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3301      	adds	r3, #1
 8004a54:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d103      	bne.n	8004a64 <SetSysClockTo72+0x38>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004a62:	d1f0      	bne.n	8004a46 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004a64:	4b2f      	ldr	r3, [pc, #188]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004a70:	2301      	movs	r3, #1
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	e001      	b.n	8004a7a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004a76:	2300      	movs	r3, #0
 8004a78:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d14b      	bne.n	8004b18 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8004a80:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <SetSysClockTo72+0xfc>)
 8004a82:	4b29      	ldr	r3, [pc, #164]	; (8004b28 <SetSysClockTo72+0xfc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f043 0310 	orr.w	r3, r3, #16
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8004a8c:	4a26      	ldr	r2, [pc, #152]	; (8004b28 <SetSysClockTo72+0xfc>)
 8004a8e:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <SetSysClockTo72+0xfc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 0303 	bic.w	r3, r3, #3
 8004a96:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <SetSysClockTo72+0xfc>)
 8004a9a:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <SetSysClockTo72+0xfc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f043 0302 	orr.w	r3, r3, #2
 8004aa2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004aa4:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004aa6:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8004aac:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004abe:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8004ac0:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004ac2:	4b18      	ldr	r3, [pc, #96]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004aca:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8004acc:	4a15      	ldr	r2, [pc, #84]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8004ad6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004ad8:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004ae4:	bf00      	nop
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f9      	beq.n	8004ae6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004af2:	4a0c      	ldr	r2, [pc, #48]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 0303 	bic.w	r3, r3, #3
 8004afc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8004afe:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8004b0a:	bf00      	nop
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <SetSysClockTo72+0xf8>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d1f9      	bne.n	8004b0c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000
 8004b28:	40022000 	.word	0x40022000

08004b2c <__libc_init_array>:
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <__libc_init_array+0x3c>)
 8004b2e:	b570      	push	{r4, r5, r6, lr}
 8004b30:	461e      	mov	r6, r3
 8004b32:	4c0e      	ldr	r4, [pc, #56]	; (8004b6c <__libc_init_array+0x40>)
 8004b34:	2500      	movs	r5, #0
 8004b36:	1ae4      	subs	r4, r4, r3
 8004b38:	10a4      	asrs	r4, r4, #2
 8004b3a:	42a5      	cmp	r5, r4
 8004b3c:	d004      	beq.n	8004b48 <__libc_init_array+0x1c>
 8004b3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b42:	4798      	blx	r3
 8004b44:	3501      	adds	r5, #1
 8004b46:	e7f8      	b.n	8004b3a <__libc_init_array+0xe>
 8004b48:	f000 f816 	bl	8004b78 <_init>
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <__libc_init_array+0x44>)
 8004b4e:	4c09      	ldr	r4, [pc, #36]	; (8004b74 <__libc_init_array+0x48>)
 8004b50:	461e      	mov	r6, r3
 8004b52:	1ae4      	subs	r4, r4, r3
 8004b54:	10a4      	asrs	r4, r4, #2
 8004b56:	2500      	movs	r5, #0
 8004b58:	42a5      	cmp	r5, r4
 8004b5a:	d004      	beq.n	8004b66 <__libc_init_array+0x3a>
 8004b5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b60:	4798      	blx	r3
 8004b62:	3501      	adds	r5, #1
 8004b64:	e7f8      	b.n	8004b58 <__libc_init_array+0x2c>
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
 8004b68:	08004b90 	.word	0x08004b90
 8004b6c:	08004b90 	.word	0x08004b90
 8004b70:	08004b90 	.word	0x08004b90
 8004b74:	08004b94 	.word	0x08004b94

08004b78 <_init>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	bf00      	nop
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr

08004b84 <_fini>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	bf00      	nop
 8004b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8a:	bc08      	pop	{r3}
 8004b8c:	469e      	mov	lr, r3
 8004b8e:	4770      	bx	lr
