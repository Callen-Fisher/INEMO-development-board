
C:\Users\rober\Documents\cheetah_inemo\INEMO_code\Debug\inemoUCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08003ea8  08003ea8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08003eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000628  20000014  08003ec4  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  2000063c  08003ec4  0002063c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009ab0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e01  00000000  00000000  00029aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ce8  00000000  00000000  0002b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b80  00000000  00000000  0002c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004e0c  00000000  00000000  0002d158  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000036de  00000000  00000000  00031f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00035642  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000352c  00000000  00000000  000356c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00038bec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000014 	.word	0x20000014
 8000204:	00000000 	.word	0x00000000
 8000208:	08003e90 	.word	0x08003e90

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000018 	.word	0x20000018
 8000224:	08003e90 	.word	0x08003e90

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f092 0f00 	teq	r2, #0
 8000512:	bf14      	ite	ne
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e720      	b.n	800036c <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aedc 	beq.w	800031a <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6c1      	b.n	800031a <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	78db      	ldrb	r3, [r3, #3]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d03a      	beq.n	8000aee <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a78:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <NVIC_Init+0xbc>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f1c3 0304 	rsb	r3, r3, #4
 8000a8c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa22 f303 	lsr.w	r3, r2, r3
 8000a96:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	785b      	ldrb	r3, [r3, #1]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	789b      	ldrb	r3, [r3, #2]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000abc:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <NVIC_Init+0xc0>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	6979      	ldr	r1, [r7, #20]
 8000ac4:	b2c9      	uxtb	r1, r1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	460a      	mov	r2, r1
 8000aca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ace:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <NVIC_Init+0xc0>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	095b      	lsrs	r3, r3, #5
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f003 031f 	and.w	r3, r3, #31
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ae8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000aec:	e00f      	b.n	8000b0e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000aee:	490b      	ldr	r1, [pc, #44]	; (8000b1c <NVIC_Init+0xc0>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	095b      	lsrs	r3, r3, #5
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	f003 031f 	and.w	r3, r3, #31
 8000b02:	2201      	movs	r2, #1
 8000b04:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b06:	f100 0320 	add.w	r3, r0, #32
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b0e:	bf00      	nop
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b42:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	791b      	ldrb	r3, [r3, #4]
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <ADC_Init+0xa0>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	005b      	lsls	r3, r3, #1
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000b94:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	7c1b      	ldrb	r3, [r3, #16]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	7afb      	ldrb	r3, [r7, #11]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8000ba4:	7afb      	ldrb	r3, [r7, #11]
 8000ba6:	051b      	lsls	r3, r3, #20
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	fff1f7fd 	.word	0xfff1f7fd

08000bc4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f043 0201 	orr.w	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8000be2:	e005      	b.n	8000bf0 <ADC_Cmd+0x2c>
    ADCx->CR2 |= CR2_ADON_Set;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f023 0201 	bic.w	r2, r3, #1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	609a      	str	r2, [r3, #8]
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000c10:	887b      	ldrh	r3, [r7, #2]
 8000c12:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d006      	beq.n	8000c28 <ADC_ITConfig+0x2c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	431a      	orrs	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 8000c26:	e006      	b.n	8000c36 <ADC_ITConfig+0x3a>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	401a      	ands	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	605a      	str	r2, [r3, #4]
  }
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f043 0208 	orr.w	r2, r3, #8
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	609a      	str	r2, [r3, #8]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 0308 	and.w	r3, r3, #8
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73fb      	strb	r3, [r7, #15]
 8000c7c:	e001      	b.n	8000c82 <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f043 0204 	orr.w	r2, r3, #4
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e001      	b.n	8000cd2 <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 8000cfe:	e005      	b.n	8000d0c <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	4608      	mov	r0, r1
 8000d22:	4611      	mov	r1, r2
 8000d24:	461a      	mov	r2, r3
 8000d26:	4603      	mov	r3, r0
 8000d28:	70fb      	strb	r3, [r7, #3]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	70bb      	strb	r3, [r7, #2]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	2b09      	cmp	r3, #9
 8000d3e:	d923      	bls.n	8000d88 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8000d46:	78fb      	ldrb	r3, [r7, #3]
 8000d48:	f1a3 020a 	sub.w	r2, r3, #10
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	2207      	movs	r2, #7
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000d64:	7879      	ldrb	r1, [r7, #1]
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	f1a3 020a 	sub.w	r2, r3, #10
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	e01e      	b.n	8000dc6 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000d8e:	78fa      	ldrb	r2, [r7, #3]
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	2207      	movs	r2, #7
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000da8:	7879      	ldrb	r1, [r7, #1]
 8000daa:	78fa      	ldrb	r2, [r7, #3]
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000dc6:	78bb      	ldrb	r3, [r7, #2]
 8000dc8:	2b06      	cmp	r3, #6
 8000dca:	d821      	bhi.n	8000e10 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8000dd2:	78bb      	ldrb	r3, [r7, #2]
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	221f      	movs	r2, #31
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4013      	ands	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000dee:	78f9      	ldrb	r1, [r7, #3]
 8000df0:	78bb      	ldrb	r3, [r7, #2]
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000e0e:	e047      	b.n	8000ea0 <ADC_RegularChannelConfig+0x188>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000e10:	78bb      	ldrb	r3, [r7, #2]
 8000e12:	2b0c      	cmp	r3, #12
 8000e14:	d821      	bhi.n	8000e5a <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8000e1c:	78bb      	ldrb	r3, [r7, #2]
 8000e1e:	1fda      	subs	r2, r3, #7
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	221f      	movs	r2, #31
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000e38:	78f9      	ldrb	r1, [r7, #3]
 8000e3a:	78bb      	ldrb	r3, [r7, #2]
 8000e3c:	1fda      	subs	r2, r3, #7
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	631a      	str	r2, [r3, #48]	; 0x30
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000e58:	e022      	b.n	8000ea0 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8000e60:	78bb      	ldrb	r3, [r7, #2]
 8000e62:	f1a3 020d 	sub.w	r2, r3, #13
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	221f      	movs	r2, #31
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000e7e:	78f9      	ldrb	r1, [r7, #3]
 8000e80:	78bb      	ldrb	r3, [r7, #2]
 8000e82:	f1a3 020d 	sub.w	r2, r3, #13
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	b29b      	uxth	r3, r3
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8000ed4:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <ADC_TempSensorVrefintCmd+0x34>)
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <ADC_TempSensorVrefintCmd+0x34>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ede:	6093      	str	r3, [r2, #8]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
  }
}
 8000ee0:	e005      	b.n	8000eee <ADC_TempSensorVrefintCmd+0x2a>
    ADC1->CR2 |= CR2_TSVREFE_Set;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <ADC_TempSensorVrefintCmd+0x34>)
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <ADC_TempSensorVrefintCmd+0x34>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000eec:	6093      	str	r3, [r2, #8]
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40012400 	.word	0x40012400

08000efc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f1a:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000f2a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f36:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f42:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60da      	str	r2, [r3, #12]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000fea:	e006      	b.n	8000ffa <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.                 
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8001010:	887a      	ldrh	r2, [r7, #2]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	605a      	str	r2, [r3, #4]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <DMA_GetITStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <DMA_GetITStatus+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	e002      	b.n	8001048 <DMA_GetITStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <DMA_GetITStatus+0x4c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4013      	ands	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <DMA_GetITStatus+0x38>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 8001052:	2301      	movs	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	e001      	b.n	800105c <DMA_GetITStatus+0x3c>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40020400 	.word	0x40020400
 800106c:	40020000 	.word	0x40020000

08001070 <DMA_ClearITPendingBit>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 8001082:	4a06      	ldr	r2, [pc, #24]	; (800109c <DMA_ClearITPendingBit+0x2c>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
  }
}
 8001088:	e002      	b.n	8001090 <DMA_ClearITPendingBit+0x20>
    DMA2->IFCR = DMAy_IT;
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <DMA_ClearITPendingBit+0x30>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6053      	str	r3, [r2, #4]
  }
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020000 	.word	0x40020000

080010a4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	78db      	ldrb	r3, [r3, #3]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	78db      	ldrb	r3, [r3, #3]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	789b      	ldrb	r3, [r3, #2]
 80010e0:	461a      	mov	r2, r3
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d044      	beq.n	800117c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	e038      	b.n	8001170 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80010fe:	2201      	movs	r2, #1
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d126      	bne.n	800116a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001122:	220f      	movs	r2, #15
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	43db      	mvns	r3, r3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4013      	ands	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4313      	orrs	r3, r2
 8001142:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	78db      	ldrb	r3, [r3, #3]
 8001148:	2b28      	cmp	r3, #40	; 0x28
 800114a:	d105      	bne.n	8001158 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800114c:	2201      	movs	r2, #1
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	409a      	lsls	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	615a      	str	r2, [r3, #20]
 8001156:	e008      	b.n	800116a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	78db      	ldrb	r3, [r3, #3]
 800115c:	2b48      	cmp	r3, #72	; 0x48
 800115e:	d104      	bne.n	800116a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001160:	2201      	movs	r2, #1
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	409a      	lsls	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	3301      	adds	r3, #1
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2b07      	cmp	r3, #7
 8001174:	d9c3      	bls.n	80010fe <GPIO_Init+0x5a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	2bff      	cmp	r3, #255	; 0xff
 8001182:	d946      	bls.n	8001212 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	e03a      	b.n	8001206 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	3308      	adds	r3, #8
 8001194:	2201      	movs	r2, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d127      	bne.n	8001200 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80011b6:	220f      	movs	r2, #15
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4013      	ands	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	78db      	ldrb	r3, [r3, #3]
 80011dc:	2b28      	cmp	r3, #40	; 0x28
 80011de:	d105      	bne.n	80011ec <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	3308      	adds	r3, #8
 80011e4:	2201      	movs	r2, #1
 80011e6:	409a      	lsls	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	78db      	ldrb	r3, [r3, #3]
 80011f0:	2b48      	cmp	r3, #72	; 0x48
 80011f2:	d105      	bne.n	8001200 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	3308      	adds	r3, #8
 80011f8:	2201      	movs	r2, #1
 80011fa:	409a      	lsls	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	3301      	adds	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b07      	cmp	r3, #7
 800120a:	d9c1      	bls.n	8001190 <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	605a      	str	r2, [r3, #4]
  }
}
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001228:	887a      	ldrh	r2, [r7, #2]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	611a      	str	r2, [r3, #16]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	615a      	str	r2, [r3, #20]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	da03      	bge.n	800127e <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <GPIO_PinRemapConfig+0xdc>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e002      	b.n	8001284 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <GPIO_PinRemapConfig+0xdc>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	0c1b      	lsrs	r3, r3, #16
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	b29b      	uxth	r3, r3
 8001292:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800129a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800129e:	d10a      	bne.n	80012b6 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80012a6:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <GPIO_PinRemapConfig+0xdc>)
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <GPIO_PinRemapConfig+0xdc>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80012b2:	6053      	str	r3, [r2, #4]
 80012b4:	e021      	b.n	80012fa <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00e      	beq.n	80012de <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80012c0:	2203      	movs	r2, #3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4013      	ands	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e00d      	b.n	80012fa <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	0d5b      	lsrs	r3, r3, #21
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	4013      	ands	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80012f8:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	0d5b      	lsrs	r3, r3, #21
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	4313      	orrs	r3, r2
 8001310:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	da03      	bge.n	8001320 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8001318:	4a05      	ldr	r2, [pc, #20]	; (8001330 <GPIO_PinRemapConfig+0xdc>)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 800131e:	e002      	b.n	8001326 <GPIO_PinRemapConfig+0xd2>
  {
    AFIO->MAPR2 = tmpreg;
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8001320:	4a03      	ldr	r2, [pc, #12]	; (8001330 <GPIO_PinRemapConfig+0xdc>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	6053      	str	r3, [r2, #4]
  }  
}
 8001326:	bf00      	nop
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	40010000 	.word	0x40010000

08001334 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <I2C_DeInit+0x44>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d10a      	bne.n	800135a <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001344:	2101      	movs	r1, #1
 8001346:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800134a:	f000 fb1f 	bl	800198c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 800134e:	2100      	movs	r1, #0
 8001350:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001354:	f000 fb1a 	bl	800198c <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 8001358:	e009      	b.n	800136e <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800135a:	2101      	movs	r1, #1
 800135c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001360:	f000 fb14 	bl	800198c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8001364:	2100      	movs	r1, #0
 8001366:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800136a:	f000 fb0f 	bl	800198c <RCC_APB1PeriphResetCmd>
  }
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40005400 	.word	0x40005400

0800137c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	84fb      	strh	r3, [r7, #38]	; 0x26
 800138a:	2300      	movs	r3, #0
 800138c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800138e:	2304      	movs	r3, #4
 8001390:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8001392:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <I2C_Init+0x174>)
 8001394:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	889b      	ldrh	r3, [r3, #4]
 800139a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 800139c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800139e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f9c7 	bl	800173c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <I2C_Init+0x178>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80013be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80013c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013c2:	4313      	orrs	r3, r2
 80013c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80013ca:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a44      	ldr	r2, [pc, #272]	; (80014f8 <I2C_Init+0x17c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d815      	bhi.n	8001416 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80013f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d801      	bhi.n	8001402 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80013fe:	2304      	movs	r3, #4
 8001400:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001402:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001406:	4313      	orrs	r3, r2
 8001408:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800140a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800140c:	3301      	adds	r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	841a      	strh	r2, [r3, #32]
 8001414:	e040      	b.n	8001498 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	88db      	ldrh	r3, [r3, #6]
 800141a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800141e:	4293      	cmp	r3, r2
 8001420:	d109      	bne.n	8001436 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001434:	e00e      	b.n	8001454 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	009a      	lsls	r2, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800144c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800144e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001452:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8001454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d103      	bne.n	8001466 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800145e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8001466:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001468:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800146a:	4313      	orrs	r3, r2
 800146c:	b29b      	uxth	r3, r3
 800146e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001476:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001478:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800147a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <I2C_Init+0x180>)
 8001484:	fb82 1203 	smull	r1, r2, r2, r3
 8001488:	1192      	asrs	r2, r2, #6
 800148a:	17db      	asrs	r3, r3, #31
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	b29b      	uxth	r3, r3
 8001490:	3301      	adds	r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800149c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80014b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014b6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80014ba:	f023 0302 	bic.w	r3, r3, #2
 80014be:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	889a      	ldrh	r2, [r3, #4]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	895b      	ldrh	r3, [r3, #10]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ce:	4313      	orrs	r3, r2
 80014d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80014d6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	899a      	ldrh	r2, [r3, #12]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	891b      	ldrh	r3, [r3, #8]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	811a      	strh	r2, [r3, #8]
}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	007a1200 	.word	0x007a1200
 80014f4:	431bde83 	.word	0x431bde83
 80014f8:	000186a0 	.word	0x000186a0
 80014fc:	10624dd3 	.word	0x10624dd3

08001500 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8001522:	e007      	b.n	8001534 <I2C_Cmd+0x34>
    I2Cx->CR1 |= CR1_PE_Set;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	f023 0301 	bic.w	r3, r3, #1
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	801a      	strh	r2, [r3, #0]
  }
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop

08001540 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	b29a      	uxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8001562:	e007      	b.n	8001574 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= CR1_START_Set;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	801a      	strh	r2, [r3, #0]
  }
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d008      	beq.n	80015a4 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159c:	b29a      	uxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 80015a2:	e007      	b.n	80015b4 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= CR1_STOP_Set;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	801a      	strh	r2, [r3, #0]
  }
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop

080015c0 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d008      	beq.n	80015e4 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015dc:	b29a      	uxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 80015e2:	e007      	b.n	80015f4 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= CR1_ACK_Set;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	801a      	strh	r2, [r3, #0]
  }
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	821a      	strh	r2, [r3, #16]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop

08001620 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	8a1b      	ldrh	r3, [r3, #16]
 800162c:	b29b      	uxth	r3, r3
 800162e:	b2db      	uxtb	r3, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop

0800163c <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
 8001648:	4613      	mov	r3, r2
 800164a:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800164c:	78bb      	ldrb	r3, [r7, #2]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	70fb      	strb	r3, [r7, #3]
 800165a:	e003      	b.n	8001664 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	821a      	strh	r2, [r3, #16]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop

08001678 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	8a9b      	ldrh	r3, [r3, #20]
 8001696:	b29b      	uxth	r3, r3
 8001698:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	8b1b      	ldrh	r3, [r3, #24]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016b2:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	401a      	ands	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d102      	bne.n	80016c6 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80016c0:	2301      	movs	r3, #1
 80016c2:	75fb      	strb	r3, [r7, #23]
 80016c4:	e001      	b.n	80016ca <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	0f1b      	lsrs	r3, r3, #28
 80016f6:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016fe:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3314      	adds	r3, #20
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e005      	b.n	800171a <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	0c1b      	lsrs	r3, r3, #16
 8001712:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3318      	adds	r3, #24
 8001718:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
 800172a:	e001      	b.n	8001730 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001730:	7dfb      	ldrb	r3, [r7, #23]
}
 8001732:	4618      	mov	r0, r3
 8001734:	371c      	adds	r7, #28
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001754:	4b4c      	ldr	r3, [pc, #304]	; (8001888 <RCC_GetClocksFreq+0x14c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d007      	beq.n	8001774 <RCC_GetClocksFreq+0x38>
 8001764:	2b08      	cmp	r3, #8
 8001766:	d009      	beq.n	800177c <RCC_GetClocksFreq+0x40>
 8001768:	2b00      	cmp	r3, #0
 800176a:	d133      	bne.n	80017d4 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a47      	ldr	r2, [pc, #284]	; (800188c <RCC_GetClocksFreq+0x150>)
 8001770:	601a      	str	r2, [r3, #0]
      break;
 8001772:	e033      	b.n	80017dc <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a45      	ldr	r2, [pc, #276]	; (800188c <RCC_GetClocksFreq+0x150>)
 8001778:	601a      	str	r2, [r3, #0]
      break;
 800177a:	e02f      	b.n	80017dc <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800177c:	4b42      	ldr	r3, [pc, #264]	; (8001888 <RCC_GetClocksFreq+0x14c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001784:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001786:	4b40      	ldr	r3, [pc, #256]	; (8001888 <RCC_GetClocksFreq+0x14c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	3302      	adds	r3, #2
 8001796:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <RCC_GetClocksFreq+0x154>)
 80017a2:	fb02 f203 	mul.w	r2, r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80017aa:	e017      	b.n	80017dc <RCC_GetClocksFreq+0xa0>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80017ac:	4b36      	ldr	r3, [pc, #216]	; (8001888 <RCC_GetClocksFreq+0x14c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4a35      	ldr	r2, [pc, #212]	; (8001890 <RCC_GetClocksFreq+0x154>)
 80017bc:	fb02 f203 	mul.w	r2, r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80017c4:	e00a      	b.n	80017dc <RCC_GetClocksFreq+0xa0>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4a30      	ldr	r2, [pc, #192]	; (800188c <RCC_GetClocksFreq+0x150>)
 80017ca:	fb02 f203 	mul.w	r2, r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80017d2:	e003      	b.n	80017dc <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a2d      	ldr	r2, [pc, #180]	; (800188c <RCC_GetClocksFreq+0x150>)
 80017d8:	601a      	str	r2, [r3, #0]
      break;
 80017da:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <RCC_GetClocksFreq+0x14c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017e4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80017ec:	4a29      	ldr	r2, [pc, #164]	; (8001894 <RCC_GetClocksFreq+0x158>)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	4413      	add	r3, r2
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	40da      	lsrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <RCC_GetClocksFreq+0x14c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800180c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001814:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <RCC_GetClocksFreq+0x158>)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	40da      	lsrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <RCC_GetClocksFreq+0x14c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001834:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	0adb      	lsrs	r3, r3, #11
 800183a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800183c:	4a15      	ldr	r2, [pc, #84]	; (8001894 <RCC_GetClocksFreq+0x158>)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	4413      	add	r3, r2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	40da      	lsrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <RCC_GetClocksFreq+0x14c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800185c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	0b9b      	lsrs	r3, r3, #14
 8001862:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001864:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <RCC_GetClocksFreq+0x15c>)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	4413      	add	r3, r2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	fbb2 f2f3 	udiv	r2, r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]
}
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40021000 	.word	0x40021000
 800188c:	007a1200 	.word	0x007a1200
 8001890:	003d0900 	.word	0x003d0900
 8001894:	20000000 	.word	0x20000000
 8001898:	20000010 	.word	0x20000010

0800189c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80018ae:	4909      	ldr	r1, [pc, #36]	; (80018d4 <RCC_AHBPeriphClockCmd+0x38>)
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <RCC_AHBPeriphClockCmd+0x38>)
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80018ba:	e006      	b.n	80018ca <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80018bc:	4905      	ldr	r1, [pc, #20]	; (80018d4 <RCC_AHBPeriphClockCmd+0x38>)
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <RCC_AHBPeriphClockCmd+0x38>)
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4013      	ands	r3, r2
 80018c8:	614b      	str	r3, [r1, #20]
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000

080018d8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80018ea:	4909      	ldr	r1, [pc, #36]	; (8001910 <RCC_APB2PeriphClockCmd+0x38>)
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <RCC_APB2PeriphClockCmd+0x38>)
 80018ee:	699a      	ldr	r2, [r3, #24]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80018f6:	e006      	b.n	8001906 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80018f8:	4905      	ldr	r1, [pc, #20]	; (8001910 <RCC_APB2PeriphClockCmd+0x38>)
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <RCC_APB2PeriphClockCmd+0x38>)
 80018fc:	699a      	ldr	r2, [r3, #24]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	43db      	mvns	r3, r3
 8001902:	4013      	ands	r3, r2
 8001904:	618b      	str	r3, [r1, #24]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000

08001914 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001926:	4909      	ldr	r1, [pc, #36]	; (800194c <RCC_APB1PeriphClockCmd+0x38>)
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <RCC_APB1PeriphClockCmd+0x38>)
 800192a:	69da      	ldr	r2, [r3, #28]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4313      	orrs	r3, r2
 8001930:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001932:	e006      	b.n	8001942 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001934:	4905      	ldr	r1, [pc, #20]	; (800194c <RCC_APB1PeriphClockCmd+0x38>)
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <RCC_APB1PeriphClockCmd+0x38>)
 8001938:	69da      	ldr	r2, [r3, #28]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	43db      	mvns	r3, r3
 800193e:	4013      	ands	r3, r2
 8001940:	61cb      	str	r3, [r1, #28]
  }
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000

08001950 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d006      	beq.n	8001970 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001962:	4909      	ldr	r1, [pc, #36]	; (8001988 <RCC_APB2PeriphResetCmd+0x38>)
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <RCC_APB2PeriphResetCmd+0x38>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800196e:	e006      	b.n	800197e <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001970:	4905      	ldr	r1, [pc, #20]	; (8001988 <RCC_APB2PeriphResetCmd+0x38>)
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <RCC_APB2PeriphResetCmd+0x38>)
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	43db      	mvns	r3, r3
 800197a:	4013      	ands	r3, r2
 800197c:	60cb      	str	r3, [r1, #12]
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000

0800198c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800199e:	4909      	ldr	r1, [pc, #36]	; (80019c4 <RCC_APB1PeriphResetCmd+0x38>)
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <RCC_APB1PeriphResetCmd+0x38>)
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80019aa:	e006      	b.n	80019ba <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80019ac:	4905      	ldr	r1, [pc, #20]	; (80019c4 <RCC_APB1PeriphResetCmd+0x38>)
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <RCC_APB1PeriphResetCmd+0x38>)
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4013      	ands	r3, r2
 80019b8:	610b      	str	r3, [r1, #16]
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000

080019c8 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <SPI_I2S_DeInit+0x68>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d10a      	bne.n	80019ee <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80019d8:	2101      	movs	r1, #1
 80019da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019de:	f7ff ffb7 	bl	8001950 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80019e2:	2100      	movs	r1, #0
 80019e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019e8:	f7ff ffb2 	bl	8001950 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 80019ec:	e01c      	b.n	8001a28 <SPI_I2S_DeInit+0x60>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <SPI_I2S_DeInit+0x6c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d10a      	bne.n	8001a0c <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80019f6:	2101      	movs	r1, #1
 80019f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019fc:	f7ff ffc6 	bl	800198c <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001a00:	2100      	movs	r1, #0
 8001a02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a06:	f7ff ffc1 	bl	800198c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001a0a:	e00d      	b.n	8001a28 <SPI_I2S_DeInit+0x60>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else
  {
    if (SPIx == SPI3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <SPI_I2S_DeInit+0x70>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d109      	bne.n	8001a28 <SPI_I2S_DeInit+0x60>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001a14:	2101      	movs	r1, #1
 8001a16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a1a:	f7ff ffb7 	bl	800198c <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a24:	f7ff ffb2 	bl	800198c <RCC_APB1PeriphResetCmd>
    }
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40013000 	.word	0x40013000
 8001a34:	40003800 	.word	0x40003800
 8001a38:	40003c00 	.word	0x40003c00

08001a3c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001a50:	89fb      	ldrh	r3, [r7, #14]
 8001a52:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001a56:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	881a      	ldrh	r2, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	885b      	ldrh	r3, [r3, #2]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	89fb      	ldrh	r3, [r7, #14]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	89fa      	ldrh	r2, [r7, #14]
 8001a9e:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	8b9b      	ldrh	r3, [r3, #28]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	8a1a      	ldrh	r2, [r3, #16]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	821a      	strh	r2, [r3, #16]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop

08001ac4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d008      	beq.n	8001ae8 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001ae6:	e007      	b.n	8001af8 <SPI_Cmd+0x34>
    SPIx->CR1 |= CR1_SPE_Set;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	801a      	strh	r2, [r3, #0]
  }
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop

08001b04 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	819a      	strh	r2, [r3, #12]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	899b      	ldrh	r3, [r3, #12]
 8001b2c:	b29b      	uxth	r3, r3
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	891b      	ldrh	r3, [r3, #8]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	4013      	ands	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop

08001b70 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a2e      	ldr	r2, [pc, #184]	; (8001c40 <TIM_TimeBaseInit+0xd0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <TIM_TimeBaseInit+0x44>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <TIM_TimeBaseInit+0xd4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00f      	beq.n	8001bb4 <TIM_TimeBaseInit+0x44>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9a:	d00b      	beq.n	8001bb4 <TIM_TimeBaseInit+0x44>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a2a      	ldr	r2, [pc, #168]	; (8001c48 <TIM_TimeBaseInit+0xd8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d007      	beq.n	8001bb4 <TIM_TimeBaseInit+0x44>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a29      	ldr	r2, [pc, #164]	; (8001c4c <TIM_TimeBaseInit+0xdc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d003      	beq.n	8001bb4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a28      	ldr	r2, [pc, #160]	; (8001c50 <TIM_TimeBaseInit+0xe0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d108      	bne.n	8001bc6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bba:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	885a      	ldrh	r2, [r3, #2]
 8001bc0:	89fb      	ldrh	r3, [r7, #14]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a22      	ldr	r2, [pc, #136]	; (8001c54 <TIM_TimeBaseInit+0xe4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00c      	beq.n	8001be8 <TIM_TimeBaseInit+0x78>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <TIM_TimeBaseInit+0xe8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d008      	beq.n	8001be8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bdc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	88da      	ldrh	r2, [r3, #6]
 8001be2:	89fb      	ldrh	r3, [r7, #14]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	89fa      	ldrh	r2, [r7, #14]
 8001bec:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	889a      	ldrh	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	881a      	ldrh	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <TIM_TimeBaseInit+0xd0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00f      	beq.n	8001c26 <TIM_TimeBaseInit+0xb6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <TIM_TimeBaseInit+0xd4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00b      	beq.n	8001c26 <TIM_TimeBaseInit+0xb6>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <TIM_TimeBaseInit+0xec>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <TIM_TimeBaseInit+0xb6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <TIM_TimeBaseInit+0xf0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d003      	beq.n	8001c26 <TIM_TimeBaseInit+0xb6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <TIM_TimeBaseInit+0xf4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d104      	bne.n	8001c30 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7a1b      	ldrb	r3, [r3, #8]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	829a      	strh	r2, [r3, #20]
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40012c00 	.word	0x40012c00
 8001c44:	40013400 	.word	0x40013400
 8001c48:	40000400 	.word	0x40000400
 8001c4c:	40000800 	.word	0x40000800
 8001c50:	40000c00 	.word	0x40000c00
 8001c54:	40001000 	.word	0x40001000
 8001c58:	40001400 	.word	0x40001400
 8001c5c:	40014000 	.word	0x40014000
 8001c60:	40014400 	.word	0x40014400
 8001c64:	40014800 	.word	0x40014800

08001c68 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	817b      	strh	r3, [r7, #10]
 8001c76:	2300      	movs	r3, #0
 8001c78:	81fb      	strh	r3, [r7, #14]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	8c1b      	ldrh	r3, [r3, #32]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	8c1b      	ldrh	r3, [r3, #32]
 8001c92:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	889b      	ldrh	r3, [r3, #4]
 8001c98:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	8b9b      	ldrh	r3, [r3, #28]
 8001c9e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8001ca0:	897b      	ldrh	r3, [r7, #10]
 8001ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8001ca8:	897b      	ldrh	r3, [r7, #10]
 8001caa:	f023 0303 	bic.w	r3, r3, #3
 8001cae:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	881a      	ldrh	r2, [r3, #0]
 8001cb4:	897b      	ldrh	r3, [r7, #10]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8001cba:	89fb      	ldrh	r3, [r7, #14]
 8001cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001cc0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	891b      	ldrh	r3, [r3, #8]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	89fb      	ldrh	r3, [r7, #14]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	885b      	ldrh	r3, [r3, #2]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	89fb      	ldrh	r3, [r7, #14]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a22      	ldr	r2, [pc, #136]	; (8001d6c <TIM_OC3Init+0x104>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d003      	beq.n	8001cee <TIM_OC3Init+0x86>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <TIM_OC3Init+0x108>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d12b      	bne.n	8001d46 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8001cee:	89fb      	ldrh	r3, [r7, #14]
 8001cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cf4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	895b      	ldrh	r3, [r3, #10]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	89fb      	ldrh	r3, [r7, #14]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8001d04:	89fb      	ldrh	r3, [r7, #14]
 8001d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d0a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	89fb      	ldrh	r3, [r7, #14]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8001d1a:	89bb      	ldrh	r3, [r7, #12]
 8001d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d20:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8001d22:	89bb      	ldrh	r3, [r7, #12]
 8001d24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d28:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	899b      	ldrh	r3, [r3, #12]
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	89bb      	ldrh	r3, [r7, #12]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	89db      	ldrh	r3, [r3, #14]
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	89bb      	ldrh	r3, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	89ba      	ldrh	r2, [r7, #12]
 8001d4a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	897a      	ldrh	r2, [r7, #10]
 8001d50:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	88da      	ldrh	r2, [r3, #6]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	89fa      	ldrh	r2, [r7, #14]
 8001d5e:	841a      	strh	r2, [r3, #32]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40013400 	.word	0x40013400

08001d74 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d008      	beq.n	8001d98 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001d96:	e007      	b.n	8001da8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	801a      	strh	r2, [r3, #0]
  }
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop

08001db4 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
 8001dde:	e009      	b.n	8001df4 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop

08001e00 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	899b      	ldrh	r3, [r3, #12]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001e26:	e009      	b.n	8001e3c <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	899b      	ldrh	r3, [r3, #12]
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4013      	ands	r3, r2
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	819a      	strh	r2, [r3, #12]
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8001e6a:	e007      	b.n	8001e7c <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	801a      	strh	r2, [r3, #0]
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop

08001e88 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	8b9b      	ldrh	r3, [r3, #28]
 8001e9c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8001e9e:	89fb      	ldrh	r3, [r7, #14]
 8001ea0:	f023 0308 	bic.w	r3, r3, #8
 8001ea4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001ea6:	89fa      	ldrh	r2, [r7, #14]
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	89fa      	ldrh	r2, [r7, #14]
 8001eb2:	839a      	strh	r2, [r3, #28]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop

08001ec0 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	887a      	ldrh	r2, [r7, #2]
 8001ed0:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	81bb      	strh	r3, [r7, #12]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	8a1b      	ldrh	r3, [r3, #16]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	4013      	ands	r3, r2
 8001efe:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	899b      	ldrh	r3, [r3, #12]
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001f0c:	89bb      	ldrh	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <TIM_GetITStatus+0x42>
 8001f12:	897b      	ldrh	r3, [r7, #10]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e001      	b.n	8001f22 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop

08001f30 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	821a      	strh	r2, [r3, #16]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8a1b      	ldrh	r3, [r3, #16]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001f80:	4013      	ands	r3, r2
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	88db      	ldrh	r3, [r3, #6]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	899b      	ldrh	r3, [r3, #12]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fa2:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	889a      	ldrh	r2, [r3, #4]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	891b      	ldrh	r3, [r3, #8]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8a9b      	ldrh	r3, [r3, #20]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd8:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	899b      	ldrh	r3, [r3, #12]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001ff4:	f107 0308 	add.w	r3, r7, #8
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fb9f 	bl	800173c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <USART_Init+0x16c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d102      	bne.n	800200c <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
 800200a:	e001      	b.n	8002010 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	899b      	ldrh	r3, [r3, #12]
 8002014:	b29b      	uxth	r3, r3
 8002016:	b21b      	sxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	da0c      	bge.n	8002036 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800201c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	009a      	lsls	r2, r3, #2
 8002026:	441a      	add	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
 8002034:	e00b      	b.n	800204e <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009a      	lsls	r2, r3, #2
 8002040:	441a      	add	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	fbb2 f3f3 	udiv	r3, r2, r3
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <USART_Init+0x170>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	2264      	movs	r2, #100	; 0x64
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	899b      	ldrh	r3, [r3, #12]
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21b      	sxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	da0c      	bge.n	8002092 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	3332      	adds	r3, #50	; 0x32
 800207e:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <USART_Init+0x170>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	095b      	lsrs	r3, r3, #5
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800208c:	4313      	orrs	r3, r2
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002090:	e00b      	b.n	80020aa <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	3332      	adds	r3, #50	; 0x32
 8002098:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <USART_Init+0x170>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a6:	4313      	orrs	r3, r2
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	811a      	strh	r2, [r3, #8]
}
 80020b2:	bf00      	nop
 80020b4:	3730      	adds	r7, #48	; 0x30
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40013800 	.word	0x40013800
 80020c0:	51eb851f 	.word	0x51eb851f

080020c4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	899b      	ldrh	r3, [r3, #12]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80020e6:	e007      	b.n	80020f8 <USART_Cmd+0x34>
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	899b      	ldrh	r3, [r3, #12]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	819a      	strh	r2, [r3, #12]
  }
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
 8002110:	4613      	mov	r3, r2
 8002112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8002114:	787b      	ldrb	r3, [r7, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8a9b      	ldrh	r3, [r3, #20]
 800211e:	b29a      	uxth	r2, r3
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	4313      	orrs	r3, r2
 8002124:	b29a      	uxth	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 800212a:	e009      	b.n	8002140 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	8a9b      	ldrh	r3, [r3, #20]
 8002130:	b29a      	uxth	r2, r3
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	43db      	mvns	r3, r3
 8002136:	b29b      	uxth	r3, r3
 8002138:	4013      	ands	r3, r2
 800213a:	b29a      	uxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	829a      	strh	r2, [r3, #20]
  }
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <setUpADC>:
//the DMA has been set up in the DMA.c file.

//Rob's source - http://www.embedds.com/multichannel-adc-using-dma-on-stm32/
#include "ADC.h"

void setUpADC() {
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
	//source: http://www.embedds.com/introducing-to-stm32-adc-programming-part2/
	V25 = 1750;    // when V25=1.41V at ref 3.3V
 8002152:	4b46      	ldr	r3, [pc, #280]	; (800226c <setUpADC+0x120>)
 8002154:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8002158:	801a      	strh	r2, [r3, #0]
	Avg_Slope = 5; //when avg_slope=4.3mV/C at ref 3.3V
 800215a:	4b45      	ldr	r3, [pc, #276]	; (8002270 <setUpADC+0x124>)
 800215c:	2205      	movs	r2, #5
 800215e:	801a      	strh	r2, [r3, #0]

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8002160:	2101      	movs	r1, #1
 8002162:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002166:	f7ff fbb7 	bl	80018d8 <RCC_APB2PeriphClockCmd>
	ADC_InitTypeDef ADC_InitStructure;
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;	//was disabled, but now we need multichannels
 800216e:	2300      	movs	r3, #0
 8002170:	723b      	strb	r3, [r7, #8]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;	//was disabled
 8002172:	2301      	movs	r3, #1
 8002174:	727b      	strb	r3, [r7, #9]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8002176:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800217a:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfChannel = 1;	//was 1
 8002180:	2301      	movs	r3, #1
 8002182:	753b      	strb	r3, [r7, #20]
	ADC_Init(ADC1, &ADC_InitStructure);
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	4619      	mov	r1, r3
 8002188:	483a      	ldr	r0, [pc, #232]	; (8002274 <setUpADC+0x128>)
 800218a:	f7fe fcc9 	bl	8000b20 <ADC_Init>
	ADC_TempSensorVrefintCmd(ENABLE);
 800218e:	2001      	movs	r0, #1
 8002190:	f7fe fe98 	bl	8000ec4 <ADC_TempSensorVrefintCmd>
	//temperature only reading in correctly when it's 1 and current sensor is 2:
	//	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 2, ADC_SampleTime_41Cycles5); // for current sensor, PA5
	ADC_RegularChannelConfig(ADC1, ADC_Channel_16, 1, ADC_SampleTime_41Cycles5); // ADC_SampleTime_7Cycles5);
 8002194:	2304      	movs	r3, #4
 8002196:	2201      	movs	r2, #1
 8002198:	2110      	movs	r1, #16
 800219a:	4836      	ldr	r0, [pc, #216]	; (8002274 <setUpADC+0x128>)
 800219c:	f7fe fdbc 	bl	8000d18 <ADC_RegularChannelConfig>
	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 80021a0:	2201      	movs	r2, #1
 80021a2:	f44f 7108 	mov.w	r1, #544	; 0x220
 80021a6:	4833      	ldr	r0, [pc, #204]	; (8002274 <setUpADC+0x128>)
 80021a8:	f7fe fd28 	bl	8000bfc <ADC_ITConfig>



	/* ADC2 configuration ------------------------------------------------------*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 80021ac:	2101      	movs	r1, #1
 80021ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021b2:	f7ff fb91 	bl	80018d8 <RCC_APB2PeriphClockCmd>
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	723b      	strb	r3, [r7, #8]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80021be:	2301      	movs	r3, #1
 80021c0:	727b      	strb	r3, [r7, #9]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 80021c2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80021c6:	60fb      	str	r3, [r7, #12]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfChannel = 1;
 80021cc:	2301      	movs	r3, #1
 80021ce:	753b      	strb	r3, [r7, #20]
	ADC_Init(ADC2, &ADC_InitStructure);
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4828      	ldr	r0, [pc, #160]	; (8002278 <setUpADC+0x12c>)
 80021d6:	f7fe fca3 	bl	8000b20 <ADC_Init>
	/* ADC2 regular channels configuration */
	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 1, ADC_SampleTime_41Cycles5);
 80021da:	2304      	movs	r3, #4
 80021dc:	2201      	movs	r2, #1
 80021de:	2105      	movs	r1, #5
 80021e0:	4825      	ldr	r0, [pc, #148]	; (8002278 <setUpADC+0x12c>)
 80021e2:	f7fe fd99 	bl	8000d18 <ADC_RegularChannelConfig>
	/* Enable ADC2 EOC interrupt */
	ADC_ITConfig(ADC2, ADC_IT_EOC, ENABLE);
 80021e6:	2201      	movs	r2, #1
 80021e8:	f44f 7108 	mov.w	r1, #544	; 0x220
 80021ec:	4822      	ldr	r0, [pc, #136]	; (8002278 <setUpADC+0x12c>)
 80021ee:	f7fe fd05 	bl	8000bfc <ADC_ITConfig>


	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 80021f2:	2101      	movs	r1, #1
 80021f4:	481f      	ldr	r0, [pc, #124]	; (8002274 <setUpADC+0x128>)
 80021f6:	f7fe fce5 	bl	8000bc4 <ADC_Cmd>

	/* Enable ADC1 reset calibration register */
	ADC_ResetCalibration(ADC1);
 80021fa:	481e      	ldr	r0, [pc, #120]	; (8002274 <setUpADC+0x128>)
 80021fc:	f7fe fd20 	bl	8000c40 <ADC_ResetCalibration>
	/* Check the end of ADC1 reset calibration register */
	while(ADC_GetResetCalibrationStatus(ADC1));
 8002200:	bf00      	nop
 8002202:	481c      	ldr	r0, [pc, #112]	; (8002274 <setUpADC+0x128>)
 8002204:	f7fe fd2c 	bl	8000c60 <ADC_GetResetCalibrationStatus>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <setUpADC+0xb6>

	/* Start ADC1 calibration */
	ADC_StartCalibration(ADC1);
 800220e:	4819      	ldr	r0, [pc, #100]	; (8002274 <setUpADC+0x128>)
 8002210:	f7fe fd3e 	bl	8000c90 <ADC_StartCalibration>
	/* Check the end of ADC1 calibration */
	while(ADC_GetCalibrationStatus(ADC1));
 8002214:	bf00      	nop
 8002216:	4817      	ldr	r0, [pc, #92]	; (8002274 <setUpADC+0x128>)
 8002218:	f7fe fd4a 	bl	8000cb0 <ADC_GetCalibrationStatus>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <setUpADC+0xca>

	/* Enable ADC2 */
	ADC_Cmd(ADC2, ENABLE);
 8002222:	2101      	movs	r1, #1
 8002224:	4814      	ldr	r0, [pc, #80]	; (8002278 <setUpADC+0x12c>)
 8002226:	f7fe fccd 	bl	8000bc4 <ADC_Cmd>

	/* Enable ADC2 reset calibration register */
	ADC_ResetCalibration(ADC2);
 800222a:	4813      	ldr	r0, [pc, #76]	; (8002278 <setUpADC+0x12c>)
 800222c:	f7fe fd08 	bl	8000c40 <ADC_ResetCalibration>
	/* Check the end of ADC2 reset calibration register */
	while(ADC_GetResetCalibrationStatus(ADC2));
 8002230:	bf00      	nop
 8002232:	4811      	ldr	r0, [pc, #68]	; (8002278 <setUpADC+0x12c>)
 8002234:	f7fe fd14 	bl	8000c60 <ADC_GetResetCalibrationStatus>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f9      	bne.n	8002232 <setUpADC+0xe6>

	/* Start ADC2 calibration */
	ADC_StartCalibration(ADC2);
 800223e:	480e      	ldr	r0, [pc, #56]	; (8002278 <setUpADC+0x12c>)
 8002240:	f7fe fd26 	bl	8000c90 <ADC_StartCalibration>
	/* Check the end of ADC2 calibration */
	while(ADC_GetCalibrationStatus(ADC2));
 8002244:	bf00      	nop
 8002246:	480c      	ldr	r0, [pc, #48]	; (8002278 <setUpADC+0x12c>)
 8002248:	f7fe fd32 	bl	8000cb0 <ADC_GetCalibrationStatus>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f9      	bne.n	8002246 <setUpADC+0xfa>

	/* Start ADC1 Software Conversion */
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8002252:	2101      	movs	r1, #1
 8002254:	4807      	ldr	r0, [pc, #28]	; (8002274 <setUpADC+0x128>)
 8002256:	f7fe fd43 	bl	8000ce0 <ADC_SoftwareStartConvCmd>
	/* Start ADC2 Software Conversion */
	ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 800225a:	2101      	movs	r1, #1
 800225c:	4806      	ldr	r0, [pc, #24]	; (8002278 <setUpADC+0x12c>)
 800225e:	f7fe fd3f 	bl	8000ce0 <ADC_SoftwareStartConvCmd>
	//	while (ADC_GetCalibrationStatus(ADC1))
	//		;
	//set up the DMA
	//	setUpDMA((&ADC_ConvertedValue[0]));
	//	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000446 	.word	0x20000446
 8002270:	20000444 	.word	0x20000444
 8002274:	40012400 	.word	0x40012400
 8002278:	40012800 	.word	0x40012800
 800227c:	00000000 	.word	0x00000000

08002280 <readADCdma>:
//	TemperatureC = (uint8_t) ((V25 - AD_value) / Avg_Slope + 25);
//	return TemperatureC;
//}


void readADCdma(u16* out, float *motor_current_float) {
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
	//	ADC_Cmd(ADC1, DISABLE);
	//	ADC_SoftwareStartConvCmd(ADC1, DISABLE);
	//	DMA_ClearFlag(DMA1_FLAG_TC1);
//	float tempMotorCurrent = 0;
//	tempMotorCurrent = -(ADC_GetConversionValue(ADC2)*(10.0/4096.0)*(3.30/5.0)-5.0)*1000.0;
	ADC_ConvertedValue[0] = ADC_GetConversionValue(ADC1);
 800228a:	4825      	ldr	r0, [pc, #148]	; (8002320 <readADCdma+0xa0>)
 800228c:	f7fe fe0e 	bl	8000eac <ADC_GetConversionValue>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <readADCdma+0xa4>)
 8002296:	801a      	strh	r2, [r3, #0]
//	ADC_ConvertedValue[1] = (uint16_t)(tempMotorCurrent);

	for (int i = 0; i < BufferSize; i++) {
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e00b      	b.n	80022b6 <readADCdma+0x36>
		*out = ADC_ConvertedValue[i];
 800229e:	4a21      	ldr	r2, [pc, #132]	; (8002324 <readADCdma+0xa4>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	801a      	strh	r2, [r3, #0]
		out++;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3302      	adds	r3, #2
 80022ae:	607b      	str	r3, [r7, #4]
//	float tempMotorCurrent = 0;
//	tempMotorCurrent = -(ADC_GetConversionValue(ADC2)*(10.0/4096.0)*(3.30/5.0)-5.0)*1000.0;
	ADC_ConvertedValue[0] = ADC_GetConversionValue(ADC1);
//	ADC_ConvertedValue[1] = (uint16_t)(tempMotorCurrent);

	for (int i = 0; i < BufferSize; i++) {
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3301      	adds	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	ddf0      	ble.n	800229e <readADCdma+0x1e>
		*out = ADC_ConvertedValue[i];
		out++;
	}
	*motor_current_float = -(ADC_GetConversionValue(ADC2)*(10.0/4096.0)*(3.30/5.0)-5.0);
 80022bc:	481a      	ldr	r0, [pc, #104]	; (8002328 <readADCdma+0xa8>)
 80022be:	f7fe fdf5 	bl	8000eac <ADC_GetConversionValue>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f901 	bl	80004cc <__aeabi_i2d>
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <readADCdma+0xac>)
 80022d0:	f7fe f962 	bl	8000598 <__aeabi_dmul>
 80022d4:	4603      	mov	r3, r0
 80022d6:	460c      	mov	r4, r1
 80022d8:	4618      	mov	r0, r3
 80022da:	4621      	mov	r1, r4
 80022dc:	a30e      	add	r3, pc, #56	; (adr r3, 8002318 <readADCdma+0x98>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	f7fe f959 	bl	8000598 <__aeabi_dmul>
 80022e6:	4603      	mov	r3, r0
 80022e8:	460c      	mov	r4, r1
 80022ea:	4618      	mov	r0, r3
 80022ec:	4621      	mov	r1, r4
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <readADCdma+0xb0>)
 80022f4:	f7fd ff9c 	bl	8000230 <__aeabi_dsub>
 80022f8:	4603      	mov	r3, r0
 80022fa:	460c      	mov	r4, r1
 80022fc:	4618      	mov	r0, r3
 80022fe:	4621      	mov	r1, r4
 8002300:	f7fe fb5c 	bl	80009bc <__aeabi_d2f>
 8002304:	4603      	mov	r3, r0
 8002306:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	601a      	str	r2, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}
 8002316:	bf00      	nop
 8002318:	51eb851e 	.word	0x51eb851e
 800231c:	3fe51eb8 	.word	0x3fe51eb8
 8002320:	40012400 	.word	0x40012400
 8002324:	2000044c 	.word	0x2000044c
 8002328:	40012800 	.word	0x40012800
 800232c:	3f640000 	.word	0x3f640000
 8002330:	40140000 	.word	0x40140000

08002334 <DMA1_Channel1_IRQHandler>:
void readADC_motorCurrent(float *output_float) {
	*output_float = -(ADC_GetConversionValue(ADC2)*(10.0/4096.0)*(3.30/5.0)-5.0);
}

void DMA1_Channel1_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	if (DMA_GetITStatus(DMA1_IT_TC1))
 8002338:	2002      	movs	r0, #2
 800233a:	f7fe fe71 	bl	8001020 <DMA_GetITStatus>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <DMA1_Channel1_IRQHandler+0x16>
	{
		DMA_ClearITPendingBit(DMA1_IT_GL1);
 8002344:	2001      	movs	r0, #1
 8002346:	f7fe fe93 	bl	8001070 <DMA_ClearITPendingBit>

		// Do something
	}
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop

08002350 <setUpEcompass>:

///////////////////////////////////////////////////////////////////////////
///////////////ACC AND MAGN FUNCTIONS//////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void setUpEcompass()
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	setUpI2C2();
 8002354:	f000 fc22 	bl	8002b9c <setUpI2C2>
	initRegistersEcompass();
 8002358:	f000 f802 	bl	8002360 <initRegistersEcompass>
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <initRegistersEcompass>:

void initRegistersEcompass(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	//ctrl_reg1_A
	//PM2 PM1 PM0 DR1 DR0 Zen Yen Xen
	//PM2-PM0 000(power down) 001(normal mode) other = low power mde
	//Dr1-Dro data rate- 00=50hz 01=100hz 10=400hz 11=1000hz
	//Zen, Yen, Xen 1=enable 0=disable
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 8002364:	bf00      	nop
 8002366:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800236a:	4899      	ldr	r0, [pc, #612]	; (80025d0 <initRegistersEcompass+0x270>)
 800236c:	f7ff f9b4 	bl	80016d8 <I2C_GetFlagStatus>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f7      	bne.n	8002366 <initRegistersEcompass+0x6>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002376:	2101      	movs	r1, #1
 8002378:	4895      	ldr	r0, [pc, #596]	; (80025d0 <initRegistersEcompass+0x270>)
 800237a:	f7ff f8e1 	bl	8001540 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 800237e:	bf00      	nop
 8002380:	4994      	ldr	r1, [pc, #592]	; (80025d4 <initRegistersEcompass+0x274>)
 8002382:	4893      	ldr	r0, [pc, #588]	; (80025d0 <initRegistersEcompass+0x270>)
 8002384:	f7ff f978 	bl	8001678 <I2C_CheckEvent>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f8      	beq.n	8002380 <initRegistersEcompass+0x20>
	I2C_Send7bitAddress(I2C2,0x32,I2C_Direction_Transmitter);//slave address    33
 800238e:	2200      	movs	r2, #0
 8002390:	2132      	movs	r1, #50	; 0x32
 8002392:	488f      	ldr	r0, [pc, #572]	; (80025d0 <initRegistersEcompass+0x270>)
 8002394:	f7ff f952 	bl	800163c <I2C_Send7bitAddress>
	//I2C_SendData(I2C2,(u8)0x32);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002398:	bf00      	nop
 800239a:	498f      	ldr	r1, [pc, #572]	; (80025d8 <initRegistersEcompass+0x278>)
 800239c:	488c      	ldr	r0, [pc, #560]	; (80025d0 <initRegistersEcompass+0x270>)
 800239e:	f7ff f96b 	bl	8001678 <I2C_CheckEvent>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f8      	beq.n	800239a <initRegistersEcompass+0x3a>
	I2C_SendData(I2C2,(u8)0x20);//write address
 80023a8:	2120      	movs	r1, #32
 80023aa:	4889      	ldr	r0, [pc, #548]	; (80025d0 <initRegistersEcompass+0x270>)
 80023ac:	f7ff f928 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80023b0:	bf00      	nop
 80023b2:	498a      	ldr	r1, [pc, #552]	; (80025dc <initRegistersEcompass+0x27c>)
 80023b4:	4886      	ldr	r0, [pc, #536]	; (80025d0 <initRegistersEcompass+0x270>)
 80023b6:	f7ff f95f 	bl	8001678 <I2C_CheckEvent>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f8      	beq.n	80023b2 <initRegistersEcompass+0x52>
	I2C_SendData(I2C2,0b00110111);//data-0x27
 80023c0:	2137      	movs	r1, #55	; 0x37
 80023c2:	4883      	ldr	r0, [pc, #524]	; (80025d0 <initRegistersEcompass+0x270>)
 80023c4:	f7ff f91c 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80023c8:	bf00      	nop
 80023ca:	4984      	ldr	r1, [pc, #528]	; (80025dc <initRegistersEcompass+0x27c>)
 80023cc:	4880      	ldr	r0, [pc, #512]	; (80025d0 <initRegistersEcompass+0x270>)
 80023ce:	f7ff f953 	bl	8001678 <I2C_CheckEvent>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f8      	beq.n	80023ca <initRegistersEcompass+0x6a>
	I2C_GenerateSTOP(I2C2,ENABLE);
 80023d8:	2101      	movs	r1, #1
 80023da:	487d      	ldr	r0, [pc, #500]	; (80025d0 <initRegistersEcompass+0x270>)
 80023dc:	f7ff f8d0 	bl	8001580 <I2C_GenerateSTOP>
	//BDU block data update 1= output registers not updated between MSB and LSB reading
	//BLE (BIG LITTLE endian) 0=data LSB at lower address 1= data MSB at lower address
	//FS1,FS0 00=+-2g 01=+-4g 11=+-8g
	//STsign self test sign 0=self test plus, 1= self test minus (default=0)
	//ST= self test enable 0=disable, 1= enable
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 80023e0:	bf00      	nop
 80023e2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80023e6:	487a      	ldr	r0, [pc, #488]	; (80025d0 <initRegistersEcompass+0x270>)
 80023e8:	f7ff f976 	bl	80016d8 <I2C_GetFlagStatus>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f7      	bne.n	80023e2 <initRegistersEcompass+0x82>
	I2C_GenerateSTART(I2C2,ENABLE);
 80023f2:	2101      	movs	r1, #1
 80023f4:	4876      	ldr	r0, [pc, #472]	; (80025d0 <initRegistersEcompass+0x270>)
 80023f6:	f7ff f8a3 	bl	8001540 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 80023fa:	bf00      	nop
 80023fc:	4975      	ldr	r1, [pc, #468]	; (80025d4 <initRegistersEcompass+0x274>)
 80023fe:	4874      	ldr	r0, [pc, #464]	; (80025d0 <initRegistersEcompass+0x270>)
 8002400:	f7ff f93a 	bl	8001678 <I2C_CheckEvent>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f8      	beq.n	80023fc <initRegistersEcompass+0x9c>
	I2C_Send7bitAddress(I2C2,(u8)0x33,I2C_Direction_Transmitter);//slave address
 800240a:	2200      	movs	r2, #0
 800240c:	2133      	movs	r1, #51	; 0x33
 800240e:	4870      	ldr	r0, [pc, #448]	; (80025d0 <initRegistersEcompass+0x270>)
 8002410:	f7ff f914 	bl	800163c <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002414:	bf00      	nop
 8002416:	4970      	ldr	r1, [pc, #448]	; (80025d8 <initRegistersEcompass+0x278>)
 8002418:	486d      	ldr	r0, [pc, #436]	; (80025d0 <initRegistersEcompass+0x270>)
 800241a:	f7ff f92d 	bl	8001678 <I2C_CheckEvent>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f8      	beq.n	8002416 <initRegistersEcompass+0xb6>
	I2C_SendData(I2C2,(u8)0x23);//write address
 8002424:	2123      	movs	r1, #35	; 0x23
 8002426:	486a      	ldr	r0, [pc, #424]	; (80025d0 <initRegistersEcompass+0x270>)
 8002428:	f7ff f8ea 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800242c:	bf00      	nop
 800242e:	496b      	ldr	r1, [pc, #428]	; (80025dc <initRegistersEcompass+0x27c>)
 8002430:	4867      	ldr	r0, [pc, #412]	; (80025d0 <initRegistersEcompass+0x270>)
 8002432:	f7ff f921 	bl	8001678 <I2C_CheckEvent>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f8      	beq.n	800242e <initRegistersEcompass+0xce>
	I2C_SendData(I2C2,(u8)0b10000000);
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	4864      	ldr	r0, [pc, #400]	; (80025d0 <initRegistersEcompass+0x270>)
 8002440:	f7ff f8de 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002444:	bf00      	nop
 8002446:	4965      	ldr	r1, [pc, #404]	; (80025dc <initRegistersEcompass+0x27c>)
 8002448:	4861      	ldr	r0, [pc, #388]	; (80025d0 <initRegistersEcompass+0x270>)
 800244a:	f7ff f915 	bl	8001678 <I2C_CheckEvent>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f8      	beq.n	8002446 <initRegistersEcompass+0xe6>
	I2C_GenerateSTOP(I2C2,ENABLE);
 8002454:	2101      	movs	r1, #1
 8002456:	485e      	ldr	r0, [pc, #376]	; (80025d0 <initRegistersEcompass+0x270>)
 8002458:	f7ff f892 	bl	8001580 <I2C_GenerateSTOP>
	//MS1 to MSo measurement config bits
	//00=normal measurement (default)
	//01=positive bias config
	//10=negative bias config
	//11=not used
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 800245c:	bf00      	nop
 800245e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002462:	485b      	ldr	r0, [pc, #364]	; (80025d0 <initRegistersEcompass+0x270>)
 8002464:	f7ff f938 	bl	80016d8 <I2C_GetFlagStatus>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f7      	bne.n	800245e <initRegistersEcompass+0xfe>
	I2C_GenerateSTART(I2C2,ENABLE);
 800246e:	2101      	movs	r1, #1
 8002470:	4857      	ldr	r0, [pc, #348]	; (80025d0 <initRegistersEcompass+0x270>)
 8002472:	f7ff f865 	bl	8001540 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 8002476:	bf00      	nop
 8002478:	4956      	ldr	r1, [pc, #344]	; (80025d4 <initRegistersEcompass+0x274>)
 800247a:	4855      	ldr	r0, [pc, #340]	; (80025d0 <initRegistersEcompass+0x270>)
 800247c:	f7ff f8fc 	bl	8001678 <I2C_CheckEvent>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f8      	beq.n	8002478 <initRegistersEcompass+0x118>
	//I2C_Send7bitAddress(I2C2,(u8)0x3C,I2C_Direction_Transmitter);//slave address
	I2C_SendData(I2C2,(u8)0x3C);
 8002486:	213c      	movs	r1, #60	; 0x3c
 8002488:	4851      	ldr	r0, [pc, #324]	; (80025d0 <initRegistersEcompass+0x270>)
 800248a:	f7ff f8b9 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 800248e:	bf00      	nop
 8002490:	4951      	ldr	r1, [pc, #324]	; (80025d8 <initRegistersEcompass+0x278>)
 8002492:	484f      	ldr	r0, [pc, #316]	; (80025d0 <initRegistersEcompass+0x270>)
 8002494:	f7ff f8f0 	bl	8001678 <I2C_CheckEvent>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f8      	beq.n	8002490 <initRegistersEcompass+0x130>
	I2C_SendData(I2C2,(u8)0x00);//write address
 800249e:	2100      	movs	r1, #0
 80024a0:	484b      	ldr	r0, [pc, #300]	; (80025d0 <initRegistersEcompass+0x270>)
 80024a2:	f7ff f8ad 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80024a6:	bf00      	nop
 80024a8:	494c      	ldr	r1, [pc, #304]	; (80025dc <initRegistersEcompass+0x27c>)
 80024aa:	4849      	ldr	r0, [pc, #292]	; (80025d0 <initRegistersEcompass+0x270>)
 80024ac:	f7ff f8e4 	bl	8001678 <I2C_CheckEvent>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f8      	beq.n	80024a8 <initRegistersEcompass+0x148>
	I2C_SendData(I2C2,(u8)0b00011000);//data
 80024b6:	2118      	movs	r1, #24
 80024b8:	4845      	ldr	r0, [pc, #276]	; (80025d0 <initRegistersEcompass+0x270>)
 80024ba:	f7ff f8a1 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80024be:	bf00      	nop
 80024c0:	4946      	ldr	r1, [pc, #280]	; (80025dc <initRegistersEcompass+0x27c>)
 80024c2:	4843      	ldr	r0, [pc, #268]	; (80025d0 <initRegistersEcompass+0x270>)
 80024c4:	f7ff f8d8 	bl	8001678 <I2C_CheckEvent>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f8      	beq.n	80024c0 <initRegistersEcompass+0x160>
	I2C_GenerateSTOP(I2C2,ENABLE);
 80024ce:	2101      	movs	r1, #1
 80024d0:	483f      	ldr	r0, [pc, #252]	; (80025d0 <initRegistersEcompass+0x270>)
 80024d2:	f7ff f855 	bl	8001580 <I2C_GenerateSTOP>
	//011 =+-2.5
	//100 =+-4
	//101 =+-4.7
	//110 =+-5.6
	//111 =+-8.1
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 80024d6:	bf00      	nop
 80024d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80024dc:	483c      	ldr	r0, [pc, #240]	; (80025d0 <initRegistersEcompass+0x270>)
 80024de:	f7ff f8fb 	bl	80016d8 <I2C_GetFlagStatus>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f7      	bne.n	80024d8 <initRegistersEcompass+0x178>
	I2C_GenerateSTART(I2C2,ENABLE);
 80024e8:	2101      	movs	r1, #1
 80024ea:	4839      	ldr	r0, [pc, #228]	; (80025d0 <initRegistersEcompass+0x270>)
 80024ec:	f7ff f828 	bl	8001540 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 80024f0:	bf00      	nop
 80024f2:	4938      	ldr	r1, [pc, #224]	; (80025d4 <initRegistersEcompass+0x274>)
 80024f4:	4836      	ldr	r0, [pc, #216]	; (80025d0 <initRegistersEcompass+0x270>)
 80024f6:	f7ff f8bf 	bl	8001678 <I2C_CheckEvent>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f8      	beq.n	80024f2 <initRegistersEcompass+0x192>
	I2C_Send7bitAddress(I2C2,(u8)0x3C,I2C_Direction_Transmitter);//slave address
 8002500:	2200      	movs	r2, #0
 8002502:	213c      	movs	r1, #60	; 0x3c
 8002504:	4832      	ldr	r0, [pc, #200]	; (80025d0 <initRegistersEcompass+0x270>)
 8002506:	f7ff f899 	bl	800163c <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 800250a:	bf00      	nop
 800250c:	4932      	ldr	r1, [pc, #200]	; (80025d8 <initRegistersEcompass+0x278>)
 800250e:	4830      	ldr	r0, [pc, #192]	; (80025d0 <initRegistersEcompass+0x270>)
 8002510:	f7ff f8b2 	bl	8001678 <I2C_CheckEvent>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f8      	beq.n	800250c <initRegistersEcompass+0x1ac>
	I2C_SendData(I2C2,(u8)0x01);//write address
 800251a:	2101      	movs	r1, #1
 800251c:	482c      	ldr	r0, [pc, #176]	; (80025d0 <initRegistersEcompass+0x270>)
 800251e:	f7ff f86f 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002522:	bf00      	nop
 8002524:	492d      	ldr	r1, [pc, #180]	; (80025dc <initRegistersEcompass+0x27c>)
 8002526:	482a      	ldr	r0, [pc, #168]	; (80025d0 <initRegistersEcompass+0x270>)
 8002528:	f7ff f8a6 	bl	8001678 <I2C_CheckEvent>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f8      	beq.n	8002524 <initRegistersEcompass+0x1c4>
	I2C_SendData(I2C2,(u8)0b11100000);//data
 8002532:	21e0      	movs	r1, #224	; 0xe0
 8002534:	4826      	ldr	r0, [pc, #152]	; (80025d0 <initRegistersEcompass+0x270>)
 8002536:	f7ff f863 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800253a:	bf00      	nop
 800253c:	4927      	ldr	r1, [pc, #156]	; (80025dc <initRegistersEcompass+0x27c>)
 800253e:	4824      	ldr	r0, [pc, #144]	; (80025d0 <initRegistersEcompass+0x270>)
 8002540:	f7ff f89a 	bl	8001678 <I2C_CheckEvent>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f8      	beq.n	800253c <initRegistersEcompass+0x1dc>
	I2C_GenerateSTOP(I2C2,ENABLE);
 800254a:	2101      	movs	r1, #1
 800254c:	4820      	ldr	r0, [pc, #128]	; (80025d0 <initRegistersEcompass+0x270>)
 800254e:	f7ff f817 	bl	8001580 <I2C_GenerateSTOP>
	//register 0x02->0b00000000-> single conversion mode
	//0 0 0 0 0 0 MD1 MD0
	//00= continuous mode
	//01= single conversion mode
	//11=sleep mode
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 8002552:	bf00      	nop
 8002554:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002558:	481d      	ldr	r0, [pc, #116]	; (80025d0 <initRegistersEcompass+0x270>)
 800255a:	f7ff f8bd 	bl	80016d8 <I2C_GetFlagStatus>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f7      	bne.n	8002554 <initRegistersEcompass+0x1f4>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002564:	2101      	movs	r1, #1
 8002566:	481a      	ldr	r0, [pc, #104]	; (80025d0 <initRegistersEcompass+0x270>)
 8002568:	f7fe ffea 	bl	8001540 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 800256c:	bf00      	nop
 800256e:	4919      	ldr	r1, [pc, #100]	; (80025d4 <initRegistersEcompass+0x274>)
 8002570:	4817      	ldr	r0, [pc, #92]	; (80025d0 <initRegistersEcompass+0x270>)
 8002572:	f7ff f881 	bl	8001678 <I2C_CheckEvent>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f8      	beq.n	800256e <initRegistersEcompass+0x20e>
	//I2C_Send7bitAddress(I2C2,(u8)0x3C,I2C_Direction_Transmitter);//slave address
	I2C_SendData(I2C2,(u8)0x3C);
 800257c:	213c      	movs	r1, #60	; 0x3c
 800257e:	4814      	ldr	r0, [pc, #80]	; (80025d0 <initRegistersEcompass+0x270>)
 8002580:	f7ff f83e 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002584:	bf00      	nop
 8002586:	4914      	ldr	r1, [pc, #80]	; (80025d8 <initRegistersEcompass+0x278>)
 8002588:	4811      	ldr	r0, [pc, #68]	; (80025d0 <initRegistersEcompass+0x270>)
 800258a:	f7ff f875 	bl	8001678 <I2C_CheckEvent>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f8      	beq.n	8002586 <initRegistersEcompass+0x226>
	I2C_SendData(I2C2,(u8)0x02);//write address
 8002594:	2102      	movs	r1, #2
 8002596:	480e      	ldr	r0, [pc, #56]	; (80025d0 <initRegistersEcompass+0x270>)
 8002598:	f7ff f832 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 800259c:	bf00      	nop
 800259e:	490f      	ldr	r1, [pc, #60]	; (80025dc <initRegistersEcompass+0x27c>)
 80025a0:	480b      	ldr	r0, [pc, #44]	; (80025d0 <initRegistersEcompass+0x270>)
 80025a2:	f7ff f869 	bl	8001678 <I2C_CheckEvent>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f8      	beq.n	800259e <initRegistersEcompass+0x23e>
	I2C_SendData(I2C2,0x00);//data
 80025ac:	2100      	movs	r1, #0
 80025ae:	4808      	ldr	r0, [pc, #32]	; (80025d0 <initRegistersEcompass+0x270>)
 80025b0:	f7ff f826 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80025b4:	bf00      	nop
 80025b6:	4909      	ldr	r1, [pc, #36]	; (80025dc <initRegistersEcompass+0x27c>)
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <initRegistersEcompass+0x270>)
 80025ba:	f7ff f85d 	bl	8001678 <I2C_CheckEvent>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f8      	beq.n	80025b6 <initRegistersEcompass+0x256>
	I2C_GenerateSTOP(I2C2,ENABLE);
 80025c4:	2101      	movs	r1, #1
 80025c6:	4802      	ldr	r0, [pc, #8]	; (80025d0 <initRegistersEcompass+0x270>)
 80025c8:	f7fe ffda 	bl	8001580 <I2C_GenerateSTOP>
}
 80025cc:	bf00      	nop
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40005800 	.word	0x40005800
 80025d4:	00030001 	.word	0x00030001
 80025d8:	00070082 	.word	0x00070082
 80025dc:	00070084 	.word	0x00070084

080025e0 <eCompassRead>:
void eCompassRead(u8 address,uint32_t numByteToRead,u8* pBuffer)//for the acc
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	73fb      	strb	r3, [r7, #15]
	while((I2C_GetFlagStatus(I2C2,I2C_FLAG_BUSY)));
 80025ee:	bf00      	nop
 80025f0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80025f4:	4838      	ldr	r0, [pc, #224]	; (80026d8 <eCompassRead+0xf8>)
 80025f6:	f7ff f86f 	bl	80016d8 <I2C_GetFlagStatus>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f7      	bne.n	80025f0 <eCompassRead+0x10>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002600:	2101      	movs	r1, #1
 8002602:	4835      	ldr	r0, [pc, #212]	; (80026d8 <eCompassRead+0xf8>)
 8002604:	f7fe ff9c 	bl	8001540 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 8002608:	bf00      	nop
 800260a:	4934      	ldr	r1, [pc, #208]	; (80026dc <eCompassRead+0xfc>)
 800260c:	4832      	ldr	r0, [pc, #200]	; (80026d8 <eCompassRead+0xf8>)
 800260e:	f7ff f833 	bl	8001678 <I2C_CheckEvent>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f8      	beq.n	800260a <eCompassRead+0x2a>
	I2C_Send7bitAddress(I2C2,(u8)0x32,I2C_Direction_Transmitter);
 8002618:	2200      	movs	r2, #0
 800261a:	2132      	movs	r1, #50	; 0x32
 800261c:	482e      	ldr	r0, [pc, #184]	; (80026d8 <eCompassRead+0xf8>)
 800261e:	f7ff f80d 	bl	800163c <I2C_Send7bitAddress>
	//I2C_SendData(I2C2,0x32);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8002622:	bf00      	nop
 8002624:	492e      	ldr	r1, [pc, #184]	; (80026e0 <eCompassRead+0x100>)
 8002626:	482c      	ldr	r0, [pc, #176]	; (80026d8 <eCompassRead+0xf8>)
 8002628:	f7ff f826 	bl	8001678 <I2C_CheckEvent>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f8      	beq.n	8002624 <eCompassRead+0x44>
	I2C_Cmd(I2C2,ENABLE);
 8002632:	2101      	movs	r1, #1
 8002634:	4828      	ldr	r0, [pc, #160]	; (80026d8 <eCompassRead+0xf8>)
 8002636:	f7fe ff63 	bl	8001500 <I2C_Cmd>
	I2C_SendData(I2C2,(u8)address);
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	4619      	mov	r1, r3
 800263e:	4826      	ldr	r0, [pc, #152]	; (80026d8 <eCompassRead+0xf8>)
 8002640:	f7fe ffde 	bl	8001600 <I2C_SendData>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8002644:	bf00      	nop
 8002646:	4927      	ldr	r1, [pc, #156]	; (80026e4 <eCompassRead+0x104>)
 8002648:	4823      	ldr	r0, [pc, #140]	; (80026d8 <eCompassRead+0xf8>)
 800264a:	f7ff f815 	bl	8001678 <I2C_CheckEvent>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f8      	beq.n	8002646 <eCompassRead+0x66>
	I2C_GenerateSTART(I2C2,ENABLE);
 8002654:	2101      	movs	r1, #1
 8002656:	4820      	ldr	r0, [pc, #128]	; (80026d8 <eCompassRead+0xf8>)
 8002658:	f7fe ff72 	bl	8001540 <I2C_GenerateSTART>
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
 800265c:	bf00      	nop
 800265e:	491f      	ldr	r1, [pc, #124]	; (80026dc <eCompassRead+0xfc>)
 8002660:	481d      	ldr	r0, [pc, #116]	; (80026d8 <eCompassRead+0xf8>)
 8002662:	f7ff f809 	bl	8001678 <I2C_CheckEvent>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f8      	beq.n	800265e <eCompassRead+0x7e>
	I2C_Send7bitAddress(I2C2,(u8)0x33,I2C_Direction_Receiver);
 800266c:	2201      	movs	r2, #1
 800266e:	2133      	movs	r1, #51	; 0x33
 8002670:	4819      	ldr	r0, [pc, #100]	; (80026d8 <eCompassRead+0xf8>)
 8002672:	f7fe ffe3 	bl	800163c <I2C_Send7bitAddress>
	//I2C_SendData(I2C2,0x33);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8002676:	bf00      	nop
 8002678:	491b      	ldr	r1, [pc, #108]	; (80026e8 <eCompassRead+0x108>)
 800267a:	4817      	ldr	r0, [pc, #92]	; (80026d8 <eCompassRead+0xf8>)
 800267c:	f7fe fffc 	bl	8001678 <I2C_CheckEvent>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f8      	beq.n	8002678 <eCompassRead+0x98>
	while(numByteToRead)
 8002686:	e01b      	b.n	80026c0 <eCompassRead+0xe0>
	{
		if(numByteToRead==1)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <eCompassRead+0xbe>
     	{
			I2C_AcknowledgeConfig(I2C2,DISABLE);
 800268e:	2100      	movs	r1, #0
 8002690:	4811      	ldr	r0, [pc, #68]	; (80026d8 <eCompassRead+0xf8>)
 8002692:	f7fe ff95 	bl	80015c0 <I2C_AcknowledgeConfig>
			I2C_GenerateSTOP(I2C2,ENABLE);
 8002696:	2101      	movs	r1, #1
 8002698:	480f      	ldr	r0, [pc, #60]	; (80026d8 <eCompassRead+0xf8>)
 800269a:	f7fe ff71 	bl	8001580 <I2C_GenerateSTOP>
		}
		if(I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_RECEIVED))
 800269e:	4913      	ldr	r1, [pc, #76]	; (80026ec <eCompassRead+0x10c>)
 80026a0:	480d      	ldr	r0, [pc, #52]	; (80026d8 <eCompassRead+0xf8>)
 80026a2:	f7fe ffe9 	bl	8001678 <I2C_CheckEvent>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d009      	beq.n	80026c0 <eCompassRead+0xe0>

		{
			*pBuffer=I2C_ReceiveData(I2C2);
 80026ac:	480a      	ldr	r0, [pc, #40]	; (80026d8 <eCompassRead+0xf8>)
 80026ae:	f7fe ffb7 	bl	8001620 <I2C_ReceiveData>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	701a      	strb	r2, [r3, #0]
			numByteToRead--;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3b01      	subs	r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
	I2C_GenerateSTART(I2C2,ENABLE);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(I2C2,(u8)0x33,I2C_Direction_Receiver);
	//I2C_SendData(I2C2,0x33);
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	while(numByteToRead)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1e0      	bne.n	8002688 <eCompassRead+0xa8>
			*pBuffer=I2C_ReceiveData(I2C2);
			numByteToRead--;
		}

	}
	I2C_AcknowledgeConfig(I2C2,ENABLE);
 80026c6:	2101      	movs	r1, #1
 80026c8:	4803      	ldr	r0, [pc, #12]	; (80026d8 <eCompassRead+0xf8>)
 80026ca:	f7fe ff79 	bl	80015c0 <I2C_AcknowledgeConfig>
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40005800 	.word	0x40005800
 80026dc:	00030001 	.word	0x00030001
 80026e0:	00070082 	.word	0x00070082
 80026e4:	00070084 	.word	0x00070084
 80026e8:	00030002 	.word	0x00030002
 80026ec:	00030040 	.word	0x00030040

080026f0 <getAcc>:
	I2C_SendData(I2C2,(u8)data);//data
	while(!I2C_CheckEvent(I2C2,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	I2C_GenerateSTOP(I2C2,ENABLE);
}
void getAcc(u8* buffer,float* out)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
	//u8 buffer[6];
	u8 crtl4;

	eCompassRead(0x23,1,&crtl4);
 80026fa:	f107 030b 	add.w	r3, r7, #11
 80026fe:	461a      	mov	r2, r3
 8002700:	2101      	movs	r1, #1
 8002702:	2023      	movs	r0, #35	; 0x23
 8002704:	f7ff ff6c 	bl	80025e0 <eCompassRead>
	eCompassRead(0x28,1,&buffer[0]);
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	2101      	movs	r1, #1
 800270c:	2028      	movs	r0, #40	; 0x28
 800270e:	f7ff ff67 	bl	80025e0 <eCompassRead>
	eCompassRead(0x29,1,&buffer[1]);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3301      	adds	r3, #1
 8002716:	461a      	mov	r2, r3
 8002718:	2101      	movs	r1, #1
 800271a:	2029      	movs	r0, #41	; 0x29
 800271c:	f7ff ff60 	bl	80025e0 <eCompassRead>
	eCompassRead(0x2A,1,&buffer[2]);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3302      	adds	r3, #2
 8002724:	461a      	mov	r2, r3
 8002726:	2101      	movs	r1, #1
 8002728:	202a      	movs	r0, #42	; 0x2a
 800272a:	f7ff ff59 	bl	80025e0 <eCompassRead>
	eCompassRead(0x2B,1,&buffer[3]);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3303      	adds	r3, #3
 8002732:	461a      	mov	r2, r3
 8002734:	2101      	movs	r1, #1
 8002736:	202b      	movs	r0, #43	; 0x2b
 8002738:	f7ff ff52 	bl	80025e0 <eCompassRead>
	eCompassRead(0x2C,1,&buffer[4]);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	461a      	mov	r2, r3
 8002742:	2101      	movs	r1, #1
 8002744:	202c      	movs	r0, #44	; 0x2c
 8002746:	f7ff ff4b 	bl	80025e0 <eCompassRead>
	eCompassRead(0x2D,1,&buffer[5]);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3305      	adds	r3, #5
 800274e:	461a      	mov	r2, r3
 8002750:	2101      	movs	r1, #1
 8002752:	202d      	movs	r0, #45	; 0x2d
 8002754:	f7ff ff44 	bl	80025e0 <eCompassRead>

	int i=0;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
	u16 t=0;
 800275c:	2300      	movs	r3, #0
 800275e:	827b      	strh	r3, [r7, #18]

	if(!(crtl4 & 0x40))//endian check
 8002760:	7afb      	ldrb	r3, [r7, #11]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 80e7 	bne.w	800293a <getAcc+0x24a>
	{
		switch(crtl4 & 0x30)//adjust the sensitivity
 800276c:	7afb      	ldrb	r3, [r7, #11]
 800276e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002772:	2b10      	cmp	r3, #16
 8002774:	d044      	beq.n	8002800 <getAcc+0x110>
 8002776:	2b30      	cmp	r3, #48	; 0x30
 8002778:	f000 808a 	beq.w	8002890 <getAcc+0x1a0>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d000      	beq.n	8002782 <getAcc+0x92>
				out[i]=(float)(5*(te/(16*3.9))*9.81/1000.0);//
			}
			break;
		}
	}
}
 8002780:	e0db      	b.n	800293a <getAcc+0x24a>
	if(!(crtl4 & 0x40))//endian check
	{
		switch(crtl4 & 0x30)//adjust the sensitivity
		{
		case 0x00:
			for(i=0;i<3;i++)
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e037      	b.n	80027f8 <getAcc+0x108>
			{
				s16 te=0;
 8002788:	2300      	movs	r3, #0
 800278a:	823b      	strh	r3, [r7, #16]
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	3301      	adds	r3, #1
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	b21a      	sxth	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4619      	mov	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	440b      	add	r3, r1
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b21b      	sxth	r3, r3
 80027aa:	4313      	orrs	r3, r2
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	827b      	strh	r3, [r7, #18]
				te=twosCompToDec(t);
 80027b0:	8a7b      	ldrh	r3, [r7, #18]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f8d4 	bl	8002960 <twosCompToDec>
 80027b8:	4603      	mov	r3, r0
 80027ba:	823b      	strh	r3, [r7, #16]
				//out[i]=(float)(((te/16)*9.81/1000.0));	//go from G to m/s2
				out[i]=(float)(((te)/16/1000.0));
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	18d4      	adds	r4, r2, r3
 80027c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da00      	bge.n	80027ce <getAcc+0xde>
 80027cc:	330f      	adds	r3, #15
 80027ce:	111b      	asrs	r3, r3, #4
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd fe7a 	bl	80004cc <__aeabi_i2d>
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	4b5e      	ldr	r3, [pc, #376]	; (8002958 <getAcc+0x268>)
 80027de:	f7fe f805 	bl	80007ec <__aeabi_ddiv>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	f7fe f8e7 	bl	80009bc <__aeabi_d2f>
 80027ee:	4603      	mov	r3, r0
 80027f0:	6023      	str	r3, [r4, #0]
	if(!(crtl4 & 0x40))//endian check
	{
		switch(crtl4 & 0x30)//adjust the sensitivity
		{
		case 0x00:
			for(i=0;i<3;i++)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3301      	adds	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	ddc4      	ble.n	8002788 <getAcc+0x98>
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
				te=twosCompToDec(t);
				//out[i]=(float)(((te/16)*9.81/1000.0));	//go from G to m/s2
				out[i]=(float)(((te)/16/1000.0));
			}
			break;
 80027fe:	e09c      	b.n	800293a <getAcc+0x24a>
		case 0x10:
			for(i=0;i<3;i++)
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e040      	b.n	8002888 <getAcc+0x198>
			{
				s16 te=0;
 8002806:	2300      	movs	r3, #0
 8002808:	81fb      	strh	r3, [r7, #14]
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	3301      	adds	r3, #1
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	b21a      	sxth	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4619      	mov	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	440b      	add	r3, r1
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b21b      	sxth	r3, r3
 8002828:	4313      	orrs	r3, r2
 800282a:	b21b      	sxth	r3, r3
 800282c:	827b      	strh	r3, [r7, #18]
				te=twosCompToDec(t);
 800282e:	8a7b      	ldrh	r3, [r7, #18]
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f895 	bl	8002960 <twosCompToDec>
 8002836:	4603      	mov	r3, r0
 8002838:	81fb      	strh	r3, [r7, #14]
				out[i]=(float)((te/(16*2))*9.81/1000.0);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	18d4      	adds	r4, r2, r3
 8002842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002846:	2b00      	cmp	r3, #0
 8002848:	da00      	bge.n	800284c <getAcc+0x15c>
 800284a:	331f      	adds	r3, #31
 800284c:	115b      	asrs	r3, r3, #5
 800284e:	b21b      	sxth	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fe3b 	bl	80004cc <__aeabi_i2d>
 8002856:	a33c      	add	r3, pc, #240	; (adr r3, 8002948 <getAcc+0x258>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f7fd fe9c 	bl	8000598 <__aeabi_dmul>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	4b3a      	ldr	r3, [pc, #232]	; (8002958 <getAcc+0x268>)
 800286e:	f7fd ffbd 	bl	80007ec <__aeabi_ddiv>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f7fe f89f 	bl	80009bc <__aeabi_d2f>
 800287e:	4603      	mov	r3, r0
 8002880:	6023      	str	r3, [r4, #0]
				//out[i]=(float)(((te/16)*9.81/1000.0));	//go from G to m/s2
				out[i]=(float)(((te)/16/1000.0));
			}
			break;
		case 0x10:
			for(i=0;i<3;i++)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3301      	adds	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b02      	cmp	r3, #2
 800288c:	ddbb      	ble.n	8002806 <getAcc+0x116>
				s16 te=0;
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
				te=twosCompToDec(t);
				out[i]=(float)((te/(16*2))*9.81/1000.0);
			}
			break;
 800288e:	e054      	b.n	800293a <getAcc+0x24a>
		case 0x30:
			for(i=0;i<3;i++)
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e04d      	b.n	8002932 <getAcc+0x242>
			{
				s16 te=0;
 8002896:	2300      	movs	r3, #0
 8002898:	81bb      	strh	r3, [r7, #12]
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	3301      	adds	r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	4413      	add	r3, r2
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	b21a      	sxth	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4619      	mov	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	440b      	add	r3, r1
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	4313      	orrs	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	827b      	strh	r3, [r7, #18]
				te=twosCompToDec(t);
 80028be:	8a7b      	ldrh	r3, [r7, #18]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f84d 	bl	8002960 <twosCompToDec>
 80028c6:	4603      	mov	r3, r0
 80028c8:	81bb      	strh	r3, [r7, #12]
				out[i]=(float)(5*(te/(16*3.9))*9.81/1000.0);//
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	18d4      	adds	r4, r2, r3
 80028d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd fdf8 	bl	80004cc <__aeabi_i2d>
 80028dc:	a31c      	add	r3, pc, #112	; (adr r3, 8002950 <getAcc+0x260>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	f7fd ff83 	bl	80007ec <__aeabi_ddiv>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <getAcc+0x26c>)
 80028f4:	f7fd fe50 	bl	8000598 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	a311      	add	r3, pc, #68	; (adr r3, 8002948 <getAcc+0x258>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fe47 	bl	8000598 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <getAcc+0x268>)
 8002918:	f7fd ff68 	bl	80007ec <__aeabi_ddiv>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	f7fe f84a 	bl	80009bc <__aeabi_d2f>
 8002928:	4603      	mov	r3, r0
 800292a:	6023      	str	r3, [r4, #0]
				te=twosCompToDec(t);
				out[i]=(float)((te/(16*2))*9.81/1000.0);
			}
			break;
		case 0x30:
			for(i=0;i<3;i++)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3301      	adds	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b02      	cmp	r3, #2
 8002936:	ddae      	ble.n	8002896 <getAcc+0x1a6>
				s16 te=0;
				t=(u16)(((u16)buffer[2*i+1]<<8)|(u16)buffer[2*i]);
				te=twosCompToDec(t);
				out[i]=(float)(5*(te/(16*3.9))*9.81/1000.0);//
			}
			break;
 8002938:	bf00      	nop
		}
	}
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd90      	pop	{r4, r7, pc}
 8002942:	bf00      	nop
 8002944:	f3af 8000 	nop.w
 8002948:	51eb851f 	.word	0x51eb851f
 800294c:	40239eb8 	.word	0x40239eb8
 8002950:	33333333 	.word	0x33333333
 8002954:	404f3333 	.word	0x404f3333
 8002958:	408f4000 	.word	0x408f4000
 800295c:	40140000 	.word	0x40140000

08002960 <twosCompToDec>:
	  out[2]=(float)(te/205);
	  break;
    }
}
s16 twosCompToDec(u16 val)//for 16 bit
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
	u16 v=val;
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	81bb      	strh	r3, [r7, #12]
	s16 temp=0;
 800296e:	2300      	movs	r3, #0
 8002970:	81fb      	strh	r3, [r7, #14]
	if((v & 0b1000000000000000)==0b1000000000000000)
 8002972:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	da02      	bge.n	8002980 <twosCompToDec+0x20>
	{
		temp=-32768;
 800297a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297e:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000001)==0b0000000000000001)
 8002980:	89bb      	ldrh	r3, [r7, #12]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <twosCompToDec+0x32>
	{
		temp=temp+1;
 800298a:	89fb      	ldrh	r3, [r7, #14]
 800298c:	3301      	adds	r3, #1
 800298e:	b29b      	uxth	r3, r3
 8002990:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000010)==0b0000000000000010)
 8002992:	89bb      	ldrh	r3, [r7, #12]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <twosCompToDec+0x44>
	{
		temp=temp+2;
 800299c:	89fb      	ldrh	r3, [r7, #14]
 800299e:	3302      	adds	r3, #2
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000000100)==0b0000000000000100)
 80029a4:	89bb      	ldrh	r3, [r7, #12]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <twosCompToDec+0x56>
	{
		temp=temp+4;
 80029ae:	89fb      	ldrh	r3, [r7, #14]
 80029b0:	3304      	adds	r3, #4
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000001000)==0b0000000000001000)
 80029b6:	89bb      	ldrh	r3, [r7, #12]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <twosCompToDec+0x68>
	{
		temp=temp+8;
 80029c0:	89fb      	ldrh	r3, [r7, #14]
 80029c2:	3308      	adds	r3, #8
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000010000)==0b0000000000010000)
 80029c8:	89bb      	ldrh	r3, [r7, #12]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <twosCompToDec+0x7a>
	{
		temp=temp+16;
 80029d2:	89fb      	ldrh	r3, [r7, #14]
 80029d4:	3310      	adds	r3, #16
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000000100000)==0b0000000000100000)
 80029da:	89bb      	ldrh	r3, [r7, #12]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <twosCompToDec+0x8c>
	{
		temp=temp+32;
 80029e4:	89fb      	ldrh	r3, [r7, #14]
 80029e6:	3320      	adds	r3, #32
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000001000000)==0b0000000001000000)
 80029ec:	89bb      	ldrh	r3, [r7, #12]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <twosCompToDec+0x9e>
	{
		temp=temp+64;
 80029f6:	89fb      	ldrh	r3, [r7, #14]
 80029f8:	3340      	adds	r3, #64	; 0x40
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000010000000)==0b0000000010000000)
 80029fe:	89bb      	ldrh	r3, [r7, #12]
 8002a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <twosCompToDec+0xb0>
	{
		temp=temp+128;
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	3380      	adds	r3, #128	; 0x80
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000000100000000)==0b0000000100000000)
 8002a10:	89bb      	ldrh	r3, [r7, #12]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <twosCompToDec+0xc4>
	{
		temp=temp+256;
 8002a1a:	89fb      	ldrh	r3, [r7, #14]
 8002a1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000001000000000)==0b0000001000000000)
 8002a24:	89bb      	ldrh	r3, [r7, #12]
 8002a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <twosCompToDec+0xd8>
	{
		temp=temp+512;
 8002a2e:	89fb      	ldrh	r3, [r7, #14]
 8002a30:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000010000000000)==0b0000010000000000)
 8002a38:	89bb      	ldrh	r3, [r7, #12]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <twosCompToDec+0xec>
	{
		temp=temp+1024;
 8002a42:	89fb      	ldrh	r3, [r7, #14]
 8002a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0000100000000000)==0b0000100000000000)
 8002a4c:	89bb      	ldrh	r3, [r7, #12]
 8002a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <twosCompToDec+0x100>
	{
		temp=temp+2048;
 8002a56:	89fb      	ldrh	r3, [r7, #14]
 8002a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0001000000000000)==0b0001000000000000)
 8002a60:	89bb      	ldrh	r3, [r7, #12]
 8002a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <twosCompToDec+0x114>
	{
		temp=temp+4096;
 8002a6a:	89fb      	ldrh	r3, [r7, #14]
 8002a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0010000000000000)==0b0010000000000000)
 8002a74:	89bb      	ldrh	r3, [r7, #12]
 8002a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d004      	beq.n	8002a88 <twosCompToDec+0x128>
	{
		temp=temp+8192;
 8002a7e:	89fb      	ldrh	r3, [r7, #14]
 8002a80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	81fb      	strh	r3, [r7, #14]
	}
	if((v & 0b0100000000000000)==0b0100000000000000)
 8002a88:	89bb      	ldrh	r3, [r7, #12]
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <twosCompToDec+0x13c>
	{
		temp=temp+16384;
 8002a92:	89fb      	ldrh	r3, [r7, #14]
 8002a94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	81fb      	strh	r3, [r7, #14]
	}

	return (s16)temp;
 8002a9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop

08002aac <initCRC>:
static uint32_t crcTable[256];
static uint32_t currentCRC;

static void buildTable();

void initCRC() {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0

  buildTable();
 8002ab0:	f000 f83a 	bl	8002b28 <buildTable>
  currentCRC = CRCDATA_INITIALVAL;
 8002ab4:	4b02      	ldr	r3, [pc, #8]	; (8002ac0 <initCRC+0x14>)
 8002ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aba:	601a      	str	r2, [r3, #0]

}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000430 	.word	0x20000430

08002ac4 <crcCalc>:

uint32_t crcCalc(const uint8_t* data, uint16_t startIndex, uint16_t length) {
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	803b      	strh	r3, [r7, #0]
  uint16_t index;
  uint32_t lookup;
  uint32_t remainder = CRCDATA_INITIALVAL;
 8002ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ad8:	613b      	str	r3, [r7, #16]

  for (index = startIndex; index < length + startIndex; index++) {
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	82fb      	strh	r3, [r7, #22]
 8002ade:	e014      	b.n	8002b0a <crcCalc+0x46>
    lookup = ((uint32_t) data[index] ^ (uint32_t) (remainder >> (CRCDATA_DATAWIDTH - (uint8_t) 8))) & (uint32_t) 0xFF;
 8002ae0:	8afb      	ldrh	r3, [r7, #22]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	4053      	eors	r3, r2
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	60fb      	str	r3, [r7, #12]
    remainder = (uint32_t) (crcTable[lookup] ^ (uint32_t) (remainder << (uint32_t) 8));
 8002af4:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <crcCalc+0x60>)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	4053      	eors	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
uint32_t crcCalc(const uint8_t* data, uint16_t startIndex, uint16_t length) {
  uint16_t index;
  uint32_t lookup;
  uint32_t remainder = CRCDATA_INITIALVAL;

  for (index = startIndex; index < length + startIndex; index++) {
 8002b04:	8afb      	ldrh	r3, [r7, #22]
 8002b06:	3301      	adds	r3, #1
 8002b08:	82fb      	strh	r3, [r7, #22]
 8002b0a:	8afa      	ldrh	r2, [r7, #22]
 8002b0c:	8839      	ldrh	r1, [r7, #0]
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	440b      	add	r3, r1
 8002b12:	429a      	cmp	r2, r3
 8002b14:	dbe4      	blt.n	8002ae0 <crcCalc+0x1c>
    lookup = ((uint32_t) data[index] ^ (uint32_t) (remainder >> (CRCDATA_DATAWIDTH - (uint8_t) 8))) & (uint32_t) 0xFF;
    remainder = (uint32_t) (crcTable[lookup] ^ (uint32_t) (remainder << (uint32_t) 8));
  }
  /* CRC result */
  return (uint32_t) (remainder ^ CRCDATA_FINAL_VAL) & CRCDATA_MASK;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	b29b      	uxth	r3, r3
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	20000030 	.word	0x20000030

08002b28 <buildTable>:
 * This function build the lookup table.
 * @param sCRCdata - CRC data struct
 * @return void.
 * @throws  none
 */
static void buildTable() {
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t topbit;
  uint32_t dividend;
  uint32_t bit;
  uint32_t remainder;

  topbit = (uint32_t) 1U << (CRCDATA_DATAWIDTH - (uint8_t) 1);
 8002b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b32:	603b      	str	r3, [r7, #0]

  //Compute the remainder of each possible dividend.
  for (dividend = 0U; dividend < 256U; dividend++) {
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e026      	b.n	8002b88 <buildTable+0x60>
    //Start with the dividend followed by zeros.
    remainder = (dividend << (CRCDATA_DATAWIDTH - (uint8_t) 8)) & CRCDATA_MASK;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	607b      	str	r3, [r7, #4]

    //Perform modulo-2 division, a bit at a time.
    for (bit = 8U; bit > 0U; bit--) {
 8002b42:	2308      	movs	r3, #8
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	e014      	b.n	8002b72 <buildTable+0x4a>
      //Try to divide the current data bit.
      if ((remainder & topbit) > 0U) {
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <buildTable+0x3c>
        remainder = ((remainder << 1U) ^ CRCDATA_POLYNOMIAL) & CRCDATA_MASK;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002b5a:	f083 0301 	eor.w	r3, r3, #1
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	e003      	b.n	8002b6c <buildTable+0x44>
      } else {
        remainder = (remainder << 1U) & CRCDATA_MASK;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	607b      	str	r3, [r7, #4]
  for (dividend = 0U; dividend < 256U; dividend++) {
    //Start with the dividend followed by zeros.
    remainder = (dividend << (CRCDATA_DATAWIDTH - (uint8_t) 8)) & CRCDATA_MASK;

    //Perform modulo-2 division, a bit at a time.
    for (bit = 8U; bit > 0U; bit--) {
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e7      	bne.n	8002b48 <buildTable+0x20>
      } else {
        remainder = (remainder << 1U) & CRCDATA_MASK;
      }
    }
    //Store the result into table.
    crcTable[dividend] = remainder;
 8002b78:	4907      	ldr	r1, [pc, #28]	; (8002b98 <buildTable+0x70>)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  uint32_t remainder;

  topbit = (uint32_t) 1U << (CRCDATA_DATAWIDTH - (uint8_t) 1);

  //Compute the remainder of each possible dividend.
  for (dividend = 0U; dividend < 256U; dividend++) {
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3301      	adds	r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2bff      	cmp	r3, #255	; 0xff
 8002b8c:	d9d5      	bls.n	8002b3a <buildTable+0x12>
      }
    }
    //Store the result into table.
    crcTable[dividend] = remainder;
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	20000030 	.word	0x20000030

08002b9c <setUpI2C2>:

	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
}

void setUpI2C2(void) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
	I2C_InitTypeDef I2C_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable I2C and GPIO clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002ba8:	f7fe feb4 	bl	8001914 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(I2C_CLOCK_2 | RCC_APB2Periph_AFIO, ENABLE);
 8002bac:	2101      	movs	r1, #1
 8002bae:	2009      	movs	r0, #9
 8002bb0:	f7fe fe92 	bl	80018d8 <RCC_APB2PeriphClockCmd>

	/* Configure I2C pins: SCL and SDA */
	GPIO_InitStructure.GPIO_Pin = I2C_SCL_2 | I2C_SDA_2;
 8002bb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bb8:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8002bbe:	231c      	movs	r3, #28
 8002bc0:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(I2C_PORT_2, &GPIO_InitStructure);
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4811      	ldr	r0, [pc, #68]	; (8002c0c <setUpI2C2+0x70>)
 8002bc8:	f7fe fa6c 	bl	80010a4 <GPIO_Init>

	/* I2C configuration */
	I2C_DeInit(I2C2);
 8002bcc:	4810      	ldr	r0, [pc, #64]	; (8002c10 <setUpI2C2+0x74>)
 8002bce:	f7fe fbb1 	bl	8001334 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002bd6:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002bda:	81fb      	strh	r3, [r7, #14]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	823b      	strh	r3, [r7, #16]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be4:	827b      	strh	r3, [r7, #18]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002be6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bea:	82bb      	strh	r3, [r7, #20]
	I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED_2;
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <setUpI2C2+0x78>)
 8002bee:	60bb      	str	r3, [r7, #8]

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C2, &I2C_InitStructure);
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4806      	ldr	r0, [pc, #24]	; (8002c10 <setUpI2C2+0x74>)
 8002bf8:	f7fe fbc0 	bl	800137c <I2C_Init>

	/* I2C Peripheral Enable */
	I2C_Cmd(I2C2, ENABLE);
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	4804      	ldr	r0, [pc, #16]	; (8002c10 <setUpI2C2+0x74>)
 8002c00:	f7fe fc7e 	bl	8001500 <I2C_Cmd>
}
 8002c04:	bf00      	nop
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40010c00 	.word	0x40010c00
 8002c10:	40005800 	.word	0x40005800
 8002c14:	00061a80 	.word	0x00061a80

08002c18 <setUpLoggerSDcard>:
//if you require to set up more then 1 USART then copy and edit the functions
//as necessary
//make sure to call the setUpUSART() method in the main method.
#include "USART.h"

void setUpLoggerSDcard(void) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
	/* Enable GPIO clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002c1e:	2101      	movs	r1, #1
 8002c20:	2008      	movs	r0, #8
 8002c22:	f7fe fe59 	bl	80018d8 <RCC_APB2PeriphClockCmd>
	/* Enable USART1 clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8002c26:	2101      	movs	r1, #1
 8002c28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c2c:	f7fe fe54 	bl	80018d8 <RCC_APB2PeriphClockCmd>
	//DMA 1 clock
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8002c30:	2101      	movs	r1, #1
 8002c32:	2001      	movs	r0, #1
 8002c34:	f7fe fe32 	bl	800189c <RCC_AHBPeriphClockCmd>


	GPIO_InitTypeDef GPIO_InitStruct;
	/* Configure USART Rx & Tx as alternate function */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8002c38:	23c0      	movs	r3, #192	; 0xc0
 8002c3a:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002c3c:	2318      	movs	r3, #24
 8002c3e:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002c40:	2303      	movs	r3, #3
 8002c42:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4811      	ldr	r0, [pc, #68]	; (8002c90 <setUpLoggerSDcard+0x78>)
 8002c4c:	f7fe fa2a 	bl	80010a4 <GPIO_Init>

	USART_InitTypeDef USART_InitStructure;

	GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);
 8002c50:	2101      	movs	r1, #1
 8002c52:	2004      	movs	r0, #4
 8002c54:	f7fe fafe 	bl	8001254 <GPIO_PinRemapConfig>

	USART_InitStructure.USART_BaudRate = 115200; //115200;	//SD card can go faster than Xbee
 8002c58:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c5c:	607b      	str	r3, [r7, #4]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8002c62:	2300      	movs	r3, #0
 8002c64:	817b      	strh	r3, [r7, #10]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8002c66:	2300      	movs	r3, #0
 8002c68:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_HardwareFlowControl =
 8002c6e:	2300      	movs	r3, #0
 8002c70:	823b      	strh	r3, [r7, #16]
			USART_HardwareFlowControl_None;

	USART_Init(USART1, &USART_InitStructure);
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4807      	ldr	r0, [pc, #28]	; (8002c94 <setUpLoggerSDcard+0x7c>)
 8002c78:	f7ff f96a 	bl	8001f50 <USART_Init>

	setUpDMA1channel4();
 8002c7c:	f000 f80c 	bl	8002c98 <setUpDMA1channel4>
	USART_Cmd(USART1, ENABLE);
 8002c80:	2101      	movs	r1, #1
 8002c82:	4804      	ldr	r0, [pc, #16]	; (8002c94 <setUpLoggerSDcard+0x7c>)
 8002c84:	f7ff fa1e 	bl	80020c4 <USART_Cmd>
}
 8002c88:	bf00      	nop
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40010c00 	.word	0x40010c00
 8002c94:	40013800 	.word	0x40013800

08002c98 <setUpDMA1channel4>:

void setUpDMA1channel4() {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	; 0x30
 8002c9c:	af00      	add	r7, sp, #0
	DMA_InitTypeDef DMA_InitStructure;
	//DMA_DeInit(DMA1_Channel7);
	DMA_StructInit(&DMA_InitStructure);
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe f969 	bl	8000f78 <DMA_StructInit>
	//DMA_InitStructure.DMA_Channel = DMA_Channel_4;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) (USART1_BASE + 0x04); //USART Data Register
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <setUpDMA1channel4+0x60>)
 8002ca8:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) TxBuff;
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <setUpDMA1channel4+0x64>)
 8002cac:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; //DMA_DIR_PeripheralSRC;//;//
 8002cae:	2310      	movs	r3, #16
 8002cb0:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_BufferSize = TX_BUFFER_SIZE;
 8002cb2:	2334      	movs	r3, #52	; 0x34
 8002cb4:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002cca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

	DMA_Init(DMA1_Channel4, &DMA_InitStructure);
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4809      	ldr	r0, [pc, #36]	; (8002d00 <setUpDMA1channel4+0x68>)
 8002cda:	f7fe f90f 	bl	8000efc <DMA_Init>

	USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	4808      	ldr	r0, [pc, #32]	; (8002d04 <setUpDMA1channel4+0x6c>)
 8002ce4:	f7ff fa0e 	bl	8002104 <USART_DMACmd>
	DMA_Cmd(DMA1_Channel4, ENABLE);
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <setUpDMA1channel4+0x68>)
 8002cec:	f7fe f96e 	bl	8000fcc <DMA_Cmd>
}
 8002cf0:	bf00      	nop
 8002cf2:	3730      	adds	r7, #48	; 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40013804 	.word	0x40013804
 8002cfc:	2000055c 	.word	0x2000055c
 8002d00:	40020044 	.word	0x40020044
 8002d04:	40013800 	.word	0x40013800

08002d08 <setUpLoopTimer>:

int proceed10ms = 0;
///////////////////////////////////////////////////////////////////////////
////////////////main loop timer ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void setUpLoopTimer(void) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002d0e:	2101      	movs	r1, #1
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7fe fdff 	bl	8001914 <RCC_APB1PeriphClockCmd>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 global Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; //set up the interrupt handler for TIM2
 8002d16:	231c      	movs	r3, #28
 8002d18:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&NVIC_InitStructure);
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fe96 	bl	8000a5c <NVIC_Init>

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;

	TIM_TimeBaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8002d30:	2300      	movs	r3, #0
 8002d32:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8002d34:	2300      	movs	r3, #0
 8002d36:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStruct.TIM_Period = (7200 / 4 - 1); //makes it 100Hz - confirmed on scope.
 8002d38:	f240 7307 	movw	r3, #1799	; 0x707
 8002d3c:	80bb      	strh	r3, [r7, #4]
//	TIM_TimeBaseStruct.TIM_Period = (3600 / 4 - 1); //experimenting, 200Hz
	//TIM_TimeBaseStruct.TIM_Period = (2888 / 4 - 1); //experimenting, 250Hz
	//TIM_TimeBaseStruct.TIM_Period = (1440 / 4 - 1); //experimenting, 500Hz
	TIM_TimeBaseStruct.TIM_Prescaler = 400 - 1;
 8002d3e:	f240 138f 	movw	r3, #399	; 0x18f
 8002d42:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseStruct.TIM_RepetitionCounter = 0x0000;
 8002d44:	2300      	movs	r3, #0
 8002d46:	723b      	strb	r3, [r7, #8]

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStruct);
 8002d48:	463b      	mov	r3, r7
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d50:	f7fe ff0e 	bl	8001b70 <TIM_TimeBaseInit>

	TIM_Cmd(TIM2, ENABLE);
 8002d54:	2101      	movs	r1, #1
 8002d56:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d5a:	f7ff f80b 	bl	8001d74 <TIM_Cmd>

	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	2101      	movs	r1, #1
 8002d62:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d66:	f7ff f84b 	bl	8001e00 <TIM_ITConfig>

}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop

08002d74 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 8002d78:	2101      	movs	r1, #1
 8002d7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d7e:	f7ff f8ad 	bl	8001edc <TIM_GetITStatus>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <TIM2_IRQHandler+0x24>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8002d88:	2101      	movs	r1, #1
 8002d8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d8e:	f7ff f8cf 	bl	8001f30 <TIM_ClearITPendingBit>

		proceed10ms = 1;
 8002d92:	4b02      	ldr	r3, [pc, #8]	; (8002d9c <TIM2_IRQHandler+0x28>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
	}
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000434 	.word	0x20000434

08002da0 <waitForEndTimerHz>:
			TIM_ICPolarity_Rising);

	TIM_Cmd(TIM3, ENABLE);
}

void waitForEndTimerHz(void) {
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
	while (proceed10ms == 0) //interrupt will set proceed to 1;
 8002da4:	bf00      	nop
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <waitForEndTimerHz+0x1c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0fb      	beq.n	8002da6 <waitForEndTimerHz+0x6>
	{

	}
	proceed10ms = 0;
 8002dae:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <waitForEndTimerHz+0x1c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	20000434 	.word	0x20000434

08002dc0 <setUpGPIO>:
//GPIO_Pin_6	GPIOA	SPI1_MISO / TIM8_BKIN / ADC12_IN6 / TIM3_CH1 with alternative function TIM1_BKIN
//GPIO_Pin_7	GPIOA	SPI1_MOSI / TIM8_CH1N / ADC12_IN7 / TIM3_CH2 with alternative function TIM1_CH1N
//GPIO_Pin_1	GPIOA	USART2_RTS / ADC123_IN1 / TIM5_CH2 / TIM2_CH2

void setUpGPIO(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB,ENABLE);
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	200c      	movs	r0, #12
 8002dca:	f7fe fd85 	bl	80018d8 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8002dce:	2101      	movs	r1, #1
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f7fe fd81 	bl	80018d8 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_11 | GPIO_Pin_12|GPIO_Pin_0;
 8002dd6:	f641 0301 	movw	r3, #6145	; 0x1801
 8002dda:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8002de0:	2310      	movs	r3, #16
 8002de2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	4819      	ldr	r0, [pc, #100]	; (8002e50 <setUpGPIO+0x90>)
 8002dea:	f7fe f95b 	bl	80010a4 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;	//for H-bridge pushbutton
 8002dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df2:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002df4:	2303      	movs	r3, #3
 8002df6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002df8:	2304      	movs	r3, #4
 8002dfa:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002dfc:	1d3b      	adds	r3, r7, #4
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4813      	ldr	r0, [pc, #76]	; (8002e50 <setUpGPIO+0x90>)
 8002e02:	f7fe f94f 	bl	80010a4 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7; //for encoder channels
 8002e06:	23c0      	movs	r3, #192	; 0xc0
 8002e08:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002e0e:	2304      	movs	r3, #4
 8002e10:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	480e      	ldr	r0, [pc, #56]	; (8002e50 <setUpGPIO+0x90>)
 8002e18:	f7fe f944 	bl	80010a4 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; //for current sensor to ADC
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	80bb      	strh	r3, [r7, #4]
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8002e20:	2300      	movs	r3, #0
 8002e22:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	4619      	mov	r1, r3
 8002e28:	4809      	ldr	r0, [pc, #36]	; (8002e50 <setUpGPIO+0x90>)
 8002e2a:	f7fe f93b 	bl	80010a4 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_8|GPIO_Pin_9;
 8002e2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e32:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e34:	2303      	movs	r3, #3
 8002e36:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8002e38:	2310      	movs	r3, #16
 8002e3a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4804      	ldr	r0, [pc, #16]	; (8002e54 <setUpGPIO+0x94>)
 8002e42:	f7fe f92f 	bl	80010a4 <GPIO_Init>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40010800 	.word	0x40010800
 8002e54:	40010c00 	.word	0x40010c00

08002e58 <setUpGyro>:

#include "gyro.h"
//////////////////////////////////////////////////////////////////////////
////////////////GYRO FUNCTIONS////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
void setUpGyro() {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
	initSPIgyro();
 8002e5c:	f000 f804 	bl	8002e68 <initSPIgyro>
	spiGyroRegisterSetup();
 8002e60:	f000 f856 	bl	8002f10 <spiGyroRegisterSetup>
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <initSPIgyro>:

void initSPIgyro(void) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002e6e:	2101      	movs	r1, #1
 8002e70:	2008      	movs	r0, #8
 8002e72:	f7fe fd31 	bl	80018d8 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8002e76:	2101      	movs	r1, #1
 8002e78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e7c:	f7fe fd4a 	bl	8001914 <RCC_APB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* Pack the struct */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8002e80:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002e84:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002e86:	2318      	movs	r3, #24
 8002e88:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8e:	f107 0314 	add.w	r3, r7, #20
 8002e92:	4619      	mov	r1, r3
 8002e94:	481c      	ldr	r0, [pc, #112]	; (8002f08 <initSPIgyro+0xa0>)
 8002e96:	f7fe f905 	bl	80010a4 <GPIO_Init>

	//Init CS-Pin
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12;
 8002e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e9e:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4619      	mov	r1, r3
 8002eae:	4816      	ldr	r0, [pc, #88]	; (8002f08 <initSPIgyro+0xa0>)
 8002eb0:	f7fe f8f8 	bl	80010a4 <GPIO_Init>

	GPIO_SetBits(GPIOB, GPIO_Pin_12);  //Set CS high
 8002eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eb8:	4813      	ldr	r0, [pc, #76]	; (8002f08 <initSPIgyro+0xa0>)
 8002eba:	f7fe f9af 	bl	800121c <GPIO_SetBits>

	SPI_InitTypeDef SPI_InitStructure;

	SPI_I2S_DeInit(SPI2);
 8002ebe:	4813      	ldr	r0, [pc, #76]	; (8002f0c <initSPIgyro+0xa4>)
 8002ec0:	f7fe fd82 	bl	80019c8 <SPI_I2S_DeInit>
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	803b      	strh	r3, [r7, #0]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8002ec8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002ecc:	807b      	strh	r3, [r7, #2]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8002eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ede:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2; //TODO THIS CHANGED FROM 8 TO 2
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8002ee8:	2307      	movs	r3, #7
 8002eea:	823b      	strh	r3, [r7, #16]

	SPI_Init(SPI2, &SPI_InitStructure);
 8002eec:	463b      	mov	r3, r7
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4806      	ldr	r0, [pc, #24]	; (8002f0c <initSPIgyro+0xa4>)
 8002ef2:	f7fe fda3 	bl	8001a3c <SPI_Init>

	SPI_Cmd(SPI2, ENABLE);
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4804      	ldr	r0, [pc, #16]	; (8002f0c <initSPIgyro+0xa4>)
 8002efa:	f7fe fde3 	bl	8001ac4 <SPI_Cmd>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40010c00 	.word	0x40010c00
 8002f0c:	40003800 	.word	0x40003800

08002f10 <spiGyroRegisterSetup>:
void spiGyroRegisterSetup(void) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	//10 11=380
	//11 00=760
	//11 01=760
	//11 10=760
	//11 11=760
	(void) writeSPIgyro(0b00100000, 0b11001111);//reg 0x20-ctrl_Reg1 (first 2 bits are "write" and "no increment"
 8002f14:	21cf      	movs	r1, #207	; 0xcf
 8002f16:	2020      	movs	r0, #32
 8002f18:	f000 f80a 	bl	8002f30 <writeSPIgyro>
	//BDU BLE FS1 FS0 - 0 0 SIM
	//BDU 0=continuous update 1=not updated until both read
	//BLE 0=data LSB at lower address
	//FS 00=250dps 01=500dps 10=2000dps 11=2000dps
	//SIM-SPI serial interface 0=4wire 1=3wire
	(void) writeSPIgyro(0b00100011, 0b10100000);	//reg 0x23-ctrl_Reg4, set to 2000dps, was 500dps (10)
 8002f1c:	21a0      	movs	r1, #160	; 0xa0
 8002f1e:	2023      	movs	r0, #35	; 0x23
 8002f20:	f000 f806 	bl	8002f30 <writeSPIgyro>
	//BOOT 0=normal
	//FIFO 0=disable
	//Hpen high pass filter 0=disable
	//INT default 0 to disable
	//out out selection configuration default 0
	(void) writeSPIgyro(0b00100100, 0b00000000);	//reg 0x24-ctrl_Reg5
 8002f24:	2100      	movs	r1, #0
 8002f26:	2024      	movs	r0, #36	; 0x24
 8002f28:	f000 f802 	bl	8002f30 <writeSPIgyro>
}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <writeSPIgyro>:
uint8_t writeSPIgyro(uint8_t regAdr, uint8_t data)	//also reads the register
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	460a      	mov	r2, r1
 8002f3a:	71fb      	strb	r3, [r7, #7]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	71bb      	strb	r3, [r7, #6]
	uint8_t dummyVar;
	int32_t val;

	/* Pull CS line low */
	GPIO_ResetBits(GPIOB, GPIO_Pin_12);
 8002f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f44:	4822      	ldr	r0, [pc, #136]	; (8002fd0 <writeSPIgyro+0xa0>)
 8002f46:	f7fe f977 	bl	8001238 <GPIO_ResetBits>

	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {
 8002f4a:	bf00      	nop
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	4821      	ldr	r0, [pc, #132]	; (8002fd4 <writeSPIgyro+0xa4>)
 8002f50:	f7fe fdf2 	bl	8001b38 <SPI_I2S_GetFlagStatus>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f8      	beq.n	8002f4c <writeSPIgyro+0x1c>
		/* Wait for all transmissions to complete */
	}
	SPI_I2S_SendData(SPI2, regAdr);    //Sensor Address that we are WRITING to
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	4619      	mov	r1, r3
 8002f60:	481c      	ldr	r0, [pc, #112]	; (8002fd4 <writeSPIgyro+0xa4>)
 8002f62:	f7fe fdcf 	bl	8001b04 <SPI_I2S_SendData>
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {
 8002f66:	bf00      	nop
 8002f68:	2101      	movs	r1, #1
 8002f6a:	481a      	ldr	r0, [pc, #104]	; (8002fd4 <writeSPIgyro+0xa4>)
 8002f6c:	f7fe fde4 	bl	8001b38 <SPI_I2S_GetFlagStatus>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f8      	beq.n	8002f68 <writeSPIgyro+0x38>
		/* Wait for data */
	}
	dummyVar = SPI_I2S_ReceiveData(SPI2);
 8002f76:	4817      	ldr	r0, [pc, #92]	; (8002fd4 <writeSPIgyro+0xa4>)
 8002f78:	f7fe fdd2 	bl	8001b20 <SPI_I2S_ReceiveData>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	73fb      	strb	r3, [r7, #15]

	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET) {
 8002f80:	bf00      	nop
 8002f82:	2102      	movs	r1, #2
 8002f84:	4813      	ldr	r0, [pc, #76]	; (8002fd4 <writeSPIgyro+0xa4>)
 8002f86:	f7fe fdd7 	bl	8001b38 <SPI_I2S_GetFlagStatus>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f8      	beq.n	8002f82 <writeSPIgyro+0x52>
		/* Wait for all transmissions to complete */
	}
	SPI_I2S_SendData(SPI2, data);    //Sensor Config
 8002f90:	79bb      	ldrb	r3, [r7, #6]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4619      	mov	r1, r3
 8002f96:	480f      	ldr	r0, [pc, #60]	; (8002fd4 <writeSPIgyro+0xa4>)
 8002f98:	f7fe fdb4 	bl	8001b04 <SPI_I2S_SendData>

	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET) {
 8002f9c:	bf00      	nop
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <writeSPIgyro+0xa4>)
 8002fa2:	f7fe fdc9 	bl	8001b38 <SPI_I2S_GetFlagStatus>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f8      	beq.n	8002f9e <writeSPIgyro+0x6e>
		/* Wait for data */
	}
	val = (u8) SPI_I2S_ReceiveData(SPI2);
 8002fac:	4809      	ldr	r0, [pc, #36]	; (8002fd4 <writeSPIgyro+0xa4>)
 8002fae:	f7fe fdb7 	bl	8001b20 <SPI_I2S_ReceiveData>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	60bb      	str	r3, [r7, #8]

	/* Pull CS line high */
	GPIO_SetBits(GPIOB, GPIO_Pin_12);
 8002fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fbc:	4804      	ldr	r0, [pc, #16]	; (8002fd0 <writeSPIgyro+0xa0>)
 8002fbe:	f7fe f92d 	bl	800121c <GPIO_SetBits>
	return (u8) val;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	b2db      	uxtb	r3, r3

}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40010c00 	.word	0x40010c00
 8002fd4:	40003800 	.word	0x40003800

08002fd8 <getGyro>:
void getGyro(u8* buffer, float* out) {
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
	//expressed as 2s compliment
	u8 crtlB;
	crtlB = (u8) writeSPIgyro(0b10100011, 0x00);
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	20a3      	movs	r0, #163	; 0xa3
 8002fe6:	f7ff ffa3 	bl	8002f30 <writeSPIgyro>
 8002fea:	4603      	mov	r3, r0
 8002fec:	76fb      	strb	r3, [r7, #27]
	u8 gyroXL = writeSPIgyro(0b10101000, 0x00);
 8002fee:	2100      	movs	r1, #0
 8002ff0:	20a8      	movs	r0, #168	; 0xa8
 8002ff2:	f7ff ff9d 	bl	8002f30 <writeSPIgyro>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	76bb      	strb	r3, [r7, #26]
	u8 gyroXH = writeSPIgyro(0b10101001, 0x00);
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	20a9      	movs	r0, #169	; 0xa9
 8002ffe:	f7ff ff97 	bl	8002f30 <writeSPIgyro>
 8003002:	4603      	mov	r3, r0
 8003004:	767b      	strb	r3, [r7, #25]
	u8 gyroYL = writeSPIgyro(0b10101010, 0x00);
 8003006:	2100      	movs	r1, #0
 8003008:	20aa      	movs	r0, #170	; 0xaa
 800300a:	f7ff ff91 	bl	8002f30 <writeSPIgyro>
 800300e:	4603      	mov	r3, r0
 8003010:	763b      	strb	r3, [r7, #24]
	u8 gyroYH = writeSPIgyro(0b10101011, 0x00);
 8003012:	2100      	movs	r1, #0
 8003014:	20ab      	movs	r0, #171	; 0xab
 8003016:	f7ff ff8b 	bl	8002f30 <writeSPIgyro>
 800301a:	4603      	mov	r3, r0
 800301c:	75fb      	strb	r3, [r7, #23]
	u8 gyroZL = writeSPIgyro(0b10101100, 0x00);
 800301e:	2100      	movs	r1, #0
 8003020:	20ac      	movs	r0, #172	; 0xac
 8003022:	f7ff ff85 	bl	8002f30 <writeSPIgyro>
 8003026:	4603      	mov	r3, r0
 8003028:	75bb      	strb	r3, [r7, #22]
	u8 gyroZH = writeSPIgyro(0b10101101, 0x00);
 800302a:	2100      	movs	r1, #0
 800302c:	20ad      	movs	r0, #173	; 0xad
 800302e:	f7ff ff7f 	bl	8002f30 <writeSPIgyro>
 8003032:	4603      	mov	r3, r0
 8003034:	757b      	strb	r3, [r7, #21]

	buffer[1] = gyroXL;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3301      	adds	r3, #1
 800303a:	7eba      	ldrb	r2, [r7, #26]
 800303c:	701a      	strb	r2, [r3, #0]
	buffer[0] = gyroXH;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7e7a      	ldrb	r2, [r7, #25]
 8003042:	701a      	strb	r2, [r3, #0]
	buffer[3] = gyroYL;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3303      	adds	r3, #3
 8003048:	7e3a      	ldrb	r2, [r7, #24]
 800304a:	701a      	strb	r2, [r3, #0]
	buffer[2] = gyroYH;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3302      	adds	r3, #2
 8003050:	7dfa      	ldrb	r2, [r7, #23]
 8003052:	701a      	strb	r2, [r3, #0]
	buffer[5] = gyroZL;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3305      	adds	r3, #5
 8003058:	7dba      	ldrb	r2, [r7, #22]
 800305a:	701a      	strb	r2, [r3, #0]
	buffer[4] = gyroZH;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	7d7a      	ldrb	r2, [r7, #21]
 8003062:	701a      	strb	r2, [r3, #0]
	u16 t = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	827b      	strh	r3, [r7, #18]
	int i = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
	u8 temp = (u8) (crtlB & 0x20);	//was 0x30
 800306c:	7efb      	ldrb	r3, [r7, #27]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	747b      	strb	r3, [r7, #17]
	switch (temp) {
 8003074:	7c7b      	ldrb	r3, [r7, #17]
 8003076:	2b10      	cmp	r3, #16
 8003078:	d04c      	beq.n	8003114 <getGyro+0x13c>
 800307a:	2b10      	cmp	r3, #16
 800307c:	dc02      	bgt.n	8003084 <getGyro+0xac>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <getGyro+0xba>
 8003082:	e0fe      	b.n	8003282 <getGyro+0x2aa>
 8003084:	2b20      	cmp	r3, #32
 8003086:	f000 8086 	beq.w	8003196 <getGyro+0x1be>
 800308a:	2b30      	cmp	r3, #48	; 0x30
 800308c:	f000 80be 	beq.w	800320c <getGyro+0x234>
 8003090:	e0f7      	b.n	8003282 <getGyro+0x2aa>
	case (u8) 0x00:    //250dps
		for (i = 0; i < 3; i++) {
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	e039      	b.n	800310c <getGyro+0x134>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	b21a      	sxth	r2, r3
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	3301      	adds	r3, #1
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	440b      	add	r3, r1
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	4313      	orrs	r3, r2
 80030b8:	b21b      	sxth	r3, r3
 80030ba:	827b      	strh	r3, [r7, #18]
			s16 temp2 = twosCompToDec16(t);
 80030bc:	8a7b      	ldrh	r3, [r7, #18]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f900 	bl	80032c4 <twosCompToDec16>
 80030c4:	4603      	mov	r3, r0
 80030c6:	81fb      	strh	r3, [r7, #14]
			out[i] = (float) ((temp2 * 8.75 / 1000.0));
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	18d4      	adds	r4, r2, r3
 80030d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd f9f9 	bl	80004cc <__aeabi_i2d>
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <getGyro+0x2e0>)
 80030e0:	f7fd fa5a 	bl	8000598 <__aeabi_dmul>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	4b72      	ldr	r3, [pc, #456]	; (80032bc <getGyro+0x2e4>)
 80030f2:	f7fd fb7b 	bl	80007ec <__aeabi_ddiv>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f7fd fc5d 	bl	80009bc <__aeabi_d2f>
 8003102:	4603      	mov	r3, r0
 8003104:	6023      	str	r3, [r4, #0]
	u16 t = 0;
	int i = 0;
	u8 temp = (u8) (crtlB & 0x20);	//was 0x30
	switch (temp) {
	case (u8) 0x00:    //250dps
		for (i = 0; i < 3; i++) {
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b02      	cmp	r3, #2
 8003110:	ddc2      	ble.n	8003098 <getGyro+0xc0>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 8.75 / 1000.0));
		}
		break;
 8003112:	e0b6      	b.n	8003282 <getGyro+0x2aa>
	case (u8) 0x10:    //500dps
		for (i = 0; i < 3; i++) {
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	e039      	b.n	800318e <getGyro+0x1b6>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	b21a      	sxth	r2, r3
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	3301      	adds	r3, #1
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	440b      	add	r3, r1
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b21b      	sxth	r3, r3
 8003138:	4313      	orrs	r3, r2
 800313a:	b21b      	sxth	r3, r3
 800313c:	827b      	strh	r3, [r7, #18]
			s16 temp2 = twosCompToDec16(t);
 800313e:	8a7b      	ldrh	r3, [r7, #18]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 f8bf 	bl	80032c4 <twosCompToDec16>
 8003146:	4603      	mov	r3, r0
 8003148:	81bb      	strh	r3, [r7, #12]
			out[i] = (float) ((temp2 * 17.5 / 1000.0));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	18d4      	adds	r4, r2, r3
 8003152:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd f9b8 	bl	80004cc <__aeabi_i2d>
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	4b57      	ldr	r3, [pc, #348]	; (80032c0 <getGyro+0x2e8>)
 8003162:	f7fd fa19 	bl	8000598 <__aeabi_dmul>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	4b52      	ldr	r3, [pc, #328]	; (80032bc <getGyro+0x2e4>)
 8003174:	f7fd fb3a 	bl	80007ec <__aeabi_ddiv>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4610      	mov	r0, r2
 800317e:	4619      	mov	r1, r3
 8003180:	f7fd fc1c 	bl	80009bc <__aeabi_d2f>
 8003184:	4603      	mov	r3, r0
 8003186:	6023      	str	r3, [r4, #0]
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 8.75 / 1000.0));
		}
		break;
	case (u8) 0x10:    //500dps
		for (i = 0; i < 3; i++) {
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	3301      	adds	r3, #1
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2b02      	cmp	r3, #2
 8003192:	ddc2      	ble.n	800311a <getGyro+0x142>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 17.5 / 1000.0));
		}
		break;
 8003194:	e075      	b.n	8003282 <getGyro+0x2aa>
	case (u8) 0x20:    //2000dps
		for (i = 0; i < 3; i++) {
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	e033      	b.n	8003204 <getGyro+0x22c>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	461a      	mov	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	b21a      	sxth	r2, r3
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	3301      	adds	r3, #1
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	440b      	add	r3, r1
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	b21b      	sxth	r3, r3
 80031ba:	4313      	orrs	r3, r2
 80031bc:	b21b      	sxth	r3, r3
 80031be:	827b      	strh	r3, [r7, #18]
			s16 temp2 = twosCompToDec16(t);
 80031c0:	8a7b      	ldrh	r3, [r7, #18]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f87e 	bl	80032c4 <twosCompToDec16>
 80031c8:	4603      	mov	r3, r0
 80031ca:	817b      	strh	r3, [r7, #10]
			out[i] = (float) ((temp2 * 70 / 1000.0));
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	18d4      	adds	r4, r2, r3
 80031d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031d8:	2246      	movs	r2, #70	; 0x46
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f974 	bl	80004cc <__aeabi_i2d>
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	4b34      	ldr	r3, [pc, #208]	; (80032bc <getGyro+0x2e4>)
 80031ea:	f7fd faff 	bl	80007ec <__aeabi_ddiv>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	f7fd fbe1 	bl	80009bc <__aeabi_d2f>
 80031fa:	4603      	mov	r3, r0
 80031fc:	6023      	str	r3, [r4, #0]
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 17.5 / 1000.0));
		}
		break;
	case (u8) 0x20:    //2000dps
		for (i = 0; i < 3; i++) {
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3301      	adds	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b02      	cmp	r3, #2
 8003208:	ddc8      	ble.n	800319c <getGyro+0x1c4>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 70 / 1000.0));
		}
		break;
 800320a:	e03a      	b.n	8003282 <getGyro+0x2aa>
	case (u8) 0x30:    //20000dps
		for (i = 0; i < 3; i++) {
 800320c:	2300      	movs	r3, #0
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	e033      	b.n	800327a <getGyro+0x2a2>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	b21a      	sxth	r2, r3
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	3301      	adds	r3, #1
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	440b      	add	r3, r1
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	b21b      	sxth	r3, r3
 8003230:	4313      	orrs	r3, r2
 8003232:	b21b      	sxth	r3, r3
 8003234:	827b      	strh	r3, [r7, #18]
			s16 temp2 = twosCompToDec16(t);
 8003236:	8a7b      	ldrh	r3, [r7, #18]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 f843 	bl	80032c4 <twosCompToDec16>
 800323e:	4603      	mov	r3, r0
 8003240:	813b      	strh	r3, [r7, #8]
			out[i] = (float) ((temp2 * 70 / 1000.0));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	18d4      	adds	r4, r2, r3
 800324a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800324e:	2246      	movs	r2, #70	; 0x46
 8003250:	fb02 f303 	mul.w	r3, r2, r3
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd f939 	bl	80004cc <__aeabi_i2d>
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <getGyro+0x2e4>)
 8003260:	f7fd fac4 	bl	80007ec <__aeabi_ddiv>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	f7fd fba6 	bl	80009bc <__aeabi_d2f>
 8003270:	4603      	mov	r3, r0
 8003272:	6023      	str	r3, [r4, #0]
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 70 / 1000.0));
		}
		break;
	case (u8) 0x30:    //20000dps
		for (i = 0; i < 3; i++) {
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	3301      	adds	r3, #1
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	2b02      	cmp	r3, #2
 800327e:	ddc8      	ble.n	8003212 <getGyro+0x23a>
			t = (((u16) buffer[2 * i] << 8) | buffer[2 * i + 1]);
			s16 temp2 = twosCompToDec16(t);
			out[i] = (float) ((temp2 * 70 / 1000.0));
		}
		break;
 8003280:	bf00      	nop
	}
	buffer[0] = gyroXL;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	7eba      	ldrb	r2, [r7, #26]
 8003286:	701a      	strb	r2, [r3, #0]
	buffer[1] = gyroXH;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3301      	adds	r3, #1
 800328c:	7e7a      	ldrb	r2, [r7, #25]
 800328e:	701a      	strb	r2, [r3, #0]
	buffer[2] = gyroYL;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3302      	adds	r3, #2
 8003294:	7e3a      	ldrb	r2, [r7, #24]
 8003296:	701a      	strb	r2, [r3, #0]
	buffer[3] = gyroYH;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3303      	adds	r3, #3
 800329c:	7dfa      	ldrb	r2, [r7, #23]
 800329e:	701a      	strb	r2, [r3, #0]
	buffer[4] = gyroZL;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	7dba      	ldrb	r2, [r7, #22]
 80032a6:	701a      	strb	r2, [r3, #0]
	buffer[5] = gyroZH;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3305      	adds	r3, #5
 80032ac:	7d7a      	ldrb	r2, [r7, #21]
 80032ae:	701a      	strb	r2, [r3, #0]
}
 80032b0:	bf00      	nop
 80032b2:	3724      	adds	r7, #36	; 0x24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd90      	pop	{r4, r7, pc}
 80032b8:	40218000 	.word	0x40218000
 80032bc:	408f4000 	.word	0x408f4000
 80032c0:	40318000 	.word	0x40318000

080032c4 <twosCompToDec16>:
	//*temp = (u8) writeSPIgyro(0b10100110, 0x00);
	temp[0] = (uint8_t) writeSPIgyro(0b10100110, 0x00);
	temp[1] = readADCtempValue();
}
s16 twosCompToDec16(u16 val)    //for 16 bit
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	80fb      	strh	r3, [r7, #6]
	u16 v = val;
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	81bb      	strh	r3, [r7, #12]
	s16 temp = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	81fb      	strh	r3, [r7, #14]
	if ((v & 0b1000000000000000) == 0b1000000000000000) {
 80032d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	da02      	bge.n	80032e4 <twosCompToDec16+0x20>
		temp = -32768;
 80032de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e2:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000000001) == 0b0000000000000001) {
 80032e4:	89bb      	ldrh	r3, [r7, #12]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <twosCompToDec16+0x32>
		temp = temp + 1;
 80032ee:	89fb      	ldrh	r3, [r7, #14]
 80032f0:	3301      	adds	r3, #1
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000000010) == 0b0000000000000010) {
 80032f6:	89bb      	ldrh	r3, [r7, #12]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <twosCompToDec16+0x44>
		temp = temp + 2;
 8003300:	89fb      	ldrh	r3, [r7, #14]
 8003302:	3302      	adds	r3, #2
 8003304:	b29b      	uxth	r3, r3
 8003306:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000000100) == 0b0000000000000100) {
 8003308:	89bb      	ldrh	r3, [r7, #12]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <twosCompToDec16+0x56>
		temp = temp + 4;
 8003312:	89fb      	ldrh	r3, [r7, #14]
 8003314:	3304      	adds	r3, #4
 8003316:	b29b      	uxth	r3, r3
 8003318:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000001000) == 0b0000000000001000) {
 800331a:	89bb      	ldrh	r3, [r7, #12]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <twosCompToDec16+0x68>
		temp = temp + 8;
 8003324:	89fb      	ldrh	r3, [r7, #14]
 8003326:	3308      	adds	r3, #8
 8003328:	b29b      	uxth	r3, r3
 800332a:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000010000) == 0b0000000000010000) {
 800332c:	89bb      	ldrh	r3, [r7, #12]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <twosCompToDec16+0x7a>
		temp = temp + 16;
 8003336:	89fb      	ldrh	r3, [r7, #14]
 8003338:	3310      	adds	r3, #16
 800333a:	b29b      	uxth	r3, r3
 800333c:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000000100000) == 0b0000000000100000) {
 800333e:	89bb      	ldrh	r3, [r7, #12]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <twosCompToDec16+0x8c>
		temp = temp + 32;
 8003348:	89fb      	ldrh	r3, [r7, #14]
 800334a:	3320      	adds	r3, #32
 800334c:	b29b      	uxth	r3, r3
 800334e:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000001000000) == 0b0000000001000000) {
 8003350:	89bb      	ldrh	r3, [r7, #12]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <twosCompToDec16+0x9e>
		temp = temp + 64;
 800335a:	89fb      	ldrh	r3, [r7, #14]
 800335c:	3340      	adds	r3, #64	; 0x40
 800335e:	b29b      	uxth	r3, r3
 8003360:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000010000000) == 0b0000000010000000) {
 8003362:	89bb      	ldrh	r3, [r7, #12]
 8003364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <twosCompToDec16+0xb0>
		temp = temp + 128;
 800336c:	89fb      	ldrh	r3, [r7, #14]
 800336e:	3380      	adds	r3, #128	; 0x80
 8003370:	b29b      	uxth	r3, r3
 8003372:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000000100000000) == 0b0000000100000000) {
 8003374:	89bb      	ldrh	r3, [r7, #12]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <twosCompToDec16+0xc4>
		temp = temp + 256;
 800337e:	89fb      	ldrh	r3, [r7, #14]
 8003380:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003384:	b29b      	uxth	r3, r3
 8003386:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000001000000000) == 0b0000001000000000) {
 8003388:	89bb      	ldrh	r3, [r7, #12]
 800338a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <twosCompToDec16+0xd8>
		temp = temp + 512;
 8003392:	89fb      	ldrh	r3, [r7, #14]
 8003394:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003398:	b29b      	uxth	r3, r3
 800339a:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000010000000000) == 0b0000010000000000) {
 800339c:	89bb      	ldrh	r3, [r7, #12]
 800339e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d004      	beq.n	80033b0 <twosCompToDec16+0xec>
		temp = temp + 1024;
 80033a6:	89fb      	ldrh	r3, [r7, #14]
 80033a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0000100000000000) == 0b0000100000000000) {
 80033b0:	89bb      	ldrh	r3, [r7, #12]
 80033b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d004      	beq.n	80033c4 <twosCompToDec16+0x100>
		temp = temp + 2048;
 80033ba:	89fb      	ldrh	r3, [r7, #14]
 80033bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0001000000000000) == 0b0001000000000000) {
 80033c4:	89bb      	ldrh	r3, [r7, #12]
 80033c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <twosCompToDec16+0x114>
		temp = temp + 4096;
 80033ce:	89fb      	ldrh	r3, [r7, #14]
 80033d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0010000000000000) == 0b0010000000000000) {
 80033d8:	89bb      	ldrh	r3, [r7, #12]
 80033da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <twosCompToDec16+0x128>
		temp = temp + 8192;
 80033e2:	89fb      	ldrh	r3, [r7, #14]
 80033e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	81fb      	strh	r3, [r7, #14]
	}
	if ((v & 0b0100000000000000) == 0b0100000000000000) {
 80033ec:	89bb      	ldrh	r3, [r7, #12]
 80033ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d004      	beq.n	8003400 <twosCompToDec16+0x13c>
		temp = temp + 16384;
 80033f6:	89fb      	ldrh	r3, [r7, #14]
 80033f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	81fb      	strh	r3, [r7, #14]
	}

	return (s16) temp;
 8003400:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop

08003410 <main>:

void setUpEncoder();
void convertDataToBytes(void);
void toggleGPIOpin(uint8_t *status);

int main(void) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af04      	add	r7, sp, #16
	int i = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
	int tempDistance = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	607b      	str	r3, [r7, #4]
	serialTerminal_Init();
 800341e:	f000 f9a5 	bl	800376c <serialTerminal_Init>
	setUpLoopTimer();
 8003422:	f7ff fc71 	bl	8002d08 <setUpLoopTimer>
//	setUpEncoder();
	setUpGPIO();	//TODO check this later.
 8003426:	f7ff fccb 	bl	8002dc0 <setUpGPIO>
	setUpEcompass();	//I2C halts main loop if we don't set this up...
 800342a:	f7fe ff91 	bl	8002350 <setUpEcompass>
	setUpGyro();
 800342e:	f7ff fd13 	bl	8002e58 <setUpGyro>
	setUpADC();	//this also sets up DMA...
 8003432:	f7fe fe8b 	bl	800214c <setUpADC>
	setUpLoggerSDcard();
 8003436:	f7ff fbef 	bl	8002c18 <setUpLoggerSDcard>
	setUpPWM();
 800343a:	f000 f941 	bl	80036c0 <setUpPWM>
//	setUpLIDAR(0);		//0 ---> default settings

	while (1) {
		toggleGPIOpin(&status);
 800343e:	482f      	ldr	r0, [pc, #188]	; (80034fc <main+0xec>)
 8003440:	f000 f87c 	bl	800353c <toggleGPIOpin>
		//TRUE: Take a measurement with receiver bias correction
		//FALSE: Take a measurement without receiver bias correction
		//LIDAR needs 4 wires - red/black for 5V/GND, and green/blue for SCL/SDA on PB8/PB9
//		tempDistance = getDistanceLIDAR(false);

		getAcc(acc8, acc);
 8003444:	492e      	ldr	r1, [pc, #184]	; (8003500 <main+0xf0>)
 8003446:	482f      	ldr	r0, [pc, #188]	; (8003504 <main+0xf4>)
 8003448:	f7ff f952 	bl	80026f0 <getAcc>
		getGyro(gyro8, gyro);
 800344c:	492e      	ldr	r1, [pc, #184]	; (8003508 <main+0xf8>)
 800344e:	482f      	ldr	r0, [pc, #188]	; (800350c <main+0xfc>)
 8003450:	f7ff fdc2 	bl	8002fd8 <getGyro>
		readADCdma(adcValDMA, &motorCurrent);//for getting temperature, a u16 val
 8003454:	492e      	ldr	r1, [pc, #184]	; (8003510 <main+0x100>)
 8003456:	482f      	ldr	r0, [pc, #188]	; (8003514 <main+0x104>)
 8003458:	f7fe ff12 	bl	8002280 <readADCdma>
		temperature[1] = (uint8_t) ((V25 - adcValDMA[0]) / Avg_Slope + 25);
 800345c:	4b2e      	ldr	r3, [pc, #184]	; (8003518 <main+0x108>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <main+0x104>)
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	4a2c      	ldr	r2, [pc, #176]	; (800351c <main+0x10c>)
 800346a:	8812      	ldrh	r2, [r2, #0]
 800346c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003470:	b2db      	uxtb	r3, r3
 8003472:	3319      	adds	r3, #25
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <main+0x110>)
 8003478:	705a      	strb	r2, [r3, #1]

		for (int p = 0; p < sizeof(TxBuff); p++) {
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	e007      	b.n	8003490 <main+0x80>
			TxBuff[p] = 0;
 8003480:	4a28      	ldr	r2, [pc, #160]	; (8003524 <main+0x114>)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4413      	add	r3, r2
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
		getAcc(acc8, acc);
		getGyro(gyro8, gyro);
		readADCdma(adcValDMA, &motorCurrent);//for getting temperature, a u16 val
		temperature[1] = (uint8_t) ((V25 - adcValDMA[0]) / Avg_Slope + 25);

		for (int p = 0; p < sizeof(TxBuff); p++) {
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3301      	adds	r3, #1
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b33      	cmp	r3, #51	; 0x33
 8003494:	d9f4      	bls.n	8003480 <main+0x70>
			TxBuff[p] = 0;
		}

		DMA_Cmd(DMA1_Channel7, DISABLE);
 8003496:	2100      	movs	r1, #0
 8003498:	4823      	ldr	r0, [pc, #140]	; (8003528 <main+0x118>)
 800349a:	f7fd fd97 	bl	8000fcc <DMA_Cmd>
		DMA_SetCurrDataCounter(DMA1_Channel7, sizeof(TxBuff));
 800349e:	2134      	movs	r1, #52	; 0x34
 80034a0:	4821      	ldr	r0, [pc, #132]	; (8003528 <main+0x118>)
 80034a2:	f7fd fdaf 	bl	8001004 <DMA_SetCurrDataCounter>
		DMA_Cmd(DMA1_Channel4, DISABLE);
 80034a6:	2100      	movs	r1, #0
 80034a8:	4820      	ldr	r0, [pc, #128]	; (800352c <main+0x11c>)
 80034aa:	f7fd fd8f 	bl	8000fcc <DMA_Cmd>
		DMA_SetCurrDataCounter(DMA1_Channel4, sizeof(TxBuff));
 80034ae:	2134      	movs	r1, #52	; 0x34
 80034b0:	481e      	ldr	r0, [pc, #120]	; (800352c <main+0x11c>)
 80034b2:	f7fd fda7 	bl	8001004 <DMA_SetCurrDataCounter>

		//Four payloads, gyro/acc/angles/MiscPayload
		convertDataToBytes();
 80034b6:	f000 f861 	bl	800357c <convertDataToBytes>
		serialTerminal_packetize(gyro8, acc8, angles8, MiscPayload8,
 80034ba:	2311      	movs	r3, #17
 80034bc:	9303      	str	r3, [sp, #12]
 80034be:	230c      	movs	r3, #12
 80034c0:	9302      	str	r3, [sp, #8]
 80034c2:	2306      	movs	r3, #6
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2306      	movs	r3, #6
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	4b19      	ldr	r3, [pc, #100]	; (8003530 <main+0x120>)
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <main+0x124>)
 80034ce:	490d      	ldr	r1, [pc, #52]	; (8003504 <main+0xf4>)
 80034d0:	480e      	ldr	r0, [pc, #56]	; (800350c <main+0xfc>)
 80034d2:	f000 f951 	bl	8003778 <serialTerminal_packetize>
				sizeof(gyro8), sizeof(acc8), sizeof(angles8),
				sizeof(MiscPayload8));

		//SD card data
		DMA_Cmd(DMA1_Channel4, ENABLE);
 80034d6:	2101      	movs	r1, #1
 80034d8:	4814      	ldr	r0, [pc, #80]	; (800352c <main+0x11c>)
 80034da:	f7fd fd77 	bl	8000fcc <DMA_Cmd>
		USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
 80034de:	2201      	movs	r2, #1
 80034e0:	2180      	movs	r1, #128	; 0x80
 80034e2:	4815      	ldr	r0, [pc, #84]	; (8003538 <main+0x128>)
 80034e4:	f7fe fe0e 	bl	8002104 <USART_DMACmd>
		USART_Cmd(USART1, ENABLE);
 80034e8:	2101      	movs	r1, #1
 80034ea:	4813      	ldr	r0, [pc, #76]	; (8003538 <main+0x128>)
 80034ec:	f7fe fdea 	bl	80020c4 <USART_Cmd>

		//Toggle PA11 to test loop frequency
//		toggleGPIOpin(&status);
		//wait until next run, to maintain 200Hz sync
		waitForEndTimerHz();
 80034f0:	f7ff fc56 	bl	8002da0 <waitForEndTimerHz>
		i++;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3301      	adds	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
	}
 80034fa:	e7a0      	b.n	800343e <main+0x2e>
 80034fc:	20000438 	.word	0x20000438
 8003500:	20000598 	.word	0x20000598
 8003504:	20000624 	.word	0x20000624
 8003508:	200005bc 	.word	0x200005bc
 800350c:	20000590 	.word	0x20000590
 8003510:	200005a4 	.word	0x200005a4
 8003514:	20000638 	.word	0x20000638
 8003518:	20000446 	.word	0x20000446
 800351c:	20000444 	.word	0x20000444
 8003520:	200005b8 	.word	0x200005b8
 8003524:	2000055c 	.word	0x2000055c
 8003528:	40020080 	.word	0x40020080
 800352c:	40020044 	.word	0x40020044
 8003530:	200005d4 	.word	0x200005d4
 8003534:	20000600 	.word	0x20000600
 8003538:	40013800 	.word	0x40013800

0800353c <toggleGPIOpin>:
}

void toggleGPIOpin(uint8_t *status) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	if (*status == 0) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d108      	bne.n	800355e <toggleGPIOpin+0x22>
		GPIO_SetBits(GPIOA, GPIO_Pin_11);
 800354c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003550:	4809      	ldr	r0, [pc, #36]	; (8003578 <toggleGPIOpin+0x3c>)
 8003552:	f7fd fe63 	bl	800121c <GPIO_SetBits>
		*status = 1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
	} else {
		GPIO_ResetBits(GPIOA, GPIO_Pin_11);
		*status = 0;
	}
}
 800355c:	e007      	b.n	800356e <toggleGPIOpin+0x32>
void toggleGPIOpin(uint8_t *status) {
	if (*status == 0) {
		GPIO_SetBits(GPIOA, GPIO_Pin_11);
		*status = 1;
	} else {
		GPIO_ResetBits(GPIOA, GPIO_Pin_11);
 800355e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003562:	4805      	ldr	r0, [pc, #20]	; (8003578 <toggleGPIOpin+0x3c>)
 8003564:	f7fd fe68 	bl	8001238 <GPIO_ResetBits>
		*status = 0;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
	}
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40010800 	.word	0x40010800

0800357c <convertDataToBytes>:

void convertDataToBytes() {
 800357c:	b480      	push	{r7}
 800357e:	b08f      	sub	sp, #60	; 0x3c
 8003580:	af00      	add	r7, sp, #0
	union {
		char temp_char[12];
		float temp_int_buffer[3];
	} buffer_to_char_union1;
	buffer_to_char_union1.temp_int_buffer[0] = angles[0];
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <convertDataToBytes+0x124>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	617b      	str	r3, [r7, #20]
	buffer_to_char_union1.temp_int_buffer[1] = angles[1];
 8003588:	4b45      	ldr	r3, [pc, #276]	; (80036a0 <convertDataToBytes+0x124>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	61bb      	str	r3, [r7, #24]
	buffer_to_char_union1.temp_int_buffer[2] = angles[2];
 800358e:	4b44      	ldr	r3, [pc, #272]	; (80036a0 <convertDataToBytes+0x124>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 12; i++) {
 8003594:	2300      	movs	r3, #0
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
 8003598:	e00c      	b.n	80035b4 <convertDataToBytes+0x38>
		angles8[i] = buffer_to_char_union1.temp_char[i];
 800359a:	f107 0214 	add.w	r2, r7, #20
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	4413      	add	r3, r2
 80035a2:	7819      	ldrb	r1, [r3, #0]
 80035a4:	4a3f      	ldr	r2, [pc, #252]	; (80036a4 <convertDataToBytes+0x128>)
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	4413      	add	r3, r2
 80035aa:	460a      	mov	r2, r1
 80035ac:	701a      	strb	r2, [r3, #0]
		float temp_int_buffer[3];
	} buffer_to_char_union1;
	buffer_to_char_union1.temp_int_buffer[0] = angles[0];
	buffer_to_char_union1.temp_int_buffer[1] = angles[1];
	buffer_to_char_union1.temp_int_buffer[2] = angles[2];
	for (int i = 0; i < 12; i++) {
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	3301      	adds	r3, #1
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	2b0b      	cmp	r3, #11
 80035b8:	ddef      	ble.n	800359a <convertDataToBytes+0x1e>
	//	buffer_to_char_union2.temp_signed[0] = temperature[0];
	//	buffer_to_char_union2.temp_signed[1] = temperature[1];
	//	for (int i = 0; i < 2; i++) {
	//		MiscPayload8[i] = buffer_to_char_union2.temp_unsigned[i];
	//	}
	for (int i = 0; i < 1; i++) {
 80035ba:	2300      	movs	r3, #0
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
 80035be:	e006      	b.n	80035ce <convertDataToBytes+0x52>
		//		MiscPayload8[i] = temperature[i];
		MiscPayload8[0] = temperature[1];
 80035c0:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <convertDataToBytes+0x12c>)
 80035c2:	785a      	ldrb	r2, [r3, #1]
 80035c4:	4b39      	ldr	r3, [pc, #228]	; (80036ac <convertDataToBytes+0x130>)
 80035c6:	701a      	strb	r2, [r3, #0]
	//	buffer_to_char_union2.temp_signed[0] = temperature[0];
	//	buffer_to_char_union2.temp_signed[1] = temperature[1];
	//	for (int i = 0; i < 2; i++) {
	//		MiscPayload8[i] = buffer_to_char_union2.temp_unsigned[i];
	//	}
	for (int i = 0; i < 1; i++) {
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	3301      	adds	r3, #1
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	ddf5      	ble.n	80035c0 <convertDataToBytes+0x44>

	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union3;
	buffer_to_char_union3.temp_int_buffer = PWMval;
 80035d4:	4b36      	ldr	r3, [pc, #216]	; (80036b0 <convertDataToBytes+0x134>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	613b      	str	r3, [r7, #16]
	for (int i = 1; i < 5; i++) {
 80035da:	2301      	movs	r3, #1
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035de:	e00e      	b.n	80035fe <convertDataToBytes+0x82>
		MiscPayload8[i] = buffer_to_char_union3.temp_char[i - 1];
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	3b01      	subs	r3, #1
 80035e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035e8:	4413      	add	r3, r2
 80035ea:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80035ee:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <convertDataToBytes+0x130>)
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	4413      	add	r3, r2
 80035f4:	460a      	mov	r2, r1
 80035f6:	701a      	strb	r2, [r3, #0]
	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union3;
	buffer_to_char_union3.temp_int_buffer = PWMval;
	for (int i = 1; i < 5; i++) {
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	3301      	adds	r3, #1
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	2b04      	cmp	r3, #4
 8003602:	dded      	ble.n	80035e0 <convertDataToBytes+0x64>

	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union4;
	buffer_to_char_union4.temp_int_buffer = shaft_revs;
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <convertDataToBytes+0x138>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
	for (int i = 5; i < 9; i++) {
 800360a:	2305      	movs	r3, #5
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
 800360e:	e00e      	b.n	800362e <convertDataToBytes+0xb2>
		MiscPayload8[i] = buffer_to_char_union4.temp_char[i - 5];
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	3b05      	subs	r3, #5
 8003614:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003618:	4413      	add	r3, r2
 800361a:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
 800361e:	4a23      	ldr	r2, [pc, #140]	; (80036ac <convertDataToBytes+0x130>)
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	4413      	add	r3, r2
 8003624:	460a      	mov	r2, r1
 8003626:	701a      	strb	r2, [r3, #0]
	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union4;
	buffer_to_char_union4.temp_int_buffer = shaft_revs;
	for (int i = 5; i < 9; i++) {
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	3301      	adds	r3, #1
 800362c:	62bb      	str	r3, [r7, #40]	; 0x28
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	2b08      	cmp	r3, #8
 8003632:	dded      	ble.n	8003610 <convertDataToBytes+0x94>

	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union5;
	buffer_to_char_union5.temp_int_buffer = shaft_speed;
 8003634:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <convertDataToBytes+0x13c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60bb      	str	r3, [r7, #8]
	for (int i = 9; i < 13; i++) {
 800363a:	2309      	movs	r3, #9
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	e00e      	b.n	800365e <convertDataToBytes+0xe2>
		MiscPayload8[i] = buffer_to_char_union5.temp_char[i - 9];
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	3b09      	subs	r3, #9
 8003644:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003648:	4413      	add	r3, r2
 800364a:	f813 1c30 	ldrb.w	r1, [r3, #-48]
 800364e:	4a17      	ldr	r2, [pc, #92]	; (80036ac <convertDataToBytes+0x130>)
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	4413      	add	r3, r2
 8003654:	460a      	mov	r2, r1
 8003656:	701a      	strb	r2, [r3, #0]
	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union5;
	buffer_to_char_union5.temp_int_buffer = shaft_speed;
	for (int i = 9; i < 13; i++) {
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	3301      	adds	r3, #1
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	2b0c      	cmp	r3, #12
 8003662:	dded      	ble.n	8003640 <convertDataToBytes+0xc4>

	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union6;
	buffer_to_char_union6.temp_int_buffer = motorCurrent;
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <convertDataToBytes+0x140>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	607b      	str	r3, [r7, #4]
	for (int i = 13; i < 17; i++) {
 800366a:	230d      	movs	r3, #13
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	e00e      	b.n	800368e <convertDataToBytes+0x112>
		MiscPayload8[i] = buffer_to_char_union6.temp_char[i - 13];
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	3b0d      	subs	r3, #13
 8003674:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003678:	4413      	add	r3, r2
 800367a:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 800367e:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <convertDataToBytes+0x130>)
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	4413      	add	r3, r2
 8003684:	460a      	mov	r2, r1
 8003686:	701a      	strb	r2, [r3, #0]
	union {
		char temp_char[4];
		float temp_int_buffer;
	} buffer_to_char_union6;
	buffer_to_char_union6.temp_int_buffer = motorCurrent;
	for (int i = 13; i < 17; i++) {
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	3301      	adds	r3, #1
 800368c:	623b      	str	r3, [r7, #32]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	2b10      	cmp	r3, #16
 8003692:	dded      	ble.n	8003670 <convertDataToBytes+0xf4>
		MiscPayload8[i] = buffer_to_char_union6.temp_char[i - 13];
	}
}
 8003694:	bf00      	nop
 8003696:	373c      	adds	r7, #60	; 0x3c
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	200005ac 	.word	0x200005ac
 80036a4:	20000600 	.word	0x20000600
 80036a8:	200005b8 	.word	0x200005b8
 80036ac:	200005d4 	.word	0x200005d4
 80036b0:	200005e8 	.word	0x200005e8
 80036b4:	2000043c 	.word	0x2000043c
 80036b8:	20000440 	.word	0x20000440
 80036bc:	200005a4 	.word	0x200005a4

080036c0 <setUpPWM>:
 *  Created on: Oct 13, 2014
 *      Author: Callen Fisher
 */
#include "pwm.h"

void setUpPWM() {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); //tim1 ch3 //PA10
 80036c6:	2101      	movs	r1, #1
 80036c8:	2004      	movs	r0, #4
 80036ca:	f7fe f905 	bl	80018d8 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80036ce:	2101      	movs	r1, #1
 80036d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80036d4:	f7fe f900 	bl	80018d8 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80036d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036dc:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80036de:	2303      	movs	r3, #3
 80036e0:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80036e2:	2318      	movs	r3, #24
 80036e4:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80036e6:	f107 031c 	add.w	r3, r7, #28
 80036ea:	4619      	mov	r1, r3
 80036ec:	481d      	ldr	r0, [pc, #116]	; (8003764 <setUpPWM+0xa4>)
 80036ee:	f7fd fcd9 	bl	80010a4 <GPIO_Init>

	//set up timer

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStruct;

	TIM_TimeBaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 80036f2:	2300      	movs	r3, #0
 80036f4:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 80036f6:	2300      	movs	r3, #0
 80036f8:	827b      	strh	r3, [r7, #18]
	TIM_TimeBaseStruct.TIM_Period = 40000; //makes it 100Hz
 80036fa:	f649 4340 	movw	r3, #40000	; 0x9c40
 80036fe:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStruct.TIM_Prescaler = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	823b      	strh	r3, [r7, #16]
	TIM_TimeBaseStruct.TIM_RepetitionCounter = 0x0000;
 8003704:	2300      	movs	r3, #0
 8003706:	763b      	strb	r3, [r7, #24]

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStruct);
 8003708:	f107 0310 	add.w	r3, r7, #16
 800370c:	4619      	mov	r1, r3
 800370e:	4816      	ldr	r0, [pc, #88]	; (8003768 <setUpPWM+0xa8>)
 8003710:	f7fe fa2e 	bl	8001b70 <TIM_TimeBaseInit>

	TIM_OCInitTypeDef OC;

	OC.TIM_OCMode = TIM_OCMode_PWM1;
 8003714:	2360      	movs	r3, #96	; 0x60
 8003716:	803b      	strh	r3, [r7, #0]
	OC.TIM_OutputState = TIM_OutputState_Enable;
 8003718:	2301      	movs	r3, #1
 800371a:	807b      	strh	r3, [r7, #2]
	OC.TIM_Pulse = 2000;
 800371c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003720:	80fb      	strh	r3, [r7, #6]
	OC.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003722:	2302      	movs	r3, #2
 8003724:	813b      	strh	r3, [r7, #8]

	TIM_OC3Init(TIM1, &OC);
 8003726:	463b      	mov	r3, r7
 8003728:	4619      	mov	r1, r3
 800372a:	480f      	ldr	r0, [pc, #60]	; (8003768 <setUpPWM+0xa8>)
 800372c:	f7fe fa9c 	bl	8001c68 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8003730:	2108      	movs	r1, #8
 8003732:	480d      	ldr	r0, [pc, #52]	; (8003768 <setUpPWM+0xa8>)
 8003734:	f7fe fba8 	bl	8001e88 <TIM_OC3PreloadConfig>

	TIM_ARRPreloadConfig(TIM1, DISABLE);
 8003738:	2100      	movs	r1, #0
 800373a:	480b      	ldr	r0, [pc, #44]	; (8003768 <setUpPWM+0xa8>)
 800373c:	f7fe fb84 	bl	8001e48 <TIM_ARRPreloadConfig>
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8003740:	2101      	movs	r1, #1
 8003742:	4809      	ldr	r0, [pc, #36]	; (8003768 <setUpPWM+0xa8>)
 8003744:	f7fe fb36 	bl	8001db4 <TIM_CtrlPWMOutputs>
	TIM_Cmd(TIM1, ENABLE);
 8003748:	2101      	movs	r1, #1
 800374a:	4807      	ldr	r0, [pc, #28]	; (8003768 <setUpPWM+0xa8>)
 800374c:	f7fe fb12 	bl	8001d74 <TIM_Cmd>
	TIM_SetCompare3(TIM1, 10000); //inversed//set compare sets the duty (val between 0 and 40 000 where 40000 is 0% and 0 is 100%
 8003750:	f242 7110 	movw	r1, #10000	; 0x2710
 8003754:	4804      	ldr	r0, [pc, #16]	; (8003768 <setUpPWM+0xa8>)
 8003756:	f7fe fbb3 	bl	8001ec0 <TIM_SetCompare3>

}
 800375a:	bf00      	nop
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40010800 	.word	0x40010800
 8003768:	40012c00 	.word	0x40012c00

0800376c <serialTerminal_Init>:
 *      Edited by: Roberto Aldera
 */
#include "serial_terminal.h"
#include "CRC.h"

void serialTerminal_Init(void) {
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
	initCRC();
 8003770:	f7ff f99c 	bl	8002aac <initCRC>
}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}

08003778 <serialTerminal_packetize>:

void serialTerminal_packetize(uint8_t* payload_to_packS1,
		uint8_t* payload_to_packS2, uint8_t* payload_to_packS3,
		uint8_t* payload_to_packS4, uint16_t length_of_payloadS1,
		uint16_t length_of_payloadS2, uint16_t length_of_payloadS3,
		uint16_t length_of_payloadS4) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b09a      	sub	sp, #104	; 0x68
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
	CommsTask_TransmitPacketStruct pkt_to_tx;
	uint16_t raw_data_pointer = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint16_t packet_data_pointer = 4;
 800378c:	2304      	movs	r3, #4
 800378e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t crcCalculated;
	uint8_t char_to_pack;
	uint8_t a = 4;
 8003792:	2304      	movs	r3, #4
 8003794:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	//put data
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS1;
 8003798:	2300      	movs	r3, #0
 800379a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800379e:	e054      	b.n	800384a <serialTerminal_packetize+0xd2>
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
		char_to_pack = payload_to_packS1[raw_data_pointer];
 80037a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		t[a] = char_to_pack;
 80037ae:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80037b2:	49e0      	ldr	r1, [pc, #896]	; (8003b34 <serialTerminal_packetize+0x3bc>)
 80037b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80037b8:	54ca      	strb	r2, [r1, r3]
		if (char_to_pack == 0x7E) {
 80037ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037be:	2b7e      	cmp	r3, #126	; 0x7e
 80037c0:	d113      	bne.n	80037ea <serialTerminal_packetize+0x72>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80037c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 80037cc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80037d0:	4413      	add	r3, r2
 80037d2:	227d      	movs	r2, #125	; 0x7d
 80037d4:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5E;
 80037d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80037dc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80037e0:	4413      	add	r3, r2
 80037e2:	225e      	movs	r2, #94	; 0x5e
 80037e4:	f803 2c4c 	strb.w	r2, [r3, #-76]
 80037e8:	e020      	b.n	800382c <serialTerminal_packetize+0xb4>
		} else if (char_to_pack == 0x7D) {
 80037ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037ee:	2b7d      	cmp	r3, #125	; 0x7d
 80037f0:	d113      	bne.n	800381a <serialTerminal_packetize+0xa2>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80037f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 80037fc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003800:	4413      	add	r3, r2
 8003802:	227d      	movs	r2, #125	; 0x7d
 8003804:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
 8003808:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800380c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003810:	4413      	add	r3, r2
 8003812:	225d      	movs	r2, #93	; 0x5d
 8003814:	f803 2c4c 	strb.w	r2, [r3, #-76]
 8003818:	e008      	b.n	800382c <serialTerminal_packetize+0xb4>
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 800381a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800381e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003822:	4413      	add	r3, r2
 8003824:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003828:	f803 2c4c 	strb.w	r2, [r3, #-76]
	uint16_t crcCalculated;
	uint8_t char_to_pack;
	uint8_t a = 4;
	//put data
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS1;
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
 800382c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003830:	3301      	adds	r3, #1
 8003832:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003836:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800383a:	3301      	adds	r3, #1
 800383c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003840:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003844:	3301      	adds	r3, #1
 8003846:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	uint16_t packet_data_pointer = 4;
	uint16_t crcCalculated;
	uint8_t char_to_pack;
	uint8_t a = 4;
	//put data
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS1;
 800384a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800384e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003852:	429a      	cmp	r2, r3
 8003854:	d3a4      	bcc.n	80037a0 <serialTerminal_packetize+0x28>
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS2;
 8003856:	2300      	movs	r3, #0
 8003858:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800385c:	e054      	b.n	8003908 <serialTerminal_packetize+0x190>
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
		char_to_pack = payload_to_packS2[raw_data_pointer];
 800385e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	4413      	add	r3, r2
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		t[a] = char_to_pack;
 800386c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003870:	49b0      	ldr	r1, [pc, #704]	; (8003b34 <serialTerminal_packetize+0x3bc>)
 8003872:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003876:	54ca      	strb	r2, [r1, r3]
		if (char_to_pack == 0x7E) {
 8003878:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800387c:	2b7e      	cmp	r3, #126	; 0x7e
 800387e:	d113      	bne.n	80038a8 <serialTerminal_packetize+0x130>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8003880:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 800388a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800388e:	4413      	add	r3, r2
 8003890:	227d      	movs	r2, #125	; 0x7d
 8003892:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5E;
 8003896:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800389a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800389e:	4413      	add	r3, r2
 80038a0:	225e      	movs	r2, #94	; 0x5e
 80038a2:	f803 2c4c 	strb.w	r2, [r3, #-76]
 80038a6:	e020      	b.n	80038ea <serialTerminal_packetize+0x172>
		} else if (char_to_pack == 0x7D) {
 80038a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038ac:	2b7d      	cmp	r3, #125	; 0x7d
 80038ae:	d113      	bne.n	80038d8 <serialTerminal_packetize+0x160>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80038b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 80038ba:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80038be:	4413      	add	r3, r2
 80038c0:	227d      	movs	r2, #125	; 0x7d
 80038c2:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
 80038c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038ca:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80038ce:	4413      	add	r3, r2
 80038d0:	225d      	movs	r2, #93	; 0x5d
 80038d2:	f803 2c4c 	strb.w	r2, [r3, #-76]
 80038d6:	e008      	b.n	80038ea <serialTerminal_packetize+0x172>
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 80038d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038dc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80038e0:	4413      	add	r3, r2
 80038e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80038e6:	f803 2c4c 	strb.w	r2, [r3, #-76]
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS2;
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
 80038ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80038ee:	3301      	adds	r3, #1
 80038f0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80038f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038f8:	3301      	adds	r3, #1
 80038fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80038fe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003902:	3301      	adds	r3, #1
 8003904:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS2;
 8003908:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800390c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003910:	429a      	cmp	r2, r3
 8003912:	d3a4      	bcc.n	800385e <serialTerminal_packetize+0xe6>
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS3;
 8003914:	2300      	movs	r3, #0
 8003916:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800391a:	e054      	b.n	80039c6 <serialTerminal_packetize+0x24e>
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
		char_to_pack = payload_to_packS3[raw_data_pointer];
 800391c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		t[a] = char_to_pack;
 800392a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800392e:	4981      	ldr	r1, [pc, #516]	; (8003b34 <serialTerminal_packetize+0x3bc>)
 8003930:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003934:	54ca      	strb	r2, [r1, r3]
		if (char_to_pack == 0x7E) {
 8003936:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800393a:	2b7e      	cmp	r3, #126	; 0x7e
 800393c:	d113      	bne.n	8003966 <serialTerminal_packetize+0x1ee>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 800393e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 8003948:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800394c:	4413      	add	r3, r2
 800394e:	227d      	movs	r2, #125	; 0x7d
 8003950:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5E;
 8003954:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003958:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800395c:	4413      	add	r3, r2
 800395e:	225e      	movs	r2, #94	; 0x5e
 8003960:	f803 2c4c 	strb.w	r2, [r3, #-76]
 8003964:	e020      	b.n	80039a8 <serialTerminal_packetize+0x230>
		} else if (char_to_pack == 0x7D) {
 8003966:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800396a:	2b7d      	cmp	r3, #125	; 0x7d
 800396c:	d113      	bne.n	8003996 <serialTerminal_packetize+0x21e>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 800396e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 8003978:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800397c:	4413      	add	r3, r2
 800397e:	227d      	movs	r2, #125	; 0x7d
 8003980:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
 8003984:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003988:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800398c:	4413      	add	r3, r2
 800398e:	225d      	movs	r2, #93	; 0x5d
 8003990:	f803 2c4c 	strb.w	r2, [r3, #-76]
 8003994:	e008      	b.n	80039a8 <serialTerminal_packetize+0x230>
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 8003996:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800399a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800399e:	4413      	add	r3, r2
 80039a0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80039a4:	f803 2c4c 	strb.w	r2, [r3, #-76]
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS3;
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
 80039a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80039ac:	3301      	adds	r3, #1
 80039ae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80039b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80039b6:	3301      	adds	r3, #1
 80039b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80039bc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80039c0:	3301      	adds	r3, #1
 80039c2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS3;
 80039c6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80039ca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d3a4      	bcc.n	800391c <serialTerminal_packetize+0x1a4>
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS4;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80039d8:	e054      	b.n	8003a84 <serialTerminal_packetize+0x30c>
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
		char_to_pack = payload_to_packS4[raw_data_pointer];
 80039da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		t[a] = char_to_pack;
 80039e8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80039ec:	4951      	ldr	r1, [pc, #324]	; (8003b34 <serialTerminal_packetize+0x3bc>)
 80039ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80039f2:	54ca      	strb	r2, [r1, r3]
		if (char_to_pack == 0x7E) {
 80039f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039f8:	2b7e      	cmp	r3, #126	; 0x7e
 80039fa:	d113      	bne.n	8003a24 <serialTerminal_packetize+0x2ac>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80039fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 8003a06:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003a0a:	4413      	add	r3, r2
 8003a0c:	227d      	movs	r2, #125	; 0x7d
 8003a0e:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5E;
 8003a12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a16:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003a1a:	4413      	add	r3, r2
 8003a1c:	225e      	movs	r2, #94	; 0x5e
 8003a1e:	f803 2c4c 	strb.w	r2, [r3, #-76]
 8003a22:	e020      	b.n	8003a66 <serialTerminal_packetize+0x2ee>
		} else if (char_to_pack == 0x7D) {
 8003a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a28:	2b7d      	cmp	r3, #125	; 0x7d
 8003a2a:	d113      	bne.n	8003a54 <serialTerminal_packetize+0x2dc>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8003a2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 8003a36:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003a3a:	4413      	add	r3, r2
 8003a3c:	227d      	movs	r2, #125	; 0x7d
 8003a3e:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
 8003a42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a46:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003a4a:	4413      	add	r3, r2
 8003a4c:	225d      	movs	r2, #93	; 0x5d
 8003a4e:	f803 2c4c 	strb.w	r2, [r3, #-76]
 8003a52:	e008      	b.n	8003a66 <serialTerminal_packetize+0x2ee>
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 8003a54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a58:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a62:	f803 2c4c 	strb.w	r2, [r3, #-76]
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS4;
			raw_data_pointer++, packet_data_pointer++, a++) { //for both bytes of the pkt_code,
 8003a66:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003a70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a74:	3301      	adds	r3, #1
 8003a76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003a7a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	for (raw_data_pointer = 0; raw_data_pointer < length_of_payloadS4;
 8003a84:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003a88:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d3a4      	bcc.n	80039da <serialTerminal_packetize+0x262>
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}
	uint16_t l = a - 4;
 8003a90:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b04      	subs	r3, #4
 8003a98:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

	union {
		char temp_char[2];
		uint16_t temp_16;
	} buffer_to_char_union1;
	buffer_to_char_union1.temp_16 = 0x0101;
 8003a9c:	f240 1301 	movw	r3, #257	; 0x101
 8003aa0:	833b      	strh	r3, [r7, #24]

	pkt_to_tx.data[0] = buffer_to_char_union1.temp_char[0];
 8003aa2:	7e3b      	ldrb	r3, [r7, #24]
 8003aa4:	773b      	strb	r3, [r7, #28]
	pkt_to_tx.data[1] = buffer_to_char_union1.temp_char[1];
 8003aa6:	7e7b      	ldrb	r3, [r7, #25]
 8003aa8:	777b      	strb	r3, [r7, #29]
	t[0] = buffer_to_char_union1.temp_char[0];
 8003aaa:	7e3a      	ldrb	r2, [r7, #24]
 8003aac:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <serialTerminal_packetize+0x3bc>)
 8003aae:	701a      	strb	r2, [r3, #0]
	t[1] = buffer_to_char_union1.temp_char[1];
 8003ab0:	7e7a      	ldrb	r2, [r7, #25]
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <serialTerminal_packetize+0x3bc>)
 8003ab4:	705a      	strb	r2, [r3, #1]
	union {
		char temp_char[2];
		uint16_t temp_16;
	} buffer_to_char_union2;
	buffer_to_char_union2.temp_16 = l;
 8003ab6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003aba:	82bb      	strh	r3, [r7, #20]

	pkt_to_tx.data[2] = buffer_to_char_union2.temp_char[0];
 8003abc:	7d3b      	ldrb	r3, [r7, #20]
 8003abe:	77bb      	strb	r3, [r7, #30]
	pkt_to_tx.data[3] = buffer_to_char_union2.temp_char[1];
 8003ac0:	7d7b      	ldrb	r3, [r7, #21]
 8003ac2:	77fb      	strb	r3, [r7, #31]
	t[2] = buffer_to_char_union2.temp_char[0];
 8003ac4:	7d3a      	ldrb	r2, [r7, #20]
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <serialTerminal_packetize+0x3bc>)
 8003ac8:	709a      	strb	r2, [r3, #2]
	t[3] = buffer_to_char_union2.temp_char[1];
 8003aca:	7d7a      	ldrb	r2, [r7, #21]
 8003acc:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <serialTerminal_packetize+0x3bc>)
 8003ace:	70da      	strb	r2, [r3, #3]
	//calculate CRC
	crcCalculated = (uint16_t) crcCalc(t, 0, a); //(uint16_t) crcCalc(pkt_to_tx.data, 4, packet_data_pointer-4);////////////////////COULD BE ERROR HERE
 8003ad0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4816      	ldr	r0, [pc, #88]	; (8003b34 <serialTerminal_packetize+0x3bc>)
 8003adc:	f7fe fff2 	bl	8002ac4 <crcCalc>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	//put CRC
	for (raw_data_pointer = 0; raw_data_pointer < 2;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003aec:	e04f      	b.n	8003b8e <serialTerminal_packetize+0x416>
			raw_data_pointer++, packet_data_pointer++) {
		char_to_pack = (uint8_t) ((crcCalculated >> 8 * (1 - raw_data_pointer))
 8003aee:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8003af2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003af6:	f1c3 0301 	rsb	r3, r3, #1
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	fa42 f303 	asr.w	r3, r2, r3
 8003b00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				& 0x00FF);
		if (char_to_pack == 0x7E) {
 8003b04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b08:	2b7e      	cmp	r3, #126	; 0x7e
 8003b0a:	d115      	bne.n	8003b38 <serialTerminal_packetize+0x3c0>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8003b0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 8003b16:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003b1a:	4413      	add	r3, r2
 8003b1c:	227d      	movs	r2, #125	; 0x7d
 8003b1e:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5E;
 8003b22:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b26:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003b2a:	4413      	add	r3, r2
 8003b2c:	225e      	movs	r2, #94	; 0x5e
 8003b2e:	f803 2c4c 	strb.w	r2, [r3, #-76]
 8003b32:	e022      	b.n	8003b7a <serialTerminal_packetize+0x402>
 8003b34:	20000450 	.word	0x20000450
		} else if (char_to_pack == 0x7D) {
 8003b38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b3c:	2b7d      	cmp	r3, #125	; 0x7d
 8003b3e:	d113      	bne.n	8003b68 <serialTerminal_packetize+0x3f0>
			pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 8003b40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 8003b4a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003b4e:	4413      	add	r3, r2
 8003b50:	227d      	movs	r2, #125	; 0x7d
 8003b52:	f803 2c4c 	strb.w	r2, [r3, #-76]
			pkt_to_tx.data[packet_data_pointer] = 0x5D;
 8003b56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b5a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003b5e:	4413      	add	r3, r2
 8003b60:	225d      	movs	r2, #93	; 0x5d
 8003b62:	f803 2c4c 	strb.w	r2, [r3, #-76]
 8003b66:	e008      	b.n	8003b7a <serialTerminal_packetize+0x402>
		} else {
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 8003b68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b6c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003b70:	4413      	add	r3, r2
 8003b72:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003b76:	f803 2c4c 	strb.w	r2, [r3, #-76]
	//calculate CRC
	crcCalculated = (uint16_t) crcCalc(t, 0, a); //(uint16_t) crcCalc(pkt_to_tx.data, 4, packet_data_pointer-4);////////////////////COULD BE ERROR HERE

	//put CRC
	for (raw_data_pointer = 0; raw_data_pointer < 2;
			raw_data_pointer++, packet_data_pointer++) {
 8003b7a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003b84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	t[3] = buffer_to_char_union2.temp_char[1];
	//calculate CRC
	crcCalculated = (uint16_t) crcCalc(t, 0, a); //(uint16_t) crcCalc(pkt_to_tx.data, 4, packet_data_pointer-4);////////////////////COULD BE ERROR HERE

	//put CRC
	for (raw_data_pointer = 0; raw_data_pointer < 2;
 8003b8e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d9ab      	bls.n	8003aee <serialTerminal_packetize+0x376>
			pkt_to_tx.data[packet_data_pointer] = char_to_pack;
		}
	}

	//set pkt length
	pkt_to_tx.bytes_to_tx = packet_data_pointer + 2;
 8003b96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	//convert this to the TX buffer array
	TxBuff[0] = 0x7E; //start character
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <serialTerminal_packetize+0x49c>)
 8003ba4:	227e      	movs	r2, #126	; 0x7e
 8003ba6:	701a      	strb	r2, [r3, #0]

	//add the data (has the CRC,length and opcode in it)
	int i;
	for (i = 1; i < pkt_to_tx.bytes_to_tx - 1; i++) {		//this was -1
 8003ba8:	2301      	movs	r3, #1
 8003baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bac:	e00e      	b.n	8003bcc <serialTerminal_packetize+0x454>
		TxBuff[i] = pkt_to_tx.data[i - 1];
 8003bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f813 1c4c 	ldrb.w	r1, [r3, #-76]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <serialTerminal_packetize+0x49c>)
 8003bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc0:	4413      	add	r3, r2
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	701a      	strb	r2, [r3, #0]
	//convert this to the TX buffer array
	TxBuff[0] = 0x7E; //start character

	//add the data (has the CRC,length and opcode in it)
	int i;
	for (i = 1; i < pkt_to_tx.bytes_to_tx - 1; i++) {		//this was -1
 8003bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc8:	3301      	adds	r3, #1
 8003bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bd0:	1e5a      	subs	r2, r3, #1
 8003bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	dcea      	bgt.n	8003bae <serialTerminal_packetize+0x436>
		TxBuff[i] = pkt_to_tx.data[i - 1];
	}
	//add the terminating character
	TxBuff[pkt_to_tx.bytes_to_tx - 1] = 0x7E; //was -1
 8003bd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	4a0d      	ldr	r2, [pc, #52]	; (8003c14 <serialTerminal_packetize+0x49c>)
 8003be0:	217e      	movs	r1, #126	; 0x7e
 8003be2:	54d1      	strb	r1, [r2, r3]
	//TxBuff[7] = 35; 						//drops a # into the packet just for testing
	Tx_chars = pkt_to_tx.bytes_to_tx;		//does this line even get used?
 8003be4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <serialTerminal_packetize+0x4a0>)
 8003bea:	801a      	strh	r2, [r3, #0]

	int p = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	65bb      	str	r3, [r7, #88]	; 0x58

	for (p = 0; p < sizeof(t); p++) {
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bf4:	e007      	b.n	8003c06 <serialTerminal_packetize+0x48e>

		t[p] = 0;
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <serialTerminal_packetize+0x4a4>)
 8003bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bfa:	4413      	add	r3, r2
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
	//TxBuff[7] = 35; 						//drops a # into the packet just for testing
	Tx_chars = pkt_to_tx.bytes_to_tx;		//does this line even get used?

	int p = 0;

	for (p = 0; p < sizeof(t); p++) {
 8003c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c02:	3301      	adds	r3, #1
 8003c04:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c08:	2b33      	cmp	r3, #51	; 0x33
 8003c0a:	d9f4      	bls.n	8003bf6 <serialTerminal_packetize+0x47e>

		t[p] = 0;
	}
}
 8003c0c:	bf00      	nop
 8003c0e:	3768      	adds	r7, #104	; 0x68
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	2000055c 	.word	0x2000055c
 8003c18:	20000484 	.word	0x20000484
 8003c1c:	20000450 	.word	0x20000450

08003c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003c24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003c26:	e003      	b.n	8003c30 <LoopCopyDataInit>

08003c28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8003c2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003c2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003c2e:	3104      	adds	r1, #4

08003c30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003c30:	480b      	ldr	r0, [pc, #44]	; (8003c60 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8003c34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003c36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003c38:	d3f6      	bcc.n	8003c28 <CopyDataInit>
	ldr	r2, =_sbss
 8003c3a:	4a0b      	ldr	r2, [pc, #44]	; (8003c68 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8003c3c:	e002      	b.n	8003c44 <LoopFillZerobss>

08003c3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003c3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003c40:	f842 3b04 	str.w	r3, [r2], #4

08003c44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8003c46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003c48:	d3f9      	bcc.n	8003c3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c4a:	f000 f841 	bl	8003cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c4e:	f000 f8f9 	bl	8003e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c52:	f7ff fbdd 	bl	8003410 <main>
	bx	lr
 8003c56:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c58:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8003c5c:	08003eb0 	.word	0x08003eb0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003c60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003c64:	20000014 	.word	0x20000014
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8003c68:	20000014 	.word	0x20000014
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8003c6c:	2000063c 	.word	0x2000063c

08003c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c70:	e7fe      	b.n	8003c70 <ADC1_2_IRQHandler>
	...

08003c74 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8003c84:	e7fe      	b.n	8003c84 <HardFault_Handler+0x4>
 8003c86:	bf00      	nop

08003c88 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8003c8c:	e7fe      	b.n	8003c8c <MemManage_Handler+0x4>
 8003c8e:	bf00      	nop

08003c90 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8003c94:	e7fe      	b.n	8003c94 <BusFault_Handler+0x4>
 8003c96:	bf00      	nop

08003c98 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8003c9c:	e7fe      	b.n	8003c9c <UsageFault_Handler+0x4>
 8003c9e:	bf00      	nop

08003ca0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003cd4:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <SystemInit+0x5c>)
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <SystemInit+0x5c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003ce0:	4912      	ldr	r1, [pc, #72]	; (8003d2c <SystemInit+0x5c>)
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <SystemInit+0x5c>)
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <SystemInit+0x60>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003cec:	4a0f      	ldr	r2, [pc, #60]	; (8003d2c <SystemInit+0x5c>)
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <SystemInit+0x5c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <SystemInit+0x5c>)
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <SystemInit+0x5c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003d08:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <SystemInit+0x5c>)
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <SystemInit+0x5c>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003d12:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <SystemInit+0x5c>)
 8003d16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003d1a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8003d1c:	f000 f80c 	bl	8003d38 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <SystemInit+0x64>)
 8003d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d26:	609a      	str	r2, [r3, #8]
#endif 
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	f8ff0000 	.word	0xf8ff0000
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8003d3c:	f000 f802 	bl	8003d44 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003d40:	bf00      	nop
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003d52:	4a3a      	ldr	r2, [pc, #232]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003d54:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003d5e:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d103      	bne.n	8003d7c <SetSysClockTo72+0x38>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003d7a:	d1f0      	bne.n	8003d5e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003d7c:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	e001      	b.n	8003d92 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d14b      	bne.n	8003e30 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003d98:	4a29      	ldr	r2, [pc, #164]	; (8003e40 <SetSysClockTo72+0xfc>)
 8003d9a:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <SetSysClockTo72+0xfc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f043 0310 	orr.w	r3, r3, #16
 8003da2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <SetSysClockTo72+0xfc>)
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <SetSysClockTo72+0xfc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003db0:	4a23      	ldr	r2, [pc, #140]	; (8003e40 <SetSysClockTo72+0xfc>)
 8003db2:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <SetSysClockTo72+0xfc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f043 0302 	orr.w	r3, r3, #2
 8003dba:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003dbc:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003dcc:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003dce:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8003dd8:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003dda:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003de2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8003de4:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003dee:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003df0:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003dfc:	bf00      	nop
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f9      	beq.n	8003dfe <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003e0a:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 0303 	bic.w	r3, r3, #3
 8003e14:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003e16:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8003e22:	bf00      	nop
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <SetSysClockTo72+0xf8>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d1f9      	bne.n	8003e24 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40022000 	.word	0x40022000

08003e44 <__libc_init_array>:
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <__libc_init_array+0x3c>)
 8003e46:	b570      	push	{r4, r5, r6, lr}
 8003e48:	461e      	mov	r6, r3
 8003e4a:	4c0e      	ldr	r4, [pc, #56]	; (8003e84 <__libc_init_array+0x40>)
 8003e4c:	2500      	movs	r5, #0
 8003e4e:	1ae4      	subs	r4, r4, r3
 8003e50:	10a4      	asrs	r4, r4, #2
 8003e52:	42a5      	cmp	r5, r4
 8003e54:	d004      	beq.n	8003e60 <__libc_init_array+0x1c>
 8003e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e5a:	4798      	blx	r3
 8003e5c:	3501      	adds	r5, #1
 8003e5e:	e7f8      	b.n	8003e52 <__libc_init_array+0xe>
 8003e60:	f000 f816 	bl	8003e90 <_init>
 8003e64:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <__libc_init_array+0x44>)
 8003e66:	4c09      	ldr	r4, [pc, #36]	; (8003e8c <__libc_init_array+0x48>)
 8003e68:	461e      	mov	r6, r3
 8003e6a:	1ae4      	subs	r4, r4, r3
 8003e6c:	10a4      	asrs	r4, r4, #2
 8003e6e:	2500      	movs	r5, #0
 8003e70:	42a5      	cmp	r5, r4
 8003e72:	d004      	beq.n	8003e7e <__libc_init_array+0x3a>
 8003e74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e78:	4798      	blx	r3
 8003e7a:	3501      	adds	r5, #1
 8003e7c:	e7f8      	b.n	8003e70 <__libc_init_array+0x2c>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	08003ea8 	.word	0x08003ea8
 8003e84:	08003ea8 	.word	0x08003ea8
 8003e88:	08003ea8 	.word	0x08003ea8
 8003e8c:	08003eac 	.word	0x08003eac

08003e90 <_init>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr

08003e9c <_fini>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	bf00      	nop
 8003ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea2:	bc08      	pop	{r3}
 8003ea4:	469e      	mov	lr, r3
 8003ea6:	4770      	bx	lr
